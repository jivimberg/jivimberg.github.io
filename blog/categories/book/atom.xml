<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2019-07-09T00:01:20-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Radical Candor]]></title>
    <link href="http://jivimberg.github.io/blog/2018/09/30/book-recommendations-radical-candor/"/>
    <updated>2018-09-30T11:28:59-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/09/30/book-recommendations-radical-candor</id>
    <content type="html"><![CDATA[<p>Last week I finished <a href="https://www.amazon.com/Radical-Candor-Kim-Scott/dp/B01MY574EE/ref=sr_1_1?ie=UTF8&amp;qid=1538332470&amp;sr=8-1&amp;keywords=radical+candor">Radical Candor</a> a book by <a href="https://www.kimmalonescott.com/">Kim Scott</a> about <em>how to be a good boss without being an asshole</em>. Here’s what I learned.</p>

<!--more-->




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%" src="https://read.amazon.com/kp/card?asin=B01KTIEFEE&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_IcxSBbZDBE91M" ></iframe>


<h1>1.  Be honest. Specially when it’s hard</h1>

<p><blockquote><p></p></p><p><p>“From the time we learn to speak, we’re told that if you don’t have anything nice to say, don’t say anything at all. When you become a manager, it’s your job to say it&ndash;and your obligation.”</p></p><p><p></p><footer><strong>Kim Scott</strong> <cite>Radical Candor</cite></footer></blockquote></p>

<p>If somebody’s work is subpar and you let it pass and pretend is good, <strong>you’re doing everybody a disservice</strong>. You’re hurting the team because either you or somebody else, will have to cover up for the guy and redo the work. And at the same time you’re setting a precedent that it is OK to deliver poor work.</p>

<p>But even more importantly <strong>you’re not giving that person the chance to improve by pointing out what he/she needs to work on!</strong> So if you care about your team, speak up! Be <em>honest</em>, be <em>direct</em> and be <em>specific</em>.</p>

<h1>2. How to be direct without being a dick</h1>

<p>Kim’s advise is to <em>care personally™</em>, which to me means: <strong>care for the other person, but seriously</strong>.</p>

<p>It’s not enough to remember you employees partner’s name, or to ask about his hobbies every now and then. To make radical candor work you have to build and actual relationship with your direct reports. Get to know them. <strong>Understand where they come from and what drives them</strong>.</p>

<p>So, how to put this in practice? The book has a ton of useful <strong>tips on how to criticize without discouraging</strong>. For example:</p>

<ol>
<li><strong>Start by asking for feedback before giving it</strong>. Show that you’re open to criticism and make sure you reward people that takes the time and effort to correct you. This is the only way you can build of culture of radical candor.</li>
<li><strong>Don’t make it personal</strong>. When pointing out things that can be improved make it clear that it’s not about the person but about the work done. Be specific! And present it as an opportunity for improvement and <em>offering help and guidance to fix the problem</em>.</li>
</ol>


<h1>3. Not everybody is looking for  a promotion</h1>

<p>This one is about how we value and judge ambition. As the book points out <strong>not everybody on your team is eager to jump to a new position or wants to be a manager</strong>. You’ll probably have some team members that are content with their current position and, for whatever reason, are not looking for a change. And that’s ok!</p>

<p>The book calls this people <em>”Rockstars”</em> because they are the rock that brings stability to the team. An uses the term <em>“Superstars”</em> for the more ambitious kind that are looking for new opportunities to shine. I think the names are stupid. But what’s not stupid is the realization that <strong>you need both kinds of people in your team</strong>.</p>

<p>If your team is only composed of <em>”Superstars”</em> then if they succeed (and it’s your job to help them succeed!) then you’ll end up without team because everybody has moved to a new thing. On the other hand if your team is all <em>“Rockstars”</em> then you run the risk of stagnation as you’ll lack your main agents of innovation. You’ll need to get the right mix of <em>“Rockstars”</em> and <em>“Superstars”</em> for your team to be successful.</p>

<p>It’s worth pointing out that <strong>this “labels” are not permanent</strong>. People will move between the two kinds based on their priorities, values and things on their personal life. And it’s your job as manager to figure out what each team member is aiming for, and help them get there.</p>

<p>Remember that promotions are just one way of recognizing people’s work, and it might not be the best reward for everybody.</p>

<h1>4. On culture</h1>

<p>I found quite interesting the observation that, when left unchecked, <strong>the team’s culture tends to reflect it’s leaders strengths and short-comings</strong>. Kim explains  how every action, big or small, has an impact on the team culture. So for example, if you’re working on improving the product quality and attention to detail you shouldn’t send emails with spelling mistakes. <strong>You have to lead by example and inspire people to follow</strong>.</p>

<p>The only way of creating a long-lasting culture is by inspiring people and letting them contribute with their own ideas.</p>

<hr />

<p>I’m just scratching the surface here. The book expands on the mentioned topics with good real-world examples. The second portion of the book focuses on the details on how to put the theory in practice. It covers from things like <em>how to schedule and conduct your one-on-ones</em> to <em>hiring techniques to avoid biases</em>. <strong>So go read it!</strong> I’m sure you’ll find something useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Migrating to Cloud-Native Application Architectures]]></title>
    <link href="http://jivimberg.github.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures/"/>
    <updated>2018-07-24T16:18:45-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures</id>
    <content type="html"><![CDATA[<p>Complementing <a href="https://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/">my last book recommendation</a> on <em> Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a> now I present <a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><em>Migrating to Cloud-Native Application Architectures</em></a> by <a href="@mstine">Matt Stine</a>.</p>

<!--more-->


<p><a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><img class="center" src="/images/posts/2018-07-28/cover.jpg" title="’Migrating to Cloud-Native Application book cover’" ></a></p>

<p>I’m really digging this O’Reilly booklet style! They <strong>condense a good overview of a specific topic in one-sitting books</strong>. While at the same time provide enough links and resources to keep you digging for a few afternoons if interested.</p>

<p>Matt’s book is divided in 3 parts. The first bit <strong>”The rise of cloud service”</strong> serves as an introduction to the topic. It defines <em>cloud native architectures </em> key characteristics and <strong>why you might consider using one</strong>.  If you are already familiar with the subject you may want to skim through this first section.</p>

<p>The second part is the one I enjoyed the most. It talks about <strong>the changes needed to go cloud native</strong>. It covers areas that are sometimes forgotten or considered as an afterthought such as <em>team collaboration</em>, <em>organizational changes</em> (the <a href="https://www.thoughtworks.com/radar/techniques/inverse-conway-maneuver">Inverse Conway Maneuver</a>) and the <em>decentralization of decision making</em>. The rest of the chapter touches on the <strong>technical challenges</strong> required. It was really nice to see a bit on how to <strong>use <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> to identify service boundaries</strong> when decomposing data models.</p>

<p>On the last chapter, called <strong>Migration Cookbook</strong>, Matt explores different strategies for decomposing the monolith (such as <em>”strangling the monolith”</em>, <em>”new features as Micro-services”</em>, <em>”anti-corruption layer”</em>, etc.) and provides links to articles by companies that applied this strategies on their own systems. The book finishes with a section called <strong>Distributed system recipes</strong>  where some of the more common <em>“challenges”</em> of a cloud-native architecture are explored and particular solutions are presented using <a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a> and <a href="https://netflix.github.io/">Netflix OSS</a>. Here you’ll find things like <em>service discovery</em>, <em>versioned configuration</em>, <em>load balancing</em>, etc. Each topic is presented with a brief description of the problem, a mention of the Netflix OSS solution (and it’s features) and a code snippet showing how to integrate it with Spring.</p>

<h2>Bottom line</h2>

<p><strong>GO READ IT!</strong> It won’t take you more than an afternoon and chances are you’ll learn something new. You’ll walk away with <strong>a better understanding of the cloud-native landscape.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recomendations: Migrating to Microservices Databases]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/"/>
    <updated>2018-05-25T07:32:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases</id>
    <content type="html"><![CDATA[<p>Just finished reading <em> Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a>. If you can relate to the 3 nouns in the title then you’ll want to check it out.</p>

<!--more-->


<blockquote><p>Code is easy; state is hard.</p>

<p>— <em>Edson Yanaga</em></p></blockquote>

<p>If you are on the journey of <strong>migrating your monolith to a micro-service architecture</strong> (like every other developer this days) then, at some point, you probably found yourself staring at a whiteboard full of rectangles and hexagons thinking: <em>where does the data fit in this mess?</em></p>

<p>Maybe you’ve read about the <a href="http://microservices.io/patterns/data/database-per-service.html">“Database per service”</a> pattern and now you’re wondering what your requirements are on <a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">data consistency</a>. Or somebody told you about <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> but you don’t know it’s advantages and disadvantages.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="/images/posts/2018-05-26/MigratingToMicroservicesDatabases.png" title="’Migrating to Micro-services databases book cover’" ></a></p>

<p>Edson’s book opens with a brief recap of the micro-service world. Going from <em>“Why microservices”</em> to <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a> and <a href="https://martinfowler.com/bliki/CanaryRelease.html">Canary deployment</a>, the book provides a <strong>super-quick explanation of each concept without going into many details.</strong></p>

<p>By contrast the second part of the book deeps dive into <strong>how to handle the data</strong> of your micro-services. <em>Chapter 3</em> explains how to do <strong>Zero downtime migration</strong> of your relational DB and which tools to use.</p>

<p>On <em>Chapter 4</em> Edson introduces the different <strong>consistency models</strong> and compares <strong>CRUD Vs. CQRS</strong> (explaining also <em>Event sourcing</em>)</p>

<p><strong>The last chapter is, to me, the best.</strong> <em>Chapter 5</em>  contains a recount and description of some of the different <strong>Integration Strategies</strong> we might want to consider when <em>migrating the monolith</em>. Each strategy is briefly described, and we are also provided with an assessment of <strong>applicability</strong> and section of <strong>considerations</strong> to keep in mind if using this strategy.</p>

<h2>Conclusion</h2>

<p>The hardest part of design is not knowing the architectural patterns or the different techniques to solve a problem, but <strong>knowing which solution is a good fit to which problem.</strong> Yanaga’s book serves as a good <strong>catalog of possible solutions</strong> to consider, when working with data on micro-services. It provides a concise analysis of each <strong>strategy</strong> and helps us avoid those  <em>”I wish I’ve thought this better before writing the code”</em> moments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Isomorphic JavaScript Web Development]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/30/book-recommendations-isomorphic-javascript-web-development/"/>
    <updated>2018-04-30T07:15:04-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/30/book-recommendations-isomorphic-javascript-web-development</id>
    <content type="html"><![CDATA[<p>I finally got around to finish the new book my friend and colleague <a href="http://tomasalabes.me/">@talabes</a> wrote and I think it’s great. Here’s why.</p>

<!--more-->


<p><img class="center" src="/images/posts/2018-04-30/ketchup2.png" width="250" title="’Mr Burns ketchup catsup’" ></p>

<p>☝That’s me every single time I try to start a <em>simple</em> web project. If you are like me, not a full-time front-end developer, you probably know what I’m talking about (if not check <strong><a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">this article</a></strong> and try not to choke on your cereal laughing).</p>

<p>I found <a href="https://read.amazon.com/kp/embed?asin=B01DWFRFVG&amp;preview=newtab&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_atY5Ab9H5Y5ZH">Tomas’ book</a> to be the perfect cure against <a href="https://xkcd.com/1801/">decision paralysis</a> in the world of JavaScript web development. His approach is practical and concise:</p>

<blockquote><p><em>“Here’s the <strong>stack</strong> we are using. This is how you <strong>set it up</strong> and this is a <strong>basic example</strong> of what we’re trying to achieve. If you want to go deeper go and read this.”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></em></p></blockquote>

<p>From <strong>testing</strong> and <strong>bundling</strong> to <strong>routing</strong> and <strong>security</strong> this book goes through all the topics a developer needs to know, with easy-to-follow examples and useful tips <em>”from-the trenches”</em>. It serves as a <strong>comprehensive guide</strong>, covering all the things we need to consider to get our application up and running.</p>

<p>Finally, I love that the book answers <strong>common questions</strong> that sometimes other introductory material gloss over. Things like: <em>”how do I structure my project?”</em> or <em>”how can I troubleshoot and debug this thing?”</em>.</p>

<p>Curious? Take a quick look:</p>

<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%" src="https://read.amazon.com/kp/card?asin=B01DWFRFVG&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_atY5Ab9H5Y5ZH" ></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I’m not actually quoting Tomas, of course<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
