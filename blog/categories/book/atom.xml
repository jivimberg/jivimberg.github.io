<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | Coding Forest]]></title>
  <link href="http://jivimberg.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://jivimberg.io/"/>
  <updated>2023-09-13T05:40:48+00:00</updated>
  <id>http://jivimberg.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Shape Up]]></title>
    <link href="http://jivimberg.io/blog/2019/09/15/book-recommendations-shape-up/"/>
    <updated>2019-09-15T10:51:31-07:00</updated>
    <id>http://jivimberg.io/blog/2019/09/15/book-recommendations-shape-up</id>
    <content type="html"><![CDATA[<p>I love reading about how people do creative work. Be it <a href="https://en.wikipedia.org/wiki/On_Writing:_A_Memoir_of_the_Craft">writing books</a> or <a href="http://the-witness.net/news/">designing video games</a>, there‚Äôs something magical about peeking behind the curtain and learning how the pros do their thing.</p>

<p>Today I‚Äôm reviewing <a href="https://basecamp.com/shapeup">Shape Up</a>, a book about the process of writing software at Basecamp.</p>

<!--more-->


<p><a href="https://basecamp.com/shapeup"><img class="center" src="/images/posts/2019-09-29/shapeUpCover.png" width="700" title="‚ÄòBook cover‚Äô" ></a></p>

<p>(<em>I promise those potato shapes ‚òùÔ∏è will make sense by the time you finish the book</em>)</p>

<h1>What is it?</h1>

<p>Shape Up is a book by¬†<a href="https://twitter.com/rjs">Ryan Singer</a> about how <a href="https://basecamp.com/about">Basecamp</a> (the company) writes <a href="https://basecamp.com/">Basecamp</a> (the app). It goes through the development process, from the moment a new idea comes up, ‚Äòtill it shows up in production as a fully implemented feature.</p>

<h1>Why does it matter?</h1>

<p><strong>Because it‚Äôs fresh!</strong> This is not your run-of-the-mill <em>‚ÄúHow we do Agile‚Äù</em> kind of book. There are no Kickoff meetings, no Kanban boards, no Daily Standup. They don‚Äôt even keep a backlog!</p>

<p>Coming from the people that wrote <a href="https://basecamp.com/books/remote">Remote</a> and <a href="https://basecamp.com/books/calm">It doesn‚Äôt have to be crazy at work</a>, you know this is a company that‚Äôs not afraid to innovate.</p>

<p><blockquote><p>Now that our process is fully formed, documented, and ready to go, we‚Äôre here to share it with all those curious enough to listen to a new way of doing things. Explorers, pioneers, those who don‚Äôt care what everyone else is doing. Those who want to work better than the rest.</p><footer><strong>Jason Fried</strong> <cite>Basecamp CEO</cite></footer></blockquote></p>

<p>Also, it doesn‚Äôt hurt that it is short, well-written, and has real-life examples and stick-figure drawings. <strong>Oh! and it‚Äôs free!! üí∏</strong></p>

<h1>So, what did you learn?</h1>

<p>A bunch of things! I‚Äôm not going to cover everything because I wouldn‚Äôt be able to do it justice. Instead, I‚Äôll focus on a couple of nuggets of wisdom. If you find them interesting, go check the book! Getting a better sense of how the whole process is structured shines a new light on the bits you‚Äôll find described here.</p>

<h2>The shape of your task</h2>

<p>A big part of the book is about what happens before the developer starts coding. It is about choosing and defining what‚Äôs going to be built. This is what Basecamp calls <a href="https://basecamp.com/shapeup/1.1-chapter-02"><em>‚ÄùShaping‚Äù</em></a>, and it is so integral to their process that it‚Äôs right there on the book‚Äôs title. I found this refreshing since, more often than not, books will focus on the execution of tasks instead of how to come up with them.</p>

<p>Basecamp uses cycles of six weeks.  While the developers are busy delivering features, a group of senior staff members<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> works on defining what‚Äôs going to come next. If the project is approved (more on this later), a team of developers will use this spec to make it happen on the next cycle.</p>

<p>The key to Shaping is that it has to happen at <strong>the proper level of abstraction</strong>. Go too abstract, and the dev team might end up building the wrong thing. Go too concrete, and they have no wiggle room to work around a technical pitfall or revise a design choice.</p>

<p><img class="right" src="/images/posts/2019-09-29/knob.png" width="400" title="‚ÄòAbstraction knob‚Äô" ></p>

<p>For example, they‚Äôd use fat marker drawings instead of wireframes, to avoid delving too deep into the UI design details.</p>

<p>You want to end up with a good definition of the problem and a rough sketch of the solution. A clear sense of what‚Äôs part of the solution and what‚Äôs out of scope. A set of elements and how they connect to each other, but no comprehensive list of tasks or high-res mockups. Those things will come later when the dev team takes over and starts exploring the solution.</p>

<p><img class="left" src="/images/posts/2019-09-29/fatMarker.png" width="150" title="‚ÄòFat marker sketch‚Äô" ></p>

<p>Only once shaping is complete, they‚Äôd take it to the <a href="https://basecamp.com/shapeup/2.2-chapter-08#the-betting-table"><em>‚Äúbetting table‚Äú</em></a> where they decide if this is something they want to bet the next six weeks on. If the pitch is , it goes into the next cycle. If it‚Äôs not, then nothing happens. There‚Äôs no centralized backlog or list of rejected ideas. If somebody considers it important or thinks that a better solution can be found, they‚Äôll lobby for it again six weeks later.</p>

<h2>Evaluating new ideas and user requests</h2>

<p>Every single new idea and feature request gets the same answer:</p>

<p><img class="center" src="/images/posts/2019-09-29/interesting.png" width="400" title="‚ÄòInteresting! Maybe some time‚Äô" ></p>

<p>Basecamp believes an idea needs to go through the shaping process detailed above before they‚Äôre ready to bet on it.  When a new request comes in, they‚Äôd first try to identify what‚Äôs the user need (which sometimes might be quite different from what the user is asking for). Then, they see how they can solve the requirement with a minimal amount of effort. They acknowledge there‚Äôs always a better, more complete solution if you have infinite time at your disposal. The trick here is to find a good solution that works under the given constraints (in their case, that it can be built by a small team of engineers and designers in no more than six weeks)</p>

<p>If they‚Äôre not able to narrow down the problem and it‚Äôs not critical, they simply let it rest and wait to see if the same problem shows up again, so they can get a better sense of what they‚Äôre solving for. <strong>Grab-bags such as: ‚ÄúRedesign profile page‚Äù or ‚ÄúRefactor engine‚Äù are a no-go</strong>. The scope has to be well-defined before they‚Äôre ready to bet on an idea.</p>

<h2>Showing progress</h2>

<p>This is how we track progress in our industry:</p>

<p><img class="center" src="/images/posts/2019-09-29/scrum.jpg" width="700" title="‚ÄòWall full of post-it notes‚Äô" ></p>

<p>The problem with this approach is that it only works if all required tasks are known up-front. And let‚Äôs face, 99% of the time, that‚Äôs not the case. Most of the time, you‚Äôd start coding the first task only to discover that a new component needs to be added, and you‚Äôll have to fix a few connections this change will introduce.</p>

<p>The book acknowledges this exploration phase as an inherent part of the developers' work. It makes the distinction between 2 different types of tasks:</p>

<ul>
<li><strong>Imagined tasks</strong>: Those thought about before you start coding</li>
<li><strong>Discovered tasks</strong>: Those you discover as you go.</li>
</ul>


<p>The tool they came up with to communicate progress are <a href="https://basecamp.com/features/hill-charts">Hill Charts</a>, and they look like this:</p>

<p><img class="center" src="/images/posts/2019-09-29/hillChart1.png" width="600" title="‚ÄòHill Chart‚Äô" ></p>

<p>As you can tell, it‚Äôs not (only) a function of pending tasks, but also of confidence in that all remaining tasks have been discovered.</p>

<p><img class="center" src="/images/posts/2019-09-29/hillChart2.png" width="600" title="‚ÄòHill Chart 2‚Äô" ></p>

<p>A good way of gaining confidence at the start of a project is to begin with the pieces that present the most uncertainty, and move them to the top of the hill first. Doing this before finishing the downhill stuff reduces the chances the project will be late.</p>

<hr />

<p>That‚Äôs all‚Ä¶</p>

<p>If you enjoyed the review, you‚Äôll love the book. <a href="https://basecamp.com/shapeup">Go check it out!!</a></p>

<p> <img class="right-fill" src="/images/signatures/signature5.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Not sure why they‚Äôre not referred to as PMs in the book<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: The Advantage]]></title>
    <link href="http://jivimberg.io/blog/2019/08/11/book-recommendations-the-advantage/"/>
    <updated>2019-08-11T20:09:32-07:00</updated>
    <id>http://jivimberg.io/blog/2019/08/11/book-recommendations-the-advantage</id>
    <content type="html"><![CDATA[<p>Today I‚Äôm reviewing <a href="https://read.amazon.com/kp/embed?asin=B006ORWT3Y&amp;preview=newtab&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_CFpuDbJQRH32R">The Advantage</a> by <a href="https://twitter.com/patricklencioni">Patrick Lencioni</a>. A book written for leaders looking to build a healthy organization.</p>

<!--more-->




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%"  src="https://read.amazon.com/kp/card?asin=B006ORWT3Y&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_CFpuDbJQRH32R" ></iframe>


<h1>Intro</h1>

<p>The book opens explaining why organizational health is so important. This is <em>The Advantage</em> referenced by the title. If you&rsquo;re not sold on the idea that culture is a big business advantage by the end of the chapter, you&rsquo;re probably better off reading something else‚Ä¶</p>

<h1>The 6 questions</h1>

<p>Next, the author goes on to describe <em>The Four Disciplines Model</em> ‚Ñ¢. In a nutshell:</p>

<h2>1. Build a Cohesive Leadership Team</h2>

<p>Keep the team small. Make sure every leader understands that playing for the leadership team is more important than favoring their specific departments. Foster conflict, but achieve commitment (<a href="https://en.wikipedia.org/wiki/Disagree_and_commit">&ldquo;Disagree and commit&rdquo;</a>). Once you reach commitment, keep people accountable. Finally, <strong>embrace feedback</strong>, you have to be willing to be vulnerable with your team-mates. It is ok to admit when you fuck up<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h2>2. Create Clarity</h2>

<p>Once you have a good leadership team, make sure you&rsquo;re aligned on the important topics. To achieve this, the leadership team should answer 6 questions:</p>

<ol>
<li>Why do we exist?</li>
<li>How do we behave?</li>
<li>What do we do?</li>
<li>How will we succeed?</li>
<li>What is most important, right now?</li>
<li>Who must do what?</li>
</ol>


<p>The answers to these questions will become the kernel of every decision taken. So, don&rsquo;t fall for generic marketing üí©. Be really specific on what your key differentiator is, and drop everything else. If you&rsquo;re not willing to center all your business in, say, <em>customer satisfaction</em> just don&rsquo;t mention it.</p>

<p><img class="center" src="/images/posts/2019-08-11/dunder-mifflin.jpg" title="‚ÄòDunder Mifflin mission statement‚Äô" ></p>

<p>Bottomline, if your answers sound like <a href="https://dundermifflinpaper.com/">Dunder Mifflin</a>&rsquo;s mission statement you&rsquo;re doing it wrong.</p>

<p>As soon as there&rsquo;s agreement and commitment on these answers the leadership team needs to communicate them to the rest of the organization.</p>

<h2>3. Over-communicate Clarity</h2>

<p>The book advocates for 2 communication strategies:</p>

<ul>
<li>Cascading communication: <strong>the same message</strong> should be relayed down the ranks, organically. That is, don&rsquo;t just learn a script and repeat it like a robot, understand the message and pass it through face to face. Give people the chance to ask questions to clarify meaning.</li>
<li>Over-communication: <strong>Repeat</strong> the message until it sticks. Say it again, and again, and again&hellip; Only after hearing the same thing from multiple source people will believe it.</li>
</ul>


<h2>4. Reinforce clarity</h2>

<p>Finally, make sure <strong>all</strong> actions are aligned with the answers agreed upon by the leadership team. Actions speak louder than words. Lead by example.</p>

<p>All company processes should reinforce these values. When hiring don&rsquo;t just look for technical ability, check for cultural fit first. The first few days of a new hire in the company are key to instruct new employees on the company values. Don&rsquo;t waste them with trivial stuff like setting up the email account, they&rsquo;ll have time for that. Similarly, every benefit, promotion and reward should be designed to remind employees what&rsquo;s important.</p>

<h1>Meetings</h1>

<p>The last part of the book focuses on how to have meaningful meetings. It proposes a framework of 4 different type of meetings:</p>

<ul>
<li><strong>Daily checkins:</strong> aka <a href="https://en.wikipedia.org/wiki/Stand-up_meeting">Standup Meetings</a>.</li>
<li><strong>Weekly staff meetings:</strong> in which the author proposes setting no agenda beforehand and instead using the first 15 minutes to align on what topics should be discussed.</li>
<li><strong>Adhoc topical meetings:</strong>  2 to 4 hours meetings focused on a single topic.</li>
<li><strong>Quarterly off-site</strong> 1 or 2 days offsite to revisit and reiterate on the 6 questions.</li>
</ul>


<p>To be honest I didn&rsquo;t find much <em>new</em> knowledge on the meetings topic. But maybe that&rsquo;s only because I was familiar with the author&rsquo;s book on the subject: <a href="https://www.amazon.com/Death-Meeting-Leadership-Solving-Business/dp/0787968056">Death by meetings</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature11.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>More on this in <a href="https://jivimberg.io/blog/2018/09/30/book-recommendations-radical-candor/">Radical Candor</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Radical Candor]]></title>
    <link href="http://jivimberg.io/blog/2018/09/30/book-recommendations-radical-candor/"/>
    <updated>2018-09-30T11:28:59-07:00</updated>
    <id>http://jivimberg.io/blog/2018/09/30/book-recommendations-radical-candor</id>
    <content type="html"><![CDATA[<p>Last week I finished <a href="https://www.amazon.com/Radical-Candor-Kim-Scott/dp/B01MY574EE/ref=sr_1_1?ie=UTF8&amp;qid=1538332470&amp;sr=8-1&amp;keywords=radical+candor">Radical Candor</a> a book by <a href="https://www.kimmalonescott.com/">Kim Scott</a> about <em>how to be a good boss without being an asshole</em>. Here‚Äôs what I learned.</p>

<!--more-->




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%" src="https://read.amazon.com/kp/card?asin=B01KTIEFEE&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_IcxSBbZDBE91M" ></iframe>


<h1>1.  Be honest. Specially when it‚Äôs hard</h1>

<p><blockquote><p></p></p><p><p>‚ÄúFrom the time we learn to speak, we‚Äôre told that if you don‚Äôt have anything nice to say, don‚Äôt say anything at all. When you become a manager, it‚Äôs your job to say it&ndash;and your obligation.‚Äù</p></p><p><p></p><footer><strong>Kim Scott</strong> <cite>Radical Candor</cite></footer></blockquote></p>

<p>If somebody‚Äôs work is subpar and you let it pass and pretend is good, <strong>you‚Äôre doing everybody a disservice</strong>. You‚Äôre hurting the team because either you or somebody else, will have to cover up for the guy and redo the work. And at the same time you‚Äôre setting a precedent that it is OK to deliver poor work.</p>

<p>But even more importantly <strong>you‚Äôre not giving that person the chance to improve by pointing out what he/she needs to work on!</strong> So if you care about your team, speak up! Be <em>honest</em>, be <em>direct</em> and be <em>specific</em>.</p>

<h1>2. How to be direct without being a dick</h1>

<p>Kim‚Äôs advise is to <em>care personally‚Ñ¢</em>, which to me means: <strong>care for the other person, but seriously</strong>.</p>

<p>It‚Äôs not enough to remember you employees partner‚Äôs name, or to ask about his hobbies every now and then. To make radical candor work you have to build and actual relationship with your direct reports. Get to know them. <strong>Understand where they come from and what drives them</strong>.</p>

<p>So, how to put this in practice? The book has a ton of useful <strong>tips on how to criticize without discouraging</strong>. For example:</p>

<ol>
<li><strong>Start by asking for feedback before giving it</strong>. Show that you‚Äôre open to criticism and make sure you reward people that takes the time and effort to correct you. This is the only way you can build of culture of radical candor.</li>
<li><strong>Don‚Äôt make it personal</strong>. When pointing out things that can be improved make it clear that it‚Äôs not about the person but about the work done. Be specific! And present it as an opportunity for improvement and <em>offering help and guidance to fix the problem</em>.</li>
</ol>


<h1>3. Not everybody is looking for  a promotion</h1>

<p>This one is about how we value and judge ambition. As the book points out <strong>not everybody on your team is eager to jump to a new position or wants to be a manager</strong>. You‚Äôll probably have some team members that are content with their current position and, for whatever reason, are not looking for a change. And that‚Äôs ok!</p>

<p>The book calls this people <em>‚ÄùRockstars‚Äù</em> because they are the rock that brings stability to the team. An uses the term <em>‚ÄúSuperstars‚Äù</em> for the more ambitious kind that are looking for new opportunities to shine. I think the names are stupid. But what‚Äôs not stupid is the realization that <strong>you need both kinds of people in your team</strong>.</p>

<p>If your team is only composed of <em>‚ÄùSuperstars‚Äù</em> then if they succeed (and it‚Äôs your job to help them succeed!) then you‚Äôll end up without team because everybody has moved to a new thing. On the other hand if your team is all <em>‚ÄúRockstars‚Äù</em> then you run the risk of stagnation as you‚Äôll lack your main agents of innovation. You‚Äôll need to get the right mix of <em>‚ÄúRockstars‚Äù</em> and <em>‚ÄúSuperstars‚Äù</em> for your team to be successful.</p>

<p>It‚Äôs worth pointing out that <strong>this ‚Äúlabels‚Äù are not permanent</strong>. People will move between the two kinds based on their priorities, values and things on their personal life. And it‚Äôs your job as manager to figure out what each team member is aiming for, and help them get there.</p>

<p>Remember that promotions are just one way of recognizing people‚Äôs work, and it might not be the best reward for everybody.</p>

<h1>4. On culture</h1>

<p>I found quite interesting the observation that, when left unchecked, <strong>the team‚Äôs culture tends to reflect it‚Äôs leaders strengths and short-comings</strong>. Kim explains  how every action, big or small, has an impact on the team culture. So for example, if you‚Äôre working on improving the product quality and attention to detail you shouldn‚Äôt send emails with spelling mistakes. <strong>You have to lead by example and inspire people to follow</strong>.</p>

<p>The only way of creating a long-lasting culture is by inspiring people and letting them contribute with their own ideas.</p>

<hr />

<p>I‚Äôm just scratching the surface here. The book expands on the mentioned topics with good real-world examples. The second portion of the book focuses on the details on how to put the theory in practice. It covers from things like <em>how to schedule and conduct your one-on-ones</em> to <em>hiring techniques to avoid biases</em>. <strong>So go read it!</strong> I‚Äôm sure you‚Äôll find something useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Migrating to Cloud-Native Application Architectures]]></title>
    <link href="http://jivimberg.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures/"/>
    <updated>2018-07-24T16:18:45-07:00</updated>
    <id>http://jivimberg.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures</id>
    <content type="html"><![CDATA[<p>Complementing <a href="https://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/">my last book recommendation</a> on <em>¬†Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a> now I present <a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><em>Migrating to Cloud-Native Application Architectures</em></a> by <a href="@mstine">Matt Stine</a>.</p>

<!--more-->


<p><a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><img class="center" src="/images/posts/2018-07-28/cover.jpg" title="‚ÄôMigrating to Cloud-Native Application book cover‚Äô" ></a></p>

<p>I‚Äôm really digging this O‚ÄôReilly booklet style! They <strong>condense a good overview of a specific topic in one-sitting books</strong>. While at the same time provide enough links and resources to keep you digging for a few afternoons if interested.</p>

<p>Matt‚Äôs book is divided in 3 parts. The first bit <strong>‚ÄùThe rise of cloud service‚Äù</strong> serves as an introduction to the topic. It defines <em>cloud native architectures¬†</em> key characteristics and <strong>why you might consider using one</strong>.  If you are already familiar with the subject you may want to skim through this first section.</p>

<p>The second part is the one I enjoyed the most. It talks about <strong>the changes needed to go cloud native</strong>. It covers areas that are sometimes forgotten or considered as an afterthought such as <em>team collaboration</em>, <em>organizational changes</em> (the <a href="https://www.thoughtworks.com/radar/techniques/inverse-conway-maneuver">Inverse Conway Maneuver</a>) and the <em>decentralization of decision making</em>. The rest of the chapter touches on the <strong>technical challenges</strong> required. It was really nice to see a bit on how to <strong>use <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> to identify service boundaries</strong> when decomposing data models.</p>

<p>On the last chapter, called <strong>Migration Cookbook</strong>, Matt explores different strategies for decomposing the monolith (such as <em>‚Äùstrangling the monolith‚Äù</em>, <em>‚Äùnew features as Micro-services‚Äù</em>, <em>‚Äùanti-corruption layer‚Äù</em>, etc.) and provides links to articles by companies that applied this strategies on their own systems. The book finishes with a section called <strong>Distributed system recipes</strong>  where some of the more common <em>‚Äúchallenges‚Äù</em> of a cloud-native architecture are explored and particular solutions are presented using <a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a> and <a href="https://netflix.github.io/">Netflix OSS</a>. Here you‚Äôll find things like <em>service discovery</em>, <em>versioned configuration</em>, <em>load balancing</em>, etc. Each topic is presented with a brief description of the problem, a mention of the Netflix OSS solution (and it‚Äôs features) and a code snippet showing how to integrate it with Spring.</p>

<h2>Bottom line</h2>

<p><strong>GO READ IT!</strong> It won‚Äôt take you more than an afternoon and chances are you‚Äôll learn something new. You‚Äôll walk away with <strong>a better understanding of the cloud-native landscape.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recomendations: Migrating to Microservices Databases]]></title>
    <link href="http://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/"/>
    <updated>2018-05-25T07:32:00-07:00</updated>
    <id>http://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases</id>
    <content type="html"><![CDATA[<p>Just finished reading <em>¬†Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a>. If you can relate to the 3 nouns in the title then you‚Äôll want to check it out.</p>

<!--more-->


<blockquote><p>Code is easy; state is hard.</p>

<p>‚Äî <em>Edson Yanaga</em></p></blockquote>

<p>If you are on the journey of <strong>migrating your monolith to a micro-service architecture</strong> (like every other developer this days) then, at some point, you probably found yourself staring at a whiteboard full of rectangles and hexagons thinking: <em>where does the data fit in this mess?</em></p>

<p>Maybe you‚Äôve read about the <a href="http://microservices.io/patterns/data/database-per-service.html">‚ÄúDatabase per service‚Äù</a> pattern and now you‚Äôre wondering what your requirements are on <a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">data consistency</a>. Or somebody told you about <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> but you don‚Äôt know it‚Äôs advantages and disadvantages.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="/images/posts/2018-05-26/MigratingToMicroservicesDatabases.png" title="‚ÄôMigrating to Micro-services databases book cover‚Äô" ></a></p>

<p>Edson‚Äôs book opens with a brief recap of the micro-service world. Going from <em>‚ÄúWhy microservices‚Äù</em> to <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a> and <a href="https://martinfowler.com/bliki/CanaryRelease.html">Canary deployment</a>, the book provides a <strong>super-quick explanation of each concept without going into many details.</strong></p>

<p>By contrast the second part of the book deeps dive into <strong>how to handle the data</strong> of your micro-services. <em>Chapter 3</em> explains how to do <strong>Zero downtime migration</strong> of your relational DB and which tools to use.</p>

<p>On <em>Chapter 4</em> Edson introduces the different <strong>consistency models</strong> and compares <strong>CRUD Vs. CQRS</strong> (explaining also <em>Event sourcing</em>)</p>

<p><strong>The last chapter is, to me, the best.</strong> <em>Chapter 5</em>  contains a recount and description of some of the different <strong>Integration Strategies</strong> we might want to consider when <em>migrating the monolith</em>. Each strategy is briefly described, and we are also provided with an assessment of <strong>applicability</strong> and section of <strong>considerations</strong> to keep in mind if using this strategy.</p>

<h2>Conclusion</h2>

<p>The hardest part of design is not knowing the architectural patterns or the different techniques to solve a problem, but <strong>knowing which solution is a good fit to which problem.</strong> Yanaga‚Äôs book serves as a good <strong>catalog of possible solutions</strong> to consider, when working with data on micro-services. It provides a concise analysis of each <strong>strategy</strong> and helps us avoid those  <em>‚ÄùI wish I‚Äôve thought this better before writing the code‚Äù</em> moments.</p>
]]></content>
  </entry>
  
</feed>
