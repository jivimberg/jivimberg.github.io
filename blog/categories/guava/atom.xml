<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Guava | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/guava/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2020-02-02T20:28:07-08:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep Trying With Guava Retrying]]></title>
    <link href="http://jivimberg.github.io/blog/2014/07/17/keep-trying-with-guava-retrying/"/>
    <updated>2014-07-17T14:22:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/07/17/keep-trying-with-guava-retrying</id>
    <content type="html"><![CDATA[<p>We were having a <a href="http://en.wikipedia.org/wiki/Race_condition#Software">race condition</a> on a server which was &ldquo;fixed&rdquo; by adding an sleep to the thread to check again later. Yes, it sucked, so I decided to make something more sophisticated and went looking for a library to handle retryies with multiple strategies. That&rsquo;s when I first read about <a href="https://github.com/rholder/guava-retrying">Guava Retrying</a></p>

<!--more-->


<p>In the words of it&rsquo;s creator (<a href="https://github.com/rholder">rholder</a>):</p>

<blockquote><p>Guava-Retrying is a small extension to Google&rsquo;s Guava library to allow for the creation of configurable retrying strategies for an arbitrary function call, such as something that talks to a remote service with flaky uptime.</p></blockquote>

<p>Simply put give it a taks and it will retry it until success&hellip; or until a given condition is met, or after X attempts, or until it does not throw exception, or&hellip; well you get the point: <strong>flexibility</strong>.</p>

<h3>Quick example</h3>

<p>Let&rsquo;s say we want to execute a task that will:
* Retry if the result is null
* Retry if an exception of type IOException is thrown
* Wait 300 miliseconds to try again.
* Stop after 5 attempts</p>

<p>Then we would do something like:</p>

<pre><code class="java">Callable&lt;Boolean&gt; yourTask = new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
        return true; // do something interesting here
    }
};

Retryer&lt;Boolean&gt; retryer = RetryerBuilder.&lt;Boolean&gt;newBuilder()
        .retryIfResult(Predicates.&lt;Boolean&gt;isNull())
        .retryIfExceptionOfType(IOException.class)
        .withWaitStrategy(WaitStrategies.fixedWait(300,                                                                             TimeUnit.MILLISECONDS))
        .withStopStrategy(StopStrategies.stopAfterAttempt(5))
        .build();

try {
    retryer.call(yourTask);
} catch (RetryException e) {
    e.printStackTrace();
} catch (ExecutionException e) {
    e.printStackTrace();
}
</code></pre>

<p>After attempting 5 times it will throw a <code>RetryException</code> with information about the last attempt. Any other exception thrown by your task will be wrapped and rethrown in a <code>ExecutionException</code></p>

<p>Other <strong>wait strategies</strong> supported: Random backoff, Incremental backoff, Exponential backoff, Fibonacci backoff</p>

<p>Other <strong>stop strategies</strong> supported: never stop, stop after delay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava - Fun With Comparisons]]></title>
    <link href="http://jivimberg.github.io/blog/2014/03/28/guava-fun-with-comparisons/"/>
    <updated>2014-03-28T17:26:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/03/28/guava-fun-with-comparisons</id>
    <content type="html"><![CDATA[<p>Implementing <code>compare()</code> and <code>compareTo()</code> methods was never fun. Luckily <a href="https://code.google.com/p/guava-libraries/">Guava</a> provides an utility that makes comparison methods easier to write and more pleasing to the eye.</p>

<!--more-->


<p>So let&rsquo;s say we have the class <code>Person</code>:</p>

<pre><code class="java">private class Person {
        private String name;
        private int zipCode;
        private Age age;
}

private enum Age { YOUNG, OLD }
</code></pre>

<p>And we want to sort it by name, then by zipcode and finally, if they are still matched, by age (having <code>Age.YOUNG</code> first) but making <code>null</code> values greater than non <code>null</code> values.</p>

<p>Such comparator could look something like this:</p>

<pre><code class="java">public class VerboseComparator
            implements Comparator&lt;Person&gt;
    {

        @Override
        public int compare(Person o1, Person o2) {
            int cmp = o1.name.compareTo(o2.name);
            if (cmp != 0) {
                return cmp;
            }

            cmp = Integer.compare(o1.zipCode, o2.zipCode);
            if (cmp != 0) {
                return cmp;
            }

            if(o1.age == null &amp;&amp; o2.age != null){
                return -1;
            } else if (o1.age != null &amp;&amp; o2.age == null) {
                return 1;
            } else if (o1.age == null &amp;&amp; o2.age == null) {
                return 0;
            } else {
                return o1.age.compareTo(o2.age);
            }
        }
    }
</code></pre>

<p>Yeah I know, it&rsquo;s hard to read, prone to errors and it has a way too many if statements.</p>

<p>But <em>Don&rsquo;t Panic!</em> with Guava we can write this same comparator like this:</p>

<pre><code class="java">private static class GuavaComparator
            implements Comparator&lt;Person&gt;
    {

        @Override
        public int compare(Person o1, Person o2) {
            return ComparisonChain.start()
                    .compare(o1.name, o2.name)
                    .compare(o1.zipCode, o2.zipCode)
                    .compare(o1.age, o2.age, Ordering.natural().nullsFirst())
                    .result();
        }
    }
</code></pre>

<p>That looks way better and it&rsquo;s easier to understand.</p>

<p>Furthermore ComparisonChain stops calling the next <code>compare()</code> method as soon as one returns a value different than 0. So if you have an expensive calculation for comparison to untide similar objects you can rest assured it will only be called when absolutely necessary.</p>

<p>If you find this useful you&rsquo;ll probably want to check out other <a href="https://code.google.com/p/guava-libraries/wiki/OrderingExplained">guava&rsquo;s Ordering Utilities</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava - Using and Avoiding Null]]></title>
    <link href="http://jivimberg.github.io/blog/2014/03/19/guava-using-and-avoiding-null/"/>
    <updated>2014-03-19T00:34:41-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/03/19/guava-using-and-avoiding-null</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting a series of posts on <a href="https://code.google.com/p/guava-libraries/">Guava</a> (Google&rsquo;s core libraries). Today I am going to start with <strong>null</strong>, how to use it, and how to avoid it when necessary.</p>

<!--more-->


<blockquote><p><strong>&ldquo;I call it my billion-dollar mistake.&rdquo;</strong><br/>
Sir C. A. R. Hoare, on his invention of the null reference</p></blockquote>

<h3>Null in Guava Collections</h3>

<p>How many times have you expected null values on your collections? And how many times have you <em>actually</em> check to prevent null values on them?</p>

<p>That&rsquo;s why most of Guava &ldquo;New Collections&rdquo; and utilities will fail fast with a NPE when you try to add null to them. And they provide the <strong>Optional</strong> utilty for those cases where we need to indicate absence of some kind, without using null.</p>

<pre><code class="java">//This will fail with java.lang.NullPointerException: at index 2
ImmutableList.of("one", "two", null);
</code></pre>

<h3>Optional</h3>

<p>Optional is a way of representing a reference which may be present or not. The whole point of using Optional instead of null, is that there is no way the client can miss the case where the reference is absent. It forces him to actively unwrap the value or else the program won&rsquo;t compile.</p>

<p>Here is how you create an optional:</p>

<pre><code class="java">Optional&lt;String&gt; creatingAnOptional(){
        Optional&lt;String&gt; result;

        String value = findString(); //may return null
        result = Optional.fromNullable(value);

        // which is the same as doing:
        if(value != null){
            result = Optional.of(value);
        } else {
            result = Optional.absent();
        }

        return result;
    }
</code></pre>

<p>And here is how you query for the value:</p>

<pre><code class="java">void queryingOptionals(){
        Optional&lt;String&gt; optional = creatingAnOptional();

        if(optional.isPresent()){
            String value = optional.get(); //We are sure is the value is there
            System.out.println("The string is: " + value);
        }

        //or
        System.out.println("Value or default: " + optional.or("Default value"));
    }
</code></pre>

<p>The next time you are writing a method that return a values which may or may not be present, remember to use Optional. It will make your API much clearer and force the caller to consider the absent value case.</p>
]]></content>
  </entry>
  
</feed>
