<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effective-testing-series | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/effective-testing-series/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2021-03-14T21:13:50-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Show What's Important, Hide the Rest]]></title>
    <link href="http://jivimberg.github.io/blog/2020/09/07/effective-testing-show-whats-important-hide-the-rest/"/>
    <updated>2020-09-07T18:05:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/09/07/effective-testing-show-whats-important-hide-the-rest</id>
    <content type="html"><![CDATA[<p>What we include in a test is as important as what we leave out. Having the right amount of information helps us understand what the test is doing at a glance.</p>

<!--more-->


<p>Let&rsquo;s say we need to check our Restaurants are behaving correctly. We want to validate two things:</p>

<ol>
<li>That a restaurants can only cook a <code>Recipe</code> if they have all the necessary ingredients.</li>
<li>That vegan restaurants do not serve non-vegan food</li>
</ol>


<p><img class="center" src="/images/posts/2020-09-07/restaurantTestsBefore.png" width="700" title="‘Repetitive tests’" ></p>

<p>This works fine, but writing a new <code>Recipe</code> for every single test gets repetitive pretty fast. More importantly, most lines of the test are spent creating the <code>Recipe</code> object. By having to spell out every single property, we lose track of what’s important for each specific test.</p>

<p>Luckily, we can use <a href="https://kotlinlang.org/docs/reference/functions.html#default-arguments">Kotlin default arguments</a> to make the tests better. We could introduce default values directly on the <code>Recipe</code> class, but that would mean we’d have to pick sensible defaults for Recipes in production. We probably don’t want to allow for this flexibility, as we want to force users to specify those properties for each recipe defined. Instead, we will write a <a href="https://phauer.com/2018/best-practices-unit-testing-kotlin/#use-helper-functions-with-default-arguments-to-ease-object-creation"><em>helper function</em></a> with default arguments to handle the <code>Recipe</code> creation. We’ll make it <code>private</code> so that it’s only accessible in the test class.</p>

<p><img class="center" src="/images/posts/2020-09-07/helperFunction.png" width="700" title="‘Helper function’" ></p>

<p>Now we can re-write our tests to make use of the helper function:</p>

<p><img class="center" src="/images/posts/2020-09-07/restaurantTestsAfter.png" width="700" title="‘Improved tests’" ></p>

<p>On each test, we only specify the property that the test cares about and leave out all the other ones. This way, somebody glancing at the test can immediately identify what we’re checking, and it’s not distracted by the details on how to create a <code>Recipe</code> object.</p>

<p>Note that this is a simplified example. In real life, the object being created could have multiple nested objects and require many steps to be initialized. All that code would be hidden in our helper function instead of bloating every test.</p>

<p>We could have written the test for vegan recipes without specifying any property, and it would still pass.</p>

<p><img class="center" src="/images/posts/2020-09-07/notExplicit.png" width="700" title="‘Not explicit enough tests’" ></p>

<p>By default <code>isVegan</code> is true, so we&rsquo;re not required to define it. However, <strong>we opted for explicitly specifying it in the test</strong>, just so that somebody reading the test would know that the value of <code>isVegan</code>  is important for this test. As an extra benefit, the test will not break if, in the future, somebody decides to change the default value for <code>isVegan</code>.</p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature10.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Reducing Non-determinism to Avoid Flaky Tests]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/27/effective-testing-reducing-non-determinism/"/>
    <updated>2020-07-27T22:00:54-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/27/effective-testing-reducing-non-determinism</id>
    <content type="html"><![CDATA[<p>Flaky tests are those that randomly fail for no apparent reason. If you have a flaky test, you might re-run it, over and over, until it succeeds. If you have a <em>couple</em> of them, the chances of all passing at the same time are slim, so maybe you ignore the failures. You know, just this one time… Soon enough, you’re not paying attention to failures on this test suite. Congratulations! Your tests are now worthless.</p>

<!--more-->


<h2>Prefer smaller tests</h2>

<p>Non-determinism is often introduced as a consequence of relying on external services. For example, let’s say our test needs to read data from a database, the test might fail if the database is down, or the data is not present, or has changed.</p>

<p>You&rsquo;ve probably seen the <a href="https://martinfowler.com/bliki/TestPyramid.html">Test Pyramid</a> before. Tests are classified by scope, and the recommendation is to favor tests with reduced scopes (i.e. Unit Tests).</p>

<p><img class="center" src="/images/posts/2020-07-31/TestingPyramid.jpg" width="700" title="‘Using data classes for assertions’" ></p>

<p>At Google they came up with a new dimension: <em>Test Size</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Tests are grouped in categories <strong>based on the resources a test needs to run</strong> (memory, processes, time, etc.).</p>

<ul>
<li><strong>X-Small</strong> tests are limited to a single thread or coroutine. They are not allowed to sleep, do I/O operations, or make network calls.</li>
<li><strong>Small</strong> tests run on a single process. All other X-Small restrictions still apply.</li>
<li><strong>Medium</strong> tests are confined to a single machine. Can’t make network calls to anywhere other than <code>localhost</code>.</li>
<li><strong>Large</strong> tests can span multiple machines. They&rsquo;re allowed to do everything.</li>
</ul>


<p><em>Scope</em> and <em>Size</em> are related, but independent. You could have an end-to-end test of a CLI tool that runs in a single process.</p>

<p>How does this tie back to our crusade against flaky tests? Simple, <strong>the smaller the test, the more deterministic it’ll be.</strong> As a bonus perk, they also tend to be faster.</p>

<p><img class="center" src="/images/posts/2020-07-31/TestSizes.jpg" width="700" title="‘Test sizes’" ></p>

<p>Google went the extra mile and built infrastructure to enforce these constraints. For example, a test marked as <em>Small</em> would fail if it tried to do I/O.</p>

<h2>How to make your test small</h2>

<p>Some ways you can reduce the size of your test:</p>

<ol>
<li>Use <a href="https://martinfowler.com/bliki/TestDouble.html">Test Doubles</a> to avoid making calls to external services.</li>
<li>Use an <a href="https://www.baeldung.com/spring-boot-h2-database">in-memory Database</a>.</li>
<li>Use an <a href="https://github.com/google/jimfs">in-memory filesystem</a>.</li>
<li>Design your classes so that <a href="https://github.com/google/guava/wiki/CachesExplained#testing-timed-eviction">test can provide a custom time source</a> instead of relying on the system clock.</li>
<li>Use <a href="https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test">kotlinx-coroutines-test</a> to virtually advance time without having to make your test wait.</li>
<li>Use <a href="https://www.testcontainers.org/">Testcontainers</a> to turn a <em>Large</em> test into a <em>Medium</em> one.</li>
</ol>


<h2>The trade-off</h2>

<p>The downside of artificially isolating your tests is that they lose <em>Fidelity</em>. Meaning, what you end up testing is further away from what will run in production. <a href="https://jivimberg.io/blog/2018/06/23/oracle-jpa-and-the-mistery-of-the-string-that-was-null/">I’ve been bitten by this in the past</a>.</p>

<p>The trick is to have a test distribution similar to the one proposed by the Test Pyramid. We should have lots of <em>Small</em> and <em>X-Small</em> tests, some <em>Medium</em> tests, and only a few <em>Large</em> tests.</p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature2.png" width="200" title="‘My signature’" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>The name is unfortunate as it’s not immediately obvious what Size refers to.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Expressive Assertions]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions/"/>
    <updated>2020-07-18T11:58:34-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions</id>
    <content type="html"><![CDATA[<p>Using expressive assertions can help us figure out why a test fails without having to go through the code.</p>

<!--more-->


<p>Let&rsquo;s start with an example. Here&rsquo;s a test making sure our recipe has tomatoes 🍅</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertion.png" width="700" title="‘A test with a non-descriptive assertion’" ></p>

<p>At first glance, everything looks ok. The test passes, it is easy to read, and it follows <a href="https://jivimberg.io/blog/2020/07/10/effective-testing-test-structure/">the <em>”Given - When - Then”</em>  structure</a>.</p>

<p>Some months go by, and one day our test starts failing.</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertionOutput.png" width="700" title="‘The output of a test with a non-descriptive assertion’" ></p>

<p>At this point, we&rsquo;ve probably forgotten everything about the recipe, and we’re not sure what’s causing the failure. <a href="https://jivimberg.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/">The test name is not helping us much either</a>.</p>

<p>To avoid this situation, we can include a message that will be displayed whenever the assertion fails.</p>

<p><img class="center" src="/images/posts/2020-07-19/withMessage.png" width="700" title="‘Assertion with explicit message’" ></p>

<p><img class="center" src="/images/posts/2020-07-19/withMessageOutput.png" width="700" title="‘Output of a test with an assertion with explicit message’" ></p>

<p>Now the failure is obvious. There is no 🍅 on the recipe. <strong>We can immediately tell what’s wrong without even looking at the test code.</strong> But we can do better…</p>

<h2>Assertion libraries</h2>

<p>Let&rsquo;s face it, writing this kind of detailed message for every assertion would be a pain in the ass. Fortunately, we don’t have to. Instead, <strong>we can use an <a href="https://blog.frankel.ch/comparison-assertion-libraries/">expressive assertion library</a> to do the heavy lifting for us.</strong> This is how our code would look like using <a href="https://strikt.io/">Strikt</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/strikt.png" width="700" title="‘Example using Strikt’" ></p>

<p>We&rsquo;re using <a href="https://kotlinlang.org/docs/reference/functions.html#infix-notation">Kotlin infix notation</a> to make the code more readable. This a stylistic decision, you don’t have to use it if you don’t like it.</p>

<p>You might notice we&rsquo;re calling the <code>contains</code> method on the assertion itself. This is possible because Strikt can tell that the type we’re asserting on, is a <em>String</em>, and thus, it can provide methods explicitly tailored to Strings. This is what the error message would look like in this case:</p>

<p><img class="center" src="/images/posts/2020-07-19/outputStrikt.png" width="700" title="‘Output of the basic Strikt example’" ></p>

<p><strong>Almost the same information we got from writing our own message, but without the boilerplate.</strong></p>

<p>Assertion libraries are like swiss army knives; they provide all kinds of assertions for different types of objects. I suggest learning a few of the core ones through the documentation, and then letting the IDE guide you with auto-suggestions to discover new ones.</p>

<p>Here are some more examples of type-specific assertions:</p>

<p><img class="center" src="/images/posts/2020-07-19/collectionAssertion.png" width="700" title="‘Collection specific assertions’" ></p>

<p><img class="center" src="/images/posts/2020-07-19/assertingExceptions.png" width="700" title="‘Asserting exceptions’" ></p>

<h2>Asserting on objects</h2>

<p>When validating properties on objects, you might be tempted to write something like this:</p>

<p><img class="center" src="/images/posts/2020-07-19/badObjectAssertions.png" width="700" title="‘Manually asserting properties on object’" ></p>

<p>You can probably tell why this is bad. By the time we see the failure, we no longer have context on what property we’re asserting.</p>

<p><img class="center" src="/images/posts/2020-07-19/objectAssertionOutput.png" width="700" title="‘Using data classes for assertions’" ></p>

<p>Was it checking the <code>title</code>, the <code>author</code>, or something else?</p>

<p>Instead, you can take advantage of the fact that Data Classes automatically get <code>equals</code> and <code>toString</code> implementations. So we can use an <code>assertEquals</code> and get a nice looking message showing us both instances.</p>

<p><img class="center" src="/images/posts/2020-07-19/dataClasses.png" width="700" title="‘Using data classes for assertions’" ></p>

<p><img class="center" src="/images/posts/2020-07-19/dataClassesOutput.png" width="700" title="‘Using data classes test output’" ></p>

<p>If we don&rsquo;t care about comparing all properties we can use <a href="https://strikt.io/wiki/traversing-subjects/">Strikt to assert only specific fields</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjects.png" width="700" title="‘Using Strikt to traverse objects on assertions’" ></p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjectsOutput.png" width="700" title="‘Strikt object traversal test output’" ></p>

<p>The <a href="https://strikt.io/wiki/assertion-styles/">block assertion style</a> means that even though the <em>title</em> assertion failed Strikt will still check for <em>page count</em> and <strong>it’ll provide output for all the assertions in the block.</strong></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature2.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Test Structure]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure/"/>
    <updated>2020-07-10T23:53:38-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure</id>
    <content type="html"><![CDATA[<p>One way to make sure your tests are readable is to have them all adhere to the same structure.</p>

<!--more-->


<p>By far, the most common structure is <strong>&ldquo;Given - When - Then”</strong> (aka <em>“Arrange, Act, Assert”</em>). It goes like this:</p>

<ol>
<li><strong>On Given</strong>: We create the objects and set up the needed state.</li>
<li><strong>On When</strong>: We perform the action we want to test.</li>
<li><strong>On Then</strong>: We validate the state changed as expected.</li>
</ol>


<p>For example:</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleJunit.png" width="700" title="‘Example of the proposed structure using JUnit’" ></p>

<p>The comments explaining each section are optional, and can be omitted on trivial scenarios like the one shown here.</p>

<p>Note how we use whitespace to clearly separate each section. Anybody familiar with the structure will be able to easily identify each section at a glance.</p>

<p><img class="center" src="/images/posts/2020-07-10/testSections.jpg" width="700" title="‘Colored sections on test’" ></p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a> support a style that already includes the <em>Given</em>, <em>When</em> and <em>Then</em> keywords, making the structure explicit.</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleKotest.png" width="700" title="‘Example of the proposed structure using Kotest’" ></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature13.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Use Descriptive Test Names]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/"/>
    <updated>2020-07-05T23:21:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names</id>
    <content type="html"><![CDATA[<p>Picking good test names can help us identify what&rsquo;s wrong with our code when something fails.</p>

<!--more-->


<p>It&rsquo;s Friday afternoon. You finally finished that long refactor you’ve been working on for the whole week. Everything is looking good. Except you run the tests and see one failure.</p>

<p><img class="center" src="/images/posts/2020-07-05/BadNames.png" title="‘Test output with bad test names’" ></p>

<p style='text-align: center; font-size: 42px;'>
🤔
</p>


<p>Unfortunately, <strong>you can&rsquo;t really tell what&rsquo;s broken from looking at that output</strong>. You’ll have to browse the test code to identify the failure.</p>

<p>But what if the output looked more like this:</p>

<p><img class="center" src="/images/posts/2020-07-05/GoodNames.png" title="‘Test output with good test names’" ></p>

<p>Now the issue is obvious. <strong>You can immediately tell which part of the code is not working and what the output should be.</strong></p>

<p>Test names are the first (and often only) piece of information we see about a test. Using a descriptive test name can help us identify what’s broken at a glance. Furthermore, it helps us keep the test focused on validating one specific behavior, discouraging us from inflating the test with other unrelated assertions.</p>

<h2>How</h2>

<p>Instead of just using the name of the method being tested, try focusing on the behavior you want to validate. <strong>Describe the state of the system, the action performed, and the expected output.</strong> More often than not, you’ll end up with a huge name, something you probably wouldn’t use on production code, but that’s ok.</p>

<p>If you&rsquo;re using Kotlin, you can <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#function-names">use backticks to have whitespaces in your function name</a>. If you’re working with <a href="https://junit.org/junit5/docs/current/user-guide/">JUnit</a> you can leverage the <a href="https://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html"><code>@DisplayName</code></a> annotation for prettier names. You can even get emojis in there:</p>

<p><img class="center" src="/images/posts/2020-07-05/WithEmojis.png" title="‘Test output with emojis’" ></p>

<p>You can also write a custom name generator using <code>@DisplayNameGeneration</code> <a href="https://www.baeldung.com/junit-custom-display-name-generator">as shown here</a>.</p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a>, also <a href="https://github.com/kotest/kotest/blob/master/doc/styles.md#should-spec">support nesting tests</a>:</p>

<p><img class="center" src="/images/posts/2020-07-05/NestedNames.png" title="‘Test output with emojis’" ></p>

<hr />

<p>You can read more about test naming in Chapter 12 of <a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791/ref=sr_1_2?dchild=1&amp;keywords=software+engineering+at+google&amp;link_code=qs&amp;qid=1594020903&amp;sr=8-2&amp;tag=wwwcanoniccom-20">Software Engineering at Google</a>.</p>

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature14.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
</feed>
