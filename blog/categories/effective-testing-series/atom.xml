<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Effective-testing-series | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/effective-testing-series/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2020-07-12T13:40:54-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Test Structure]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure/"/>
    <updated>2020-07-10T23:53:38-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure</id>
    <content type="html"><![CDATA[<p>One way to make sure your tests are readable is to have them all adhere to the same structure.</p>

<!--more-->


<p>By far, the most common structure is <strong>&ldquo;Given - When - Then‚Äù</strong> (aka <em>‚ÄúArrange, Act, Assert‚Äù</em>). It goes like this:</p>

<ol>
<li><strong>On Given</strong>: We create the objects and set up the needed state.</li>
<li><strong>On When</strong>: We perform the action we want to test.</li>
<li><strong>On Then</strong>: We validate the state changed as expected.</li>
</ol>


<p>For example:</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleJunit.png" width="700" title="‚ÄòExample of the proposed structure using JUnit‚Äô" ></p>

<p>The comments explaining each section are optional, and can be omitted on trivial scenarios like the one shown here.</p>

<p>Note how we use whitespace to clearly separate each section. Anybody familiar with the structure will be able to easily identify each section at a glance.</p>

<p><img class="center" src="/images/posts/2020-07-10/testSections.jpg" width="700" title="‚ÄòColored sections on test‚Äô" ></p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a> support a style that already includes the <em>Given</em>, <em>When</em> and <em>Then</em> keywords, making the structure explicit.</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleKotest.png" width="700" title="‚ÄòExample of the proposed structure using Kotest‚Äô" ></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature13.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Use Descriptive Test Names]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/"/>
    <updated>2020-07-05T23:21:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names</id>
    <content type="html"><![CDATA[<p>Picking good test names can help us identify what&rsquo;s wrong with our code when something fails.</p>

<!--more-->


<p>It&rsquo;s Friday afternoon. You finally finished that long refactor you‚Äôve been working on for the whole week. Everything is looking good. Except you run the tests and see one failure.</p>

<p><img class="center" src="/images/posts/2020-07-05/BadNames.png" title="‚ÄòTest output with bad test names‚Äô" ></p>

<p style='text-align: center; font-size: 42px;'>
ü§î
</p>


<p>Unfortunately, <strong>you can&rsquo;t really tell what&rsquo;s broken from looking at that output</strong>. You‚Äôll have to browse the test code to identify the failure.</p>

<p>But what if the output looked more like this:</p>

<p><img class="center" src="/images/posts/2020-07-05/GoodNames.png" title="‚ÄòTest output with good test names‚Äô" ></p>

<p>Now the issue is obvious. <strong>You can immediately tell which part of the code is not working and what the output should be.</strong></p>

<p>Test names are the first (and often only) piece of information we see about a test. Using a descriptive test name can help us identify what‚Äôs broken at a glance. Furthermore, it helps us keep the test focused on validating one specific behavior, discouraging us from inflating the test with other unrelated assertions.</p>

<h2>How</h2>

<p>Instead of just using the name of the method being tested, try focusing on the behavior you want to validate. <strong>Describe the state of the system, the action performed, and the expected output.</strong> More often than not, you‚Äôll end up with a huge name, something you probably wouldn‚Äôt use on production code, but that‚Äôs ok.</p>

<p>If you&rsquo;re using Kotlin, you can <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#function-names">use backticks to have whitespaces in your function name</a>. If you‚Äôre working with <a href="https://junit.org/junit5/docs/current/user-guide/">JUnit</a> you can leverage the <a href="https://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html"><code>@DisplayName</code></a> annotation for prettier names. You can even get emojis in there:</p>

<p><img class="center" src="/images/posts/2020-07-05/WithEmojis.png" title="‚ÄòTest output with emojis‚Äô" ></p>

<p>You can also write a custom name generator using <code>@DisplayNameGeneration</code> <a href="https://www.baeldung.com/junit-custom-display-name-generator">as shown here</a>.</p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a>, also <a href="https://github.com/kotest/kotest/blob/master/doc/styles.md#should-spec">support nesting tests</a>:</p>

<p><img class="center" src="/images/posts/2020-07-05/NestedNames.png" title="‚ÄòTest output with emojis‚Äô" ></p>

<hr />

<p>You can read more about test naming in Chapter 12 of <a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791/ref=sr_1_2?dchild=1&amp;keywords=software+engineering+at+google&amp;link_code=qs&amp;qid=1594020903&amp;sr=8-2&amp;tag=wwwcanoniccom-20">Software Engineering at Google</a>.</p>

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature14.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
</feed>
