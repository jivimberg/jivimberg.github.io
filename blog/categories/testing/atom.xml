<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2020-07-27T22:42:59-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Expressive Assertions]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions/"/>
    <updated>2020-07-18T11:58:34-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions</id>
    <content type="html"><![CDATA[<p>Using expressive assertions can help us figure out why a test fails without having to go through the code.</p>

<!--more-->


<p>Let&rsquo;s start with an example. Here&rsquo;s a test making sure our recipe has tomatoes üçÖ</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertion.png" width="700" title="‚ÄòA test with a non-descriptive assertion‚Äô" ></p>

<p>At first glance, everything looks ok. The test passes, it is easy to read, and it follows <a href="https://jivimberg.io/blog/2020/07/10/effective-testing-test-structure/">the <em>‚ÄùGiven - When - Then‚Äù</em>  structure</a>.</p>

<p>Some months go by, and one day our test starts failing.</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertionOutput.png" width="700" title="‚ÄòThe output of a test with a non-descriptive assertion‚Äô" ></p>

<p>At this point, we&rsquo;ve probably forgotten everything about the recipe, and we‚Äôre not sure what‚Äôs causing the failure. <a href="https://jivimberg.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/">The test name is not helping us much either</a>.</p>

<p>To avoid this situation, we can include a message that will be displayed whenever the assertion fails.</p>

<p><img class="center" src="/images/posts/2020-07-19/withMessage.png" width="700" title="‚ÄòAssertion with explicit message‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/withMessageOutput.png" width="700" title="‚ÄòOutput of a test with an assertion with explicit message‚Äô" ></p>

<p>Now the failure is obvious. There is no üçÖ on the recipe. <strong>We can immediately tell what‚Äôs wrong without even looking at the test code.</strong> But we can do better‚Ä¶</p>

<h2>Assertion libraries</h2>

<p>Let&rsquo;s face it, writing this kind of detailed message for every assertion would be a pain in the ass. Fortunately, we don‚Äôt have to. Instead, <strong>we can use an <a href="https://blog.frankel.ch/comparison-assertion-libraries/">expressive assertion library</a> to do the heavy lifting for us.</strong> This is how our code would look like using <a href="https://strikt.io/">Strikt</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/strikt.png" width="700" title="‚ÄòExample using Strikt‚Äô" ></p>

<p>We&rsquo;re using <a href="https://kotlinlang.org/docs/reference/functions.html#infix-notation">Kotlin infix notation</a> to make the code more readable. This a stylistic decision, you don‚Äôt have to use it if you don‚Äôt like it.</p>

<p>You might notice we&rsquo;re calling the <code>contains</code> method on the assertion itself. This is possible because Strikt can tell that the type we‚Äôre asserting on, is a <em>String</em>, and thus, it can provide methods explicitly tailored to Strings. This is what the error message would look like in this case:</p>

<p><img class="center" src="/images/posts/2020-07-19/outputStrikt.png" width="700" title="‚ÄòOutput of the basic Strikt example‚Äô" ></p>

<p><strong>Almost the same information we got from writing our own message, but without the boilerplate.</strong></p>

<p>Assertion libraries are like swiss army knives; they provide all kinds of assertions for different types of objects. I suggest learning a few of the core ones through the documentation, and then letting the IDE guide you with auto-suggestions to discover new ones.</p>

<p>Here are some more examples of type-specific assertions:</p>

<p><img class="center" src="/images/posts/2020-07-19/collectionAssertion.png" width="700" title="‚ÄòCollection specific assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/assertingExceptions.png" width="700" title="‚ÄòAsserting exceptions‚Äô" ></p>

<h2>Asserting on objects</h2>

<p>When validating properties on objects, you might be tempted to write something like this:</p>

<p><img class="center" src="/images/posts/2020-07-19/badObjectAssertions.png" width="700" title="‚ÄòManually asserting properties on object‚Äô" ></p>

<p>You can probably tell why this is bad. By the time we see the failure, we no longer have context on what property we‚Äôre asserting.</p>

<p><img class="center" src="/images/posts/2020-07-19/objectAssertionOutput.png" width="700" title="‚ÄòUsing data classes for assertions‚Äô" ></p>

<p>Was it checking the <code>title</code>, the <code>author</code>, or something else?</p>

<p>Instead, you can take advantage of the fact that Data Classes automatically get <code>equals</code> and <code>toString</code> implementations. So we can use an <code>assertEquals</code> and get a nice looking message showing us both instances.</p>

<p><img class="center" src="/images/posts/2020-07-19/dataClasses.png" width="700" title="‚ÄòUsing data classes for assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/dataClassesOutput.png" width="700" title="‚ÄòUsing data classes test output‚Äô" ></p>

<p>If we don&rsquo;t care about comparing all properties we can use <a href="https://strikt.io/wiki/traversing-subjects/">Strikt to assert only specific fields</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjects.png" width="700" title="‚ÄòUsing Strikt to traverse objects on assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjectsOutput.png" width="700" title="‚ÄòStrikt object traversal test output‚Äô" ></p>

<p>The <a href="https://strikt.io/wiki/assertion-styles/">block assertion style</a> means that even though the <em>title</em> assertion failed Strikt will still check for <em>page count</em> and <strong>it‚Äôll provide output for all the assertions in the block.</strong></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature2.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Test Structure]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure/"/>
    <updated>2020-07-10T23:53:38-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/10/effective-testing-test-structure</id>
    <content type="html"><![CDATA[<p>One way to make sure your tests are readable is to have them all adhere to the same structure.</p>

<!--more-->


<p>By far, the most common structure is <strong>&ldquo;Given - When - Then‚Äù</strong> (aka <em>‚ÄúArrange, Act, Assert‚Äù</em>). It goes like this:</p>

<ol>
<li><strong>On Given</strong>: We create the objects and set up the needed state.</li>
<li><strong>On When</strong>: We perform the action we want to test.</li>
<li><strong>On Then</strong>: We validate the state changed as expected.</li>
</ol>


<p>For example:</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleJunit.png" width="700" title="‚ÄòExample of the proposed structure using JUnit‚Äô" ></p>

<p>The comments explaining each section are optional, and can be omitted on trivial scenarios like the one shown here.</p>

<p>Note how we use whitespace to clearly separate each section. Anybody familiar with the structure will be able to easily identify each section at a glance.</p>

<p><img class="center" src="/images/posts/2020-07-10/testSections.jpg" width="700" title="‚ÄòColored sections on test‚Äô" ></p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a> support a style that already includes the <em>Given</em>, <em>When</em> and <em>Then</em> keywords, making the structure explicit.</p>

<p><img class="center" src="/images/posts/2020-07-10/exampleKotest.png" width="700" title="‚ÄòExample of the proposed structure using Kotest‚Äô" ></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature13.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Use Descriptive Test Names]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/"/>
    <updated>2020-07-05T23:21:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names</id>
    <content type="html"><![CDATA[<p>Picking good test names can help us identify what&rsquo;s wrong with our code when something fails.</p>

<!--more-->


<p>It&rsquo;s Friday afternoon. You finally finished that long refactor you‚Äôve been working on for the whole week. Everything is looking good. Except you run the tests and see one failure.</p>

<p><img class="center" src="/images/posts/2020-07-05/BadNames.png" title="‚ÄòTest output with bad test names‚Äô" ></p>

<p style='text-align: center; font-size: 42px;'>
ü§î
</p>


<p>Unfortunately, <strong>you can&rsquo;t really tell what&rsquo;s broken from looking at that output</strong>. You‚Äôll have to browse the test code to identify the failure.</p>

<p>But what if the output looked more like this:</p>

<p><img class="center" src="/images/posts/2020-07-05/GoodNames.png" title="‚ÄòTest output with good test names‚Äô" ></p>

<p>Now the issue is obvious. <strong>You can immediately tell which part of the code is not working and what the output should be.</strong></p>

<p>Test names are the first (and often only) piece of information we see about a test. Using a descriptive test name can help us identify what‚Äôs broken at a glance. Furthermore, it helps us keep the test focused on validating one specific behavior, discouraging us from inflating the test with other unrelated assertions.</p>

<h2>How</h2>

<p>Instead of just using the name of the method being tested, try focusing on the behavior you want to validate. <strong>Describe the state of the system, the action performed, and the expected output.</strong> More often than not, you‚Äôll end up with a huge name, something you probably wouldn‚Äôt use on production code, but that‚Äôs ok.</p>

<p>If you&rsquo;re using Kotlin, you can <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#function-names">use backticks to have whitespaces in your function name</a>. If you‚Äôre working with <a href="https://junit.org/junit5/docs/current/user-guide/">JUnit</a> you can leverage the <a href="https://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html"><code>@DisplayName</code></a> annotation for prettier names. You can even get emojis in there:</p>

<p><img class="center" src="/images/posts/2020-07-05/WithEmojis.png" title="‚ÄòTest output with emojis‚Äô" ></p>

<p>You can also write a custom name generator using <code>@DisplayNameGeneration</code> <a href="https://www.baeldung.com/junit-custom-display-name-generator">as shown here</a>.</p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a>, also <a href="https://github.com/kotest/kotest/blob/master/doc/styles.md#should-spec">support nesting tests</a>:</p>

<p><img class="center" src="/images/posts/2020-07-05/NestedNames.png" title="‚ÄòTest output with emojis‚Äô" ></p>

<hr />

<p>You can read more about test naming in Chapter 12 of <a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791/ref=sr_1_2?dchild=1&amp;keywords=software+engineering+at+google&amp;link_code=qs&amp;qid=1594020903&amp;sr=8-2&amp;tag=wwwcanoniccom-20">Software Engineering at Google</a>.</p>

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature14.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PowerMock + TestNG to Mock a Static Class]]></title>
    <link href="http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class/"/>
    <updated>2016-04-03T08:38:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class</id>
    <content type="html"><![CDATA[<p>Ôøº
This week I needed to test a class that depended on a method from an static class. I saw we were using <a href="https://github.com/jayway/powermock" title="PowerMock">PowerMock</a> and thought to myself: <em>‚ÄúWell this sounds pretty common, I bet it‚Äôs easy to accomplish‚Äù</em>. But of course I ran into half a dozen issues before I was able to make it work. Here‚Äôs my two cents to make your experience easier than mine.</p>

<!--more-->


<h2>Setup</h2>

<p>Let‚Äôs start with the ingredients. To mock static methods you‚Äôll need a couple of libraries:</p>

<ul>
<li><a href="http://easymock.org/">EasyMock</a> for the mocking<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li><a href="https://github.com/jayway/powermock">PowerMock</a></li>
<li><a href="http://testng.org/">TestNG</a> for the test</li>
</ul>


<p>When choosing your library version you‚Äôll need to make sure <strong>PowerMock</strong> and <strong>TestNG</strong> versions are compatible. You can do so by comparing your versions with the ones specified <a href="https://github.com/jayway/powermock/wiki/TestNG_usage">here</a>.</p>

<p>Also, if you‚Äôre not using <strong>Maven</strong> to include PowerMock in your project make sure you also add it‚Äôs dependencies. You‚Äôll find a zip file containing everything you need <a href="https://github.com/jayway/powermock/wiki/GettingStarted">here</a>.</p>

<h2>Writing the test</h2>

<p>To have the test working you‚Äôll need to do 3 things:</p>

<ol>
<li>Configure <strong>TestNG</strong> to use the PowerMock object factory</li>
<li>Use <code>@PrepareForTest</code> annotation to prepare the static class</li>
<li><strong>Mock</strong> the static class method</li>
<li><strong>Write the rest</strong> of the test</li>
</ol>


<p>Let‚Äôs go one by one:</p>

<h4>1. Configure TestNG to use the PowerMock object factory</h4>

<p>There are a bunch of ways of doing this, namely:</p>

<ul>
<li>Configure it on the <code>suite.xml</code> file</li>
<li>Extending your test class with <code>PowerMockTestCase</code></li>
<li>Or by adding a method like this to your test</li>
</ul>


<pre><code class="java">@ObjectFactory
public IObjectFactory getObjectFactory() {
    return new org.powermock.modules.testng.PowerMockObjectFactory();
}
</code></pre>

<p>I choose to go with the latter because I don‚Äôt use the <code>suite.xml</code> file and adding an annotated method is less restrictive than extending a class. But feel free to use whatever works for you.</p>

<h4>2. @PrepareForTest</h4>

<p>You‚Äôll need to prepare your static class for mocking. You can do so with the <code>@PrepareForTest</code> annotation like this:</p>

<pre><code class="java">@PrepareForTest(StaticHelper.class)
public class MyTest {
    ...
}
</code></pre>

<p>Note that you can pass an array of classes to the annotation if you need to prepare multiple classes.</p>

<h4>3. Mocking</h4>

<p>Now you‚Äôre ready to mock the static method like this:</p>

<pre><code class="java">@Test
public void test() throws Exception {
    // mocking static method
    PowerMock.mockStatic(StaticHelper.class);
    EasyMock.expect(StaticHelper.doSomething()).andReturn(‚Äúhello world‚Äù)).anyTimes();
    PowerMock.replay(StaticHelper.class);
    ...
} 
</code></pre>

<h4>4. Writing the rest</h4>

<p>Ok let‚Äôs put everything together and write the rest of the test</p>

<pre><code class="java">@PrepareForTest(StaticHelper.class)
public class MyTest {

    @ObjectFactory
    public IObjectFactory getObjectFactory() {
        return new org.powermock.modules.testng.PowerMockObjectFactory();
    }

    @Test
    public void test() throws Exception {
        // mocking static method
        PowerMock.mockStatic(StaticHelper.class);
        EasyMock.expect(StaticHelper.doSomething()).andReturn(‚Äúhello world‚Äù)).anyTimes();
        PowerMock.replay(StaticHelper.class);

        // test
        Assert.assertEquals(‚Äúhello world‚Äù ‚Äù StaticHelper.doSomething());
    }

}
</code></pre>

<p>Of course this is an oversimplified example. The cool thing about mocking static methods is that <strong>the static call you may need to mock may be hidden under several layers of abstraction</strong>. Using this approach you are able to mock the static call and test your classes without changing a single line of production code.</p>

<h2>Some things to watch out for</h2>

<p>There are a few things to keep in mind when initializing the mock:</p>

<ol>
<li>You cannot create mocks during <strong>field initialization</strong>.</li>
<li>You cannot create mocks inside <strong>before static methods</strong>.</li>
</ol>


<p>Finally I also run into the following error when running my test:</p>

<pre><code>java.lang.VerifyError: Expecting a stackmap frame at branch target 71 in method com.abc.domain.myPackage.MyClass$JaxbAccessorM_getDescription_setDescription_java_lang_String.get(Ljava/lang/Object;)Ljava/lang/Object; at offset 20_
</code></pre>

<p>Turns out that, as explained <a href="http://stackoverflow.com/questions/15122890/java-lang-verifyerror-expecting-a-stackmap-frame-at-branch-target-jdk-1-7">here</a> Java 7 introduced a stricter verification and changed the class format. The byte code generation library PowerMock uses is generating code that does not comply with the new verification. But worry not, <strong>this validation can be disabled</strong> by passing <code>-noverify</code> as argument to the JVM.</p>

<p>If you&rsquo;re running you&rsquo;re using Maven to run your tests remember to add the argument to your plugin configuration.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This guide uses <strong>EasyMock</strong> but you can also use <strong>Mockito</strong><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
