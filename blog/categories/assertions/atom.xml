<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Assertions | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/assertions/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2023-08-06T10:26:16-03:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Expressive Assertions]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions/"/>
    <updated>2020-07-18T11:58:34-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/18/effective-testing-expressive-assertions</id>
    <content type="html"><![CDATA[<p>Using expressive assertions can help us figure out why a test fails without having to go through the code.</p>

<!--more-->


<p>Let&rsquo;s start with an example. Here&rsquo;s a test making sure our recipe has tomatoes üçÖ</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertion.png" width="700" title="‚ÄòA test with a non-descriptive assertion‚Äô" ></p>

<p>At first glance, everything looks ok. The test passes, it is easy to read, and it follows <a href="https://jivimberg.io/blog/2020/07/10/effective-testing-test-structure/">the <em>‚ÄùGiven - When - Then‚Äù</em>  structure</a>.</p>

<p>Some months go by, and one day our test starts failing.</p>

<p><img class="center" src="/images/posts/2020-07-19/badAssertionOutput.png" width="700" title="‚ÄòThe output of a test with a non-descriptive assertion‚Äô" ></p>

<p>At this point, we&rsquo;ve probably forgotten everything about the recipe, and we‚Äôre not sure what‚Äôs causing the failure. <a href="https://jivimberg.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/">The test name is not helping us much either</a>.</p>

<p>To avoid this situation, we can include a message that will be displayed whenever the assertion fails.</p>

<p><img class="center" src="/images/posts/2020-07-19/withMessage.png" width="700" title="‚ÄòAssertion with explicit message‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/withMessageOutput.png" width="700" title="‚ÄòOutput of a test with an assertion with explicit message‚Äô" ></p>

<p>Now the failure is obvious. There is no üçÖ on the recipe. <strong>We can immediately tell what‚Äôs wrong without even looking at the test code.</strong> But we can do better‚Ä¶</p>

<h2>Assertion libraries</h2>

<p>Let&rsquo;s face it, writing this kind of detailed message for every assertion would be a pain in the ass. Fortunately, we don‚Äôt have to. Instead, <strong>we can use an <a href="https://blog.frankel.ch/comparison-assertion-libraries/">expressive assertion library</a> to do the heavy lifting for us.</strong> This is how our code would look like using <a href="https://strikt.io/">Strikt</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/strikt.png" width="700" title="‚ÄòExample using Strikt‚Äô" ></p>

<p>We&rsquo;re using <a href="https://kotlinlang.org/docs/reference/functions.html#infix-notation">Kotlin infix notation</a> to make the code more readable. This a stylistic decision, you don‚Äôt have to use it if you don‚Äôt like it.</p>

<p>You might notice we&rsquo;re calling the <code>contains</code> method on the assertion itself. This is possible because Strikt can tell that the type we‚Äôre asserting on, is a <em>String</em>, and thus, it can provide methods explicitly tailored to Strings. This is what the error message would look like in this case:</p>

<p><img class="center" src="/images/posts/2020-07-19/outputStrikt.png" width="700" title="‚ÄòOutput of the basic Strikt example‚Äô" ></p>

<p><strong>Almost the same information we got from writing our own message, but without the boilerplate.</strong></p>

<p>Assertion libraries are like swiss army knives; they provide all kinds of assertions for different types of objects. I suggest learning a few of the core ones through the documentation, and then letting the IDE guide you with auto-suggestions to discover new ones.</p>

<p>Here are some more examples of type-specific assertions:</p>

<p><img class="center" src="/images/posts/2020-07-19/collectionAssertion.png" width="700" title="‚ÄòCollection specific assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/assertingExceptions.png" width="700" title="‚ÄòAsserting exceptions‚Äô" ></p>

<h2>Asserting on objects</h2>

<p>When validating properties on objects, you might be tempted to write something like this:</p>

<p><img class="center" src="/images/posts/2020-07-19/badObjectAssertions.png" width="700" title="‚ÄòManually asserting properties on object‚Äô" ></p>

<p>You can probably tell why this is bad. By the time we see the failure, we no longer have context on what property we‚Äôre asserting.</p>

<p><img class="center" src="/images/posts/2020-07-19/objectAssertionOutput.png" width="700" title="‚ÄòUsing data classes for assertions‚Äô" ></p>

<p>Was it checking the <code>title</code>, the <code>author</code>, or something else?</p>

<p>Instead, you can take advantage of the fact that Data Classes automatically get <code>equals</code> and <code>toString</code> implementations. So we can use an <code>assertEquals</code> and get a nice looking message showing us both instances.</p>

<p><img class="center" src="/images/posts/2020-07-19/dataClasses.png" width="700" title="‚ÄòUsing data classes for assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/dataClassesOutput.png" width="700" title="‚ÄòUsing data classes test output‚Äô" ></p>

<p>If we don&rsquo;t care about comparing all properties we can use <a href="https://strikt.io/wiki/traversing-subjects/">Strikt to assert only specific fields</a>:</p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjects.png" width="700" title="‚ÄòUsing Strikt to traverse objects on assertions‚Äô" ></p>

<p><img class="center" src="/images/posts/2020-07-19/traversingObjectsOutput.png" width="700" title="‚ÄòStrikt object traversal test output‚Äô" ></p>

<p>The <a href="https://strikt.io/wiki/assertion-styles/">block assertion style</a> means that even though the <em>title</em> assertion failed Strikt will still check for <em>page count</em> and <strong>it‚Äôll provide output for all the assertions in the block.</strong></p>

<hr />

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>

<p> <img class="right-fill" src="/images/signatures/signature2.png" width="200" title="‚ÄòMy signature‚Äô" ></p>
]]></content>
  </entry>
  
</feed>
