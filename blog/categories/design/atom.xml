<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | Coding Forest]]></title>
  <link href="http://jivimberg.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://jivimberg.io/"/>
  <updated>2023-09-13T06:30:37+00:00</updated>
  <id>http://jivimberg.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Graceful Degradation of Service]]></title>
    <link href="http://jivimberg.io/blog/2023/08/14/on-graceful-degradation-of-service/"/>
    <updated>2023-08-14T20:29:04-03:00</updated>
    <id>http://jivimberg.io/blog/2023/08/14/on-graceful-degradation-of-service</id>
    <content type="html"><![CDATA[<p>This is the door to my in-laws’ apartment.</p>

<!--more-->


<p>{% img center /images/posts/2023-08-15/door.jpg 450 %}</p>

<p>You can safely ignore the puppy; it’s only there for SEO purposes. Focus instead on that thing on the wall, marked by the orange arrow. That is a motion-sensor light switch, the kind that turns the light on when you walk by. Only this one doesn’t because it works like shit. You must wave your hand in front of it, almost touching it, for the lights to come on.</p>

<p>As you can see in the picture, this sensor is roughly placed at the same level a light switch would be. Because of this, when people reach out in the dark, they end up activating the malfunctioning sensor. This is what we call graceful degradation of service. The sensor is essentially being used as a touch button. <strong>The motion-sensing functionality doesn’t work, but the system as a whole still works: people are able to turn on the lights when they need them.</strong> If the sensor had been placed somewhere else, such as at knee level or on the ceiling, the system would not have degraded gracefully. Things would work as long as the sensor is functioning correctly, but as soon as it’s busted, there’d be no way of turning on the lights. People would reach out in the dark and find nothing. Placing the sensor on the ceiling would also make the whole system harder to maintain, as you’d need a ladder every time you need to service it.</p>

<p>I don’t think anybody thought about graceful degradation when installing the switch. The motion sensor was most likely retrofitted after the fact, repurposing the hole previously used for a regular light switch. We could say that, in this case, the property of graceful degradation comes from leveraging a pre-existing user behavior. We could distill this learning into a product design rule that reads:</p>

<blockquote><p>When introducing a new feature, leverage existing user workflows instead of disrupting them.</p></blockquote>

<p>Let’s illustrate this with an example. Not too long ago, Google launched their <a href="https://support.google.com/mail/answer/9116836?hl=en&amp;co=GENIE.Platform%3DDesktop">Smart Compose</a> feature for Gmail. The way it works is you start writing your email and suddenly a grayed-out text appears, trying to guess your next few words. If you like the suggestion, you press <code>tab</code>, and the caret jumps to the end of the line saving you a few keystrokes and leaving you wondering what sort of witchcraft Google is using to read your mind.</p>

<p>{% img center /images/posts/2023-08-15/gmail-smart-compose.gif %}</p>

<p>Now, Google could have designed this feature in many different ways. It could, for example, open a popup menu with multiple options letting the user select the best one from the list the way <a href="https://presage.sourceforge.io/">this tool</a> does:</p>

<p>{% img center /images/posts/2023-08-15/gprompter.jpg %}</p>

<p>This approach might seem more powerful at first glance because it gives the user multiple options instead of just one. But it has a huge disadvantage: it disrupts the user workflow. Picture this: You’re redacting an essay. You think of a sentence and start writing. Midway through a menu pops up designed to look like it’s on top of what you’re doing. Your hands stop typing. Your eyes dart through the popup content, read the first one, jump to the next line, read the second one, etc. You consider all the options and decide to go with the 4th one. Your hands jump to the arrow keys, and you click click click until the one you want is highlighted, then click once more to select it. All of this happens in a matter of milliseconds. And yet it is enough to break your flow. By contrast, Google’s design, users are offered a single option presented inline, as if the text were already written. With the grayed-out text shown in our visual pathway, the eyes naturally flow to the end of the sentence. We can accept the suggestion with just a single keystroke; if we do, our eyes are already in the right place to continue writing.</p>

<p>You might think Google’s design choice is obviously better and that I’m just cherry-picking a needlessly convoluted example as a straw man. And maybe you’re right. <strong>But keep in mind that design, when done right, is invisible.</strong> And what might seem like an obvious solution once you’ve seen it can be hard to come up with when you’re thinking a feature from scratch.</p>

<p>Figuring out the right way to introduce new functionality without disrupting user workflows takes dedication and practice. Often we developers get worked up about the new capability we’re introducing and forget to consider how it fits into the existing user journey. This happened to me not so long ago at Netflix. We were working on a new tool that’d let users discover and analyze correlated system failures that could be causally related. That is, if service A is going <em>Boop!</em> and service B is also going <em>Boop!</em> and we know service A calls service B then there’s a good chance those two events might be related. In some cases, we can even venture that one symptom might be caused by the other, establishing a causal relationship between the signals based on the requests’ call paths. We were super excited to put this new functionality in users’ hands. We were so bullish about it that we envisioned it being the first step in the troubleshooting journey. Users would start by analyzing their service anomalous metric in the context of the overall system health. We created a new tool to surface this kind of relationship between services and took a few iterations to design how we would overlay service health data on this new visualization. What we failed to realize is that we were introducing a whole new way of troubleshooting an incident. <strong>Asking users to learn a new way of doing things is always a tough sell.</strong> Especially when there’s an outage and things are on fire, users would systematically trust their muscle memory and revert to their battle-tested tools and dashboards.</p>

<p>Instead, we should have emulated the guy that installed that motion sensor in my in-laws' apartment. Rather than introducing a whole new tool, present whatever insight we can gather as part of the existing user workflow. For example, if a developer receives an alert from a failing metric on Service A, we could include any other metrics we think might be related in that same alert. Enriching the alert with additional context giving users a hint on where to look next. Or if they’re looking at a dashboard and notice an anomalous metric, we could then surface a message saying: “Hey, by the way, Service B is also failing in a similar way; you may want to check it”.</p>

<p>{% img center /images/posts/2023-08-15/grafana_clippy.png 700 %}
<em class="img-caption"> What if Clippy was the peak of UX design? </em></p>

<p>Instead of adopting an <em>“If you build it, they will come”</em> approach we should have <a href="https://medium.com/mule-design/meeting-users-where-they-are-624bc0caa83a">met users where they were at</a>. Presenting key insights in the context of their troubleshooting session and letting them jump to the new tool if they want to dig deeper. <strong>A system built this way would degrade gracefully</strong>: If the correlation service is down or the suggestion is not good, users can still keep troubleshooting the same way they do today.</p>

<p>{% img right-fill /images/signatures/signature10.png 200 ‘My signature’ %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Shape Up]]></title>
    <link href="http://jivimberg.io/blog/2019/09/15/book-recommendations-shape-up/"/>
    <updated>2019-09-15T10:51:31-07:00</updated>
    <id>http://jivimberg.io/blog/2019/09/15/book-recommendations-shape-up</id>
    <content type="html"><![CDATA[<p>I love reading about how people do creative work. Be it <a href="https://en.wikipedia.org/wiki/On_Writing:_A_Memoir_of_the_Craft">writing books</a> or <a href="http://the-witness.net/news/">designing video games</a>, there’s something magical about peeking behind the curtain and learning how the pros do their thing.</p>

<p>Today I’m reviewing <a href="https://basecamp.com/shapeup">Shape Up</a>, a book about the process of writing software at Basecamp.</p>

<!--more-->


<p><a href="https://basecamp.com/shapeup">{% img center /images/posts/2019-09-29/shapeUpCover.png 700 ‘Book cover’ %}</a></p>

<p>(<em>I promise those potato shapes ☝️ will make sense by the time you finish the book</em>)</p>

<h1>What is it?</h1>

<p>Shape Up is a book by <a href="https://twitter.com/rjs">Ryan Singer</a> about how <a href="https://basecamp.com/about">Basecamp</a> (the company) writes <a href="https://basecamp.com/">Basecamp</a> (the app). It goes through the development process, from the moment a new idea comes up, ‘till it shows up in production as a fully implemented feature.</p>

<h1>Why does it matter?</h1>

<p><strong>Because it’s fresh!</strong> This is not your run-of-the-mill <em>“How we do Agile”</em> kind of book. There are no Kickoff meetings, no Kanban boards, no Daily Standup. They don’t even keep a backlog!</p>

<p>Coming from the people that wrote <a href="https://basecamp.com/books/remote">Remote</a> and <a href="https://basecamp.com/books/calm">It doesn’t have to be crazy at work</a>, you know this is a company that’s not afraid to innovate.</p>

<p>{% blockquote Jason Fried, Basecamp CEO %}
 Now that our process is fully formed, documented, and ready to go, we’re here to share it with all those curious enough to listen to a new way of doing things. Explorers, pioneers, those who don’t care what everyone else is doing. Those who want to work better than the rest.
{% endblockquote %}</p>

<p>Also, it doesn’t hurt that it is short, well-written, and has real-life examples and stick-figure drawings. <strong>Oh! and it’s free!! 💸</strong></p>

<h1>So, what did you learn?</h1>

<p>A bunch of things! I’m not going to cover everything because I wouldn’t be able to do it justice. Instead, I’ll focus on a couple of nuggets of wisdom. If you find them interesting, go check the book! Getting a better sense of how the whole process is structured shines a new light on the bits you’ll find described here.</p>

<h2>The shape of your task</h2>

<p>A big part of the book is about what happens before the developer starts coding. It is about choosing and defining what’s going to be built. This is what Basecamp calls <a href="https://basecamp.com/shapeup/1.1-chapter-02"><em>”Shaping”</em></a>, and it is so integral to their process that it’s right there on the book’s title. I found this refreshing since, more often than not, books will focus on the execution of tasks instead of how to come up with them.</p>

<p>Basecamp uses cycles of six weeks.  While the developers are busy delivering features, a group of senior staff members<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> works on defining what’s going to come next. If the project is approved (more on this later), a team of developers will use this spec to make it happen on the next cycle.</p>

<p>The key to Shaping is that it has to happen at <strong>the proper level of abstraction</strong>. Go too abstract, and the dev team might end up building the wrong thing. Go too concrete, and they have no wiggle room to work around a technical pitfall or revise a design choice.</p>

<p>{% img right /images/posts/2019-09-29/knob.png 400 ‘Abstraction knob’ %}</p>

<p>For example, they’d use fat marker drawings instead of wireframes, to avoid delving too deep into the UI design details.</p>

<p>You want to end up with a good definition of the problem and a rough sketch of the solution. A clear sense of what’s part of the solution and what’s out of scope. A set of elements and how they connect to each other, but no comprehensive list of tasks or high-res mockups. Those things will come later when the dev team takes over and starts exploring the solution.</p>

<p>{% img left /images/posts/2019-09-29/fatMarker.png  150 ‘Fat marker sketch’ %}</p>

<p>Only once shaping is complete, they’d take it to the <a href="https://basecamp.com/shapeup/2.2-chapter-08#the-betting-table"><em>“betting table“</em></a> where they decide if this is something they want to bet the next six weeks on. If the pitch is , it goes into the next cycle. If it’s not, then nothing happens. There’s no centralized backlog or list of rejected ideas. If somebody considers it important or thinks that a better solution can be found, they’ll lobby for it again six weeks later.</p>

<h2>Evaluating new ideas and user requests</h2>

<p>Every single new idea and feature request gets the same answer:</p>

<p>{% img center /images/posts/2019-09-29/interesting.png 400 ‘Interesting! Maybe some time’ %}</p>

<p>Basecamp believes an idea needs to go through the shaping process detailed above before they’re ready to bet on it.  When a new request comes in, they’d first try to identify what’s the user need (which sometimes might be quite different from what the user is asking for). Then, they see how they can solve the requirement with a minimal amount of effort. They acknowledge there’s always a better, more complete solution if you have infinite time at your disposal. The trick here is to find a good solution that works under the given constraints (in their case, that it can be built by a small team of engineers and designers in no more than six weeks)</p>

<p>If they’re not able to narrow down the problem and it’s not critical, they simply let it rest and wait to see if the same problem shows up again, so they can get a better sense of what they’re solving for. <strong>Grab-bags such as: “Redesign profile page” or “Refactor engine” are a no-go</strong>. The scope has to be well-defined before they’re ready to bet on an idea.</p>

<h2>Showing progress</h2>

<p>This is how we track progress in our industry:</p>

<p>{% img center /images/posts/2019-09-29/scrum.jpg  700 ‘Wall full of post-it notes’ %}</p>

<p>The problem with this approach is that it only works if all required tasks are known up-front. And let’s face, 99% of the time, that’s not the case. Most of the time, you’d start coding the first task only to discover that a new component needs to be added, and you’ll have to fix a few connections this change will introduce.</p>

<p>The book acknowledges this exploration phase as an inherent part of the developers' work. It makes the distinction between 2 different types of tasks:</p>

<ul>
<li><strong>Imagined tasks</strong>: Those thought about before you start coding</li>
<li><strong>Discovered tasks</strong>: Those you discover as you go.</li>
</ul>


<p>The tool they came up with to communicate progress are <a href="https://basecamp.com/features/hill-charts">Hill Charts</a>, and they look like this:</p>

<p>{% img center /images/posts/2019-09-29/hillChart1.png  600 ‘Hill Chart’ %}</p>

<p>As you can tell, it’s not (only) a function of pending tasks, but also of confidence in that all remaining tasks have been discovered.</p>

<p>{% img center /images/posts/2019-09-29/hillChart2.png 600 ‘Hill Chart 2’ %}</p>

<p>A good way of gaining confidence at the start of a project is to begin with the pieces that present the most uncertainty, and move them to the top of the hill first. Doing this before finishing the downhill stuff reduces the chances the project will be late.</p>

<hr />

<p>That’s all…</p>

<p>If you enjoyed the review, you’ll love the book. <a href="https://basecamp.com/shapeup">Go check it out!!</a></p>

<p> {% img right-fill /images/signatures/signature5.png 200 ‘My signature’ %}</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Not sure why they’re not referred to as PMs in the book<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphic Design Tools for Backend Engineers]]></title>
    <link href="http://jivimberg.io/blog/2019/06/07/graphic-design-tools-for-backend-engineers/"/>
    <updated>2019-06-07T22:14:38-07:00</updated>
    <id>http://jivimberg.io/blog/2019/06/07/graphic-design-tools-for-backend-engineers</id>
    <content type="html"><![CDATA[<p>You might think that being a backend engineer means you’ll never have to draw anything more complex than a bunch of boxes connected with arrows (or hexagons if are going all cloud native). This is simply not true, and that’s why you’re here.</p>

<p>At some point you’ll find yourself producing system diagrams, flow-charts, slides, mockups, maybe even icons! So, let me show you some tools and tricks I picked up over the years to fake it at design.</p>

<!--more-->


<h2>Hand-draw images</h2>

<p>Maybe you noticed that some of the drawings that I use on this website look like they where done by a 5 year old. Like this one:</p>

<p><a href="https://jivimberg.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines/">{% img center /images/posts/2019-06-18/consumerDiagram.png  800 ‘A hand drawing’ %}</a></p>

<p>I create these using <a href="https://products.office.com/en-us/onenote/digital-note-taking-app">Microsoft’s OneNote</a> on my wife’s <a href="https://www.microsoft.com/en-us/p/surface-pro-5th-gen/8nkt9wttrbjk?activetab=pivot:overviewtab">Surface Pro</a>. The app it’s somewhat basic, but it does one key thing: it lets you select your traces, move them around and scale them with simple gestures. And that’s really alI you need.</p>

<p>{% img center /images/posts/2019-06-18/surfacePro.jpg  600 ‘Drawing on a SurfacePro’ %}</p>

<p>Also you can drop any kind of file to OneDrop and draw on top of it.</p>

<p>{% img center /images/posts/2019-06-18/meFramed.png  200 ‘A doodle on my face’ %}</p>

<p>But, as I said, the Surface Pro is not mine, so I don’t get to take it to work. At the office I use a low-tech alternative: a <strong><a href="https://getrocketbook.com/">Rocketbook</a></strong>. It’s a notebook you can erase with water.</p>

<p>{% img center /images/posts/2019-06-18/rocketbook.gif ‘Rocketbook animation’ %}</p>

<p>The pages are from a plasticky material, but it feels pretty close to drawing on actual paper. And you get karma points for not needing dead trees to do your half-ass doodles.</p>

<p>The best thing is that it comes with an app that allows you to scan your drawings and configure an action based on an icon you mark on the page. This helps me digitalize all my notes in a breeze. I can sketch something quickly, take out my phone and share it in Slack in 2 seconds, and without having to shell out $1k for an iPad.</p>

<p>{% img center /images/posts/2019-06-18/slack.png ‘Slack conversation with drawing’ %}</p>

<p>My only complain is that you have to wait a couple of minutes for the pages to dry when you’re cleaning it. So cleaning the whole book might take you 15 or 20 minutes. But I only do this once a month so it’s not that big of a deal for me.</p>

<h2>System diagrams and Flowcharts</h2>

<p>Let’s face it, most of your diagrams will still be boxes, cylinders and stick-figures. You don’t want your wiki page or slides including an image like this:</p>

<p>{% img center /images/posts/2019-06-18/ugly-whiteboard.png  400 ‘Whiteboard image that looks ugly’ %}</p>

<p>Why not do it with style? Meet <strong><a href="https://whimsical.com">Whimsical</a></strong>. With this tool you’ll be able to spit beautiful diagrams in seconds. It’s deceptively simple. It has smart snap to grip and auto-grouping that at times feels like it’s reading your mind.</p>

<p>{% img center /images/posts/2019-06-18/whimsical.gif 800 ‘Whimsical demo’ %}</p>

<p>It can do flowcharts, mind maps, wireframes and sticky notes. The catch is you only get 4 <em>“boards”</em> for free. After that it’s $10 a month💰</p>

<p>If you don’t feel like paying you can always use <a href="https://www.draw.io/">draw.io</a>. It has Google Drive integration, and a wide variety of shapes for different types of diagrams (Flow-chars, UML, BPMN, etc).</p>

<p>Use the comic style to get your diagrams to look like this:</p>

<p><a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">{% img center /images/posts/2019-06-18/drawio.png  ‘Draw.io example’ %} </a></p>

<p><em>(This diagram is from my <a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">“Writing Githooks in Kotlin”</a> post)</em></p>

<p>If all you’re trying to create is a UML of your existing code then you should check <a href="https://www.jetbrains.com/help/idea/class-diagram.html">this Intellij feature</a> that gives you just that in a couple clicks.</p>

<p>{% img center /images/posts/2019-06-18/intellijUML.png 600 ‘UML diagram from Intellij’ %}</p>

<p>Similarly if you’re using Spring you can <a href="https://www.jetbrains.com/help/idea/spring-support.html">get a beans dependencies diagram</a> just as easily.</p>

<p>{% img center /images/posts/2019-06-18/beans-dependencies.png 600 ‘Beans dependencies diagram on Intellij’ %}</p>

<h2>Sharing snippets of code</h2>

<p>If you need to share a snippet of code you can create a Gist like this one: <a href="https://gist.github.com/jivimberg/8cae46cdb5b98c0d19176efcde2eadd9">sendForm.gs</a>. And you can easily embed them in a page:</p>

<p>{% gist 8cae46cdb5b98c0d19176efcde2eadd9 %}</p>

<p>Gist are great because they have version history, can be commented, forked and starred and you can group multiple files in a single Gist.</p>

<p>If you happen to be working with Kotlin you can also use <a href="https://play.kotlinlang.org/">Kotlin Playground</a>, this way you also get the ability to execute the code. Here is <a href="https://pl.kotl.in/_h-DbUrtj">an example</a>. You can also embed them as well, or better yet, <a href="https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/">include Kotlin playground as a script in your page</a> and have all your code blocks converted to runnable snippets.</p>

<xmp class="kotlin-code" theme="darcula">
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.consumeEach
import kotlinx.coroutines.channels.produce
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

//sampleStart
@ExperimentalCoroutinesApi
@UseExperimental(FlowPreview::class)
suspend fun main() {
    val time = measureTimeMillis {
        (1..10).asFlow()
            .parallelMap(3, 3) { delay(100); it * 2 }
            .collect { print("$it ") }
    }
    println()
    println("Execution time in millis: $time")
}
//sampleEnd

@kotlinx.coroutines.FlowPreview
@kotlinx.coroutines.ExperimentalCoroutinesApi
fun <T, R> Flow<T>.parallelMap(
    bufferSize: Int,
    concurrency: Int,
    transform: suspend (value: T) -> R
): Flow<R> {
    require(bufferSize >= 0) { "Expected non-negative buffer size, but had $bufferSize" }
    require(concurrency > 0) { "Expected concurrency level greater than 0, but had $concurrency" }

    return flow {
        coroutineScope {
            val inputChannel = produce {
                collect { send(it) }
                close()
            }

            val outputChannel = Channel<R>(capacity = bufferSize)

            // Launch $concurrency workers that consume from
            // input channel (fan-out) and publish to output channel (fan-in)
            val workers = (1..concurrency).map {
                launch {
                    for (item in inputChannel) {
                        outputChannel.send(transform(item))
                    }
                }
            }

            // Wait for all workers to finish and close the output channel
            launch {
                workers.forEach { it.join() }
                outputChannel.close()
            }

            // consume from output channel and emit
            outputChannel.consumeEach { emit(it) }
        }
    }
}
</xmp>


<p>Finally, if all you want is to show some highlighted code you can use <a href="https://carbon.now.sh">carbon.sh</a> to get a beautiful image of your source code, like this one:</p>

<p>{% img center /images/posts/2019-06-18/carbon.png  ‘Carbon.sh demo’ %}</p>

<h2>Presentations</h2>

<p>I’ve used a lot of <a href="https://prezi.com"><strong>Prezis</strong></a> in the past. If you’ve never seen a Prezi think a giant canvas where you drop stuff, and each slide is basically zooming to a different portion of the canvas. Here’s an example of a Prezi I did about the things I learned from <a href="https://www.coursera.org/learn/gamification">Coursera’s gamification course</a> by <a href="https://www.coursera.org/instructor/~226710">Kevin Werbach</a>.</p>

<iframe id="iframe_container" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" allow="autoplay; fullscreen" width="550" height="400" src="https://prezi.com/embed/uyg0exmhwbrn/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;landing_data=bHVZZmNaNDBIWnNjdEVENDRhZDFNZGNIUE43MHdLNWpsdFJLb2ZHanI5dkNTakxDRmJwb3czakswMFhxZHJkNGtRPT0&amp;landing_sign=YH6jqN1LpGyTSh-ze0MNsqdGvDrfivc-HRxIPrpG7H8"></iframe>


<p>It’s an awesome tool that adds a world of possibilities to your presentations. But, with time I understood that just throwing cool transitions doesn’t make your presentation that much better. As any good designer knows, <a href="https://material.io/design/motion/#principles">animations need to serve a purpose</a>. Prezi works best when you use its zooming effects to reinforce the ideas you’re trying to communicate, or to use the canvas layout so that viewers get a good sense on how the content is organized. If you combine this tools in a meaningful way you can create amazing presentations <a href="https://prezi.com/mgujrvianlqb/virtual-tour-ceva-logistics/">like this one</a>.</p>

<p>This days, though, if I need to throw a deck together quickly, I hit <a href="https://www.slidescarnival.com/"><strong>Slides Carnivals</strong></a>. I pick a template that matches the topic I’m covering, import it in Google Slides and start working on it. Only if I need some fancy animations I’d use Keynote (see next topic).</p>

<p>{% img center /images/posts/2019-06-18/slidesCarnival.png 800  ‘Slides carnival’ %}</p>

<p>Finally,  it doesn’t really matter which tools you use if you’re just going to cramp 3 paragraphs of text in a slide. And no, having bullet points doesn’t make it any better.  You need to <a href="https://zachholman.com/posts/slide-design-for-developers/">give your deck some ❤️</a>. But  that’s a topic for another day.</p>

<h2>Animations</h2>

<p>Animations can be super useful to visualize complex concepts. Specially on the backend world where much of our work consists of translating the mental model we have of the system into code. Creating visual cues, like animations, helps us communicate our intent in an unambiguous way.</p>

<p>Don’t believe me? Try explaining how the <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/index.html">different kinds of Kotlin channels</a> behave using just words. Then check this animation:</p>

<p>{% img center /images/posts/2019-04-18/Channels.gif  600 ‘Channels animation’ %}</p>

<p>You can create simple animations like this one 👆 on <strong><a href="https://www.apple.com/keynote/">Keynote</a></strong>. Using <em>Magic move</em> and playing around with the order you can create all kind of choreographed animations. When you’re satisfied with the result, <a href="https://support.apple.com/kb/PH28038?locale=en_US&amp;viewlocale=en_US">you can export your creation as a gif</a> and share it with the world.</p>

<h2>UI Mocks</h2>

<p>If you ever worked with non-tech people you know the importance of showing something. Just telling them about what a system will do or how it would look it’s not enough. They have to see it 👀. That’s why low-res mockups are so powerful. You can use a tool like <a href="https://balsamiq.com/">Balsamiq</a> to create something like this in minutes. And you can even make them interactive to show how different screens would connect to each other.</p>

<p>{% img center /images/posts/2019-06-18/balsamiq.png 600 ‘balsamic example’ %}</p>

<p>Whimsical also has wire-framing capabilities:</p>

<p>{% img center /images/posts/2019-06-18/whimsical-wireframe.png ‘Whimsical wireframe’ %}</p>

<p>If you’re looking for something more high-res checkout <a href="https://www.invisionapp.com">InVision</a>, that’s what all the cool kids are using this days.</p>

<h2>Logos, banners and more</h2>

<p><strong><a href="https://www.canva.com">Canva</a></strong> is probably the <strong>best design tools for non-designers</strong> you’ll find online, hands down.  I’ve used it for all kind of things. I’ve used it to create logos:</p>

<p>{% img center /images/posts/2019-06-18/Kassette.png 250 ‘Logo created in Canva’ %}</p>

<p>Presentations:</p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/">{% img left /images/posts/2019-06-18/Stability.jpg 225 &lsquo;Stability&rsquo; %} </a></p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/">{% img left /images/posts/2019-06-18/MinimizeAccessibility.jpg 225 &lsquo;Minimize Accessibility&rsquo; %}  </a></p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/">{% img /images/posts/2019-06-18/ImplVsInterface.jpg 225 &lsquo;Implementation Vs Interface&rsquo; %} </a></p>

<p>My resume:</p>

<p><a href="https://drive.google.com/file/d/12FKryxTfewr_QtvQtTDMJf-NwmuySY2k/view">{% img center /images/posts/2019-06-18/resume-1.png  500 ‘My Resume’ %}</a></p>

<p>Banners for <a href="https://play.google.com/store/apps/details?id=com.eightblocksaway.android.practicepronunciation&amp;hl=en_US">an Android app I wrote</a>:</p>

<p><a href="https://play.google.com/store/apps/details?id=com.eightblocksaway.android.practicepronunciation&amp;hl=en_US">{% img center /images/posts/2019-06-18/PracticePronunciation.png 400 ‘Practice pronunciation banner’ %}</a></p>

<p>And much, much more… Seriously, if you’ve never used it just go and check it out because it’s amazing, and super simple to use.</p>

<h2>Icons</h2>

<p>Check out the <a href="https://romannurik.github.io/AndroidAssetStudio/icons-generic.html">Icon generator</a>, part of the <a href="https://romannurik.github.io/AndroidAssetStudio/index.html">Android Asset Studio</a> tools put together by <a href="https://roman.nurik.net/">@Romanurik</a>. Specially if you’re doing something on Android.</p>

<h2>Bonus tips</h2>

<p><strong>Tip 1:</strong> Searching Google Images for some fancy image to drop into your diagram? Add <code>filetype:png</code> to your search to filter for PNG images. Also, make use the search tools to filter by color, size and license type!</p>

<p><strong>Tip 2:</strong> <strong><code>⌘ + Shift + 5</code></strong>. Screenshot everything. Screenshot your code in the IDE, screenshot multiple frames from a video and turn it into a gif, screenshot your drawings when the app you’re using doesn’t export to image (<a href="https://answers.microsoft.com/en-us/office/forum/office_2013_release-onenote/how-do-i-export-a-onenote-2013-page-as-an-image/825a08e3-f6c4-4d14-9e3e-c1ec54eb7b99?auth=1">I’m looking at you OneNote</a>). For example, for this post I wanted to create the photo border effect on my picture up there 👆. I knew Keynote had such effect but it’s not meant for image editing. So what did I do? I created a new slide with white background, drop my image, added the desired effect, <em>⌘ + Shift + 5 </em>, and voila! I know it’s hacky, but it gets the work done!</p>

<p><strong>Tip 3:</strong> Befriend graphic designers. Ask them what tools they use. Watch them work. Take note on how they dress.</p>

<p> {% img right-fill /images/signatures/signature2.png 200 ‘My signature’ %}</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
</feed>
