<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Collaboration | Coding Forest]]></title>
  <link href="http://jivimberg.io/blog/categories/collaboration/atom.xml" rel="self"/>
  <link href="http://jivimberg.io/"/>
  <updated>2023-09-12T19:44:25-07:00</updated>
  <id>http://jivimberg.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pulling an Inverse Conway Maneuver at Netflix]]></title>
    <link href="http://jivimberg.io/blog/2023/09/04/the-inverse-conway-maneuver/"/>
    <updated>2023-09-04T10:07:02-07:00</updated>
    <id>http://jivimberg.io/blog/2023/09/04/the-inverse-conway-maneuver</id>
    <content type="html"><![CDATA[<p>When I joined Netflix Platform team, a few years ago, the Observability offering was composed of many different applications. There was Atlas for metrics, Edgar for tracing, Radar for Logs and Alerts, Lumen for dashboards, Telltale for app health, to name a few. It was a portfolio of about 20 different apps, ranging from high-level business specific tools to analyze streaming sessions to low-level tools for CPU profiling.</p>

<!--more-->


<p>The Observability org was composed of three different teams of about a dozen ICs each. Teams had a mix of <em>front-end</em>, <em>back-end</em> and <em>full-stack</em> engineers, and there was one <em>designer</em> and one <em>PM</em> shared across the three teams. Each team was responsible for handful of applications, and it was common practice to form sub-teams . My team, for example owned Edgar and Telltale among a few other business specific tools.  [Talk about subteams inside each team]</p>

<p><img class="center /images/posts/2018-06-10/Darcula.png 720 <code>Darcula" src="theme</code>"></p>

<p>It is no coincidence that this org structure produced <em>a set of independent apps</em> to achieve its goal of serving the observability needs of the company. The force at play here is known as Conway&rsquo;s Law</p>

<blockquote><p>Organizations, who design systems, are constrained to produce designs which are copies of the communication structures of these organizations. <em>Melvin E. Conway</em></p></blockquote>

<p>In true Netflix fashion we operated as highly aligned, loosely coupled teams with a high level of independence. ICs owned the roadmap (which was aligned with the org&rsquo;s goals) and had final say in all technology and architecture decisions. Teams owned the full software lifecycle for each of the applications they maintained XXX</p>

<p>[Talk about team independence. Different PR practices, different deployment strategy, testing, support hour, different tech stacks, different ticketing system, etc.]</p>

<p><img class="right-fill" src="/images/signatures/signature1.png" width="200" title="‘My signature’" ></p>

<hr />

<p>“inverse Conway maneuver” (or reverse Conway maneuver), whereby an organization focuses on organizing team structures to match the architecture they want the system to exhibit rather than expecting teams to follow a mandated architecture design.10 — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=505">505</a> ^ref-26718</p>

<p>“If the architecture of the system and the architecture of the organization are at odds, the architecture of the organization wins.” — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=602">602</a> ^ref-30562</p>

<p>Communication paths (along formal reporting lines or not) within an organization effectively restrict the kinds of solutions that the organization can devise. — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=612">612</a> ^ref-39678</p>

<p>There is a logical implication of Conway’s law here, in the words of Ruth Malan: “if we have managers deciding &hellip; which services will be built, by which teams, we implicitly have managers deciding on the system architecture.” — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=696">696</a> ^ref-4372</p>

<p>(This makes me think bout hoa observability tem is designed to achieve the explore gol but not the bbckend unification through wide events. Which in my opinion is what we should be investing in, instead of just combining signAls on the front end.)</p>

<p>One key implication of Conway’s law is that not all communication and collaboration is good. Thus it is important to define “team interfaces” to set expectations around what kind of work requires strong collaboration and what doesn’t. Many organizations assume that more communication is always better, but this is not really the case. — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=713">713</a> ^ref-5352</p>

<p>“managers should focus their efforts on understanding the causes of unaddressed design interfaces &hellip; and unpredicted team interactions &hellip; across modular systems.” — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=717">717</a></p>

<p>Fast flow requires restricting communication between teams. Team collaboration is important for gray areas of development, where discovery and expertise is needed to make progress. But in areas where execution prevails—not discovery—communication becomes an unnecessary overhead. — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=797">797</a> ^ref-42424</p>

<p>The danger of allowing multiple teams to change the same system or subsystem is that no one owns either the changes made or the resulting mess. However, when a single team owns the system or subsystem, and the team has the autonomy to plan their own work, then that team can make sensible decisions about short-term fixes with the knowledge that they will be removing any dirty fixes in the next few weeks. — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=906">906</a> ^ref-8835
(This is why ownership is important)</p>

<p>Instead, teams should view themselves as stewards or caretakers as opposed to private owners. Think of code as gardening, not policing. — location: <a href="kindle://book?action=open&amp;asin=B09JWT9S4D&amp;location=915">915</a> ^ref-65338</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Platform Teams Get Shit Done]]></title>
    <link href="http://jivimberg.io/blog/2023/07/28/how-platform-teams-get-shit-done/"/>
    <updated>2023-07-28T00:43:59-03:00</updated>
    <id>http://jivimberg.io/blog/2023/07/28/how-platform-teams-get-shit-done</id>
    <content type="html"><![CDATA[<p><a href="https://thepete.net/">Pete Hodgson</a> explored the different ways in which a Platform team works with other teams to get shit done in <a href="https://martinfowler.com/articles/platform-teams-stuff-done.html">this article</a>. I thought it was interesting to see how collaboration changes based on the type of work, so I put together this visual summary to compare and contrast each type of interaction.</p>

<!--more-->


<p><a href="/images/posts/2023-07-28/how-platform-teams.png"><img class="center" src="/images/posts/2023-07-28/how-platform-teams.png" width="600"></a>
<em class="img-caption">Click image to enlarge</em></p>

<p>I added a few things here and there, but most of the stuff is taken from the <a href="https://martinfowler.com/articles/platform-teams-stuff-done.html">original article</a>, so if you care about this topic I recommend you check it out!</p>

<p>I found particularly interesting the realization that migrations are hard because <strong>the team that owns the code that needs changing is not the one driving the migration.</strong> This creates a situation of misaligned incentives and makes it a socio-technical problem. The article describes the different ways the teams can collaborate to get it done, but it’s also important to understand the tools a platform team has to remove this friction in the first place, things like <a href="https://medium.com/nerd-for-tech/microservice-design-pattern-sidecar-sidekick-pattern-dbcea9bed783">sidecars</a>, <a href="https://konghq.com/learning-center/service-mesh/what-is-a-service-mesh#:~:text=Service%20mesh%20is%20a%20technology,it%20can%20be%20managed%20independently.">meshes</a> and <a href="https://blog.thepete.net/blog/2020/09/25/service-templates-service-chassis/">service chasis</a>.</p>

<p>I also included a section on how Google does Large-Scale Changes (LSC). They created a tool that allows anybody to submit Large-Scale Changes that are applied across the whole codebase. They advocate for the approach of centralizing the migration, to the point where most changes are reviewed by a single expert, and local teams hold no veto power over the LSC. They rely on code analysis and transformation tools to write the LSC and have a test infrastructure to automatically run all tests that a given change might affect in an efficient manner. To read more about their approach refer to <a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791">Software Engineering at Google</a> Chapter 14.</p>

<p><img class="right-fill" src="/images/signatures/signature7.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
</feed>
