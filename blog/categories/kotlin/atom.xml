<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2018-10-24T23:27:21-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reactive GraphQL Subscriptions From Kafka]]></title>
    <link href="http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka/"/>
    <updated>2018-10-23T07:58:14-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka</id>
    <content type="html"><![CDATA[<p>In this post I’ll be exploring how to implement <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">GraphQL subscriptions</a> <em>reactively</em> on a Spring Boot application using <a href="https://kafka.apache.org/">Kafka</a>.</p>

<!--more-->


<h1>The use case</h1>

<p>So, <em>what are we trying to achieve?</em> We want to provide <strong>a way for clients to get notified</strong> whenever an event occurs in the application.</p>

<p>The GraphQL way of doing this is through a <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">Subscription</a>. For the application events we’re using Kafka. So all we are trying to do is to tie those 2 things so that <strong>whenever an event pops up in Kafka all clients with an active subscription get notified</strong>.</p>

<p><img class="center" src="/images/posts/2018-10-24/SubscriptionFlow.png" width="700" title="‘Subscription flow diagram’" ></p>

<h1>The setup</h1>

<p>Let’s introduce the different pieces of the puzzle:</p>

<ol>
<li>I have a <a href="https://spring.io/guides/gs/spring-boot/">Spring Boot application</a> that has some business logic.</li>
<li>Using <a href="https://github.com/graphql-java-kickstart/graphql-spring-boot"><code>graphql-spring-boot-starter</code></a> I’m exposing my service through a GraphQL API. <strong>One of those endpoints it’s going to be a Subscription endpoint.</strong> It’s schema definition looks something like this:</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">type</span> <span class="n">Subscription</span> <span class="o">{</span>
</span><span class='line'> <span class="nl">event:</span> <span class="n">EventMessage</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>On the other end I have a <a href="https://kafka.apache.org/documentation/#intro_topics">Kafka topic</a> with events that a user might be interested in. We plan to use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to <strong>consume the events through a reactive stream</strong>.</li>
</ol>


<p><img class="center" src="/images/posts/2018-10-24/Setup.png" width="800" title="’Setup diagram’" ></p>

<p>So the challenge is: <em>how do we connect all this pieces together?</em></p>

<h1>Reactive all the way</h1>

<p>To implement the resolver <a href="https://github.com/graphql-java-kickstart/graphql-java-tools">GraphQL Java Tools</a> <strong>requires that we implement a function that returns a <code>Publisher&lt;T&gt;</code></strong>. Where <em>T</em> is the type of event to be pushed to the subscriber. From <a href="https://github.com/graphql-java/graphql-java">GraphQL Java</a> documentation:</p>

<blockquote><p>What is special is that the initial result of a subscription query is a <strong>reactive-streams Publisher object</strong> which you need to use to get the future values.</p></blockquote>

<p>On the other end <strong>we can use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to create a reactive Receiver</strong> to consume the events from the topic. Then all that’s left is <strong>obtaining a <code>Publisher</code> from this receiver so that clients can subscribe to it</strong>. This is all the code we need:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import graphql.schema.DataFetchingEnvironment
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import reactor.core.publisher.Flux
import reactor.kafka.receiver.KafkaReceiver
import reactor.kafka.receiver.ReceiverOptions

@Component
class SubscriptionsResolverImpl(
    receiverOptions: ReceiverOptions<String, EntityUpdated>                 // Receiver configuration. Injected by Spring
) : SubscriptionsResolver {

    private val logger = LoggerFactory.getLogger(javaClass)

    private val kafkaReceiver: Flux<GraphqlEvents.Update> by lazy {         // Use lazy to delay KafkaReceiver initialization
        KafkaReceiver.create(receiverOptions).receive()                     // Create Kafka reactive receiver
            .map { GraphqlEvents.Update.fromEvent(it.value()) }             // Map from Kafka event to Graphql Event
            .doFinally { logger.info("Closing with signal: ${it.name}") }   // Log message on stream closure
            .publish()                                                      // Get a ConnectableFlux. Turns stream to hot
            .autoConnect()                                                  // Connect to upstream on first subscription
    }

    override fun event(env: DataFetchingEnvironment): Publisher<GraphqlEvents.Update> {
        logger.info("GraphQL 'event' subscription called")                  // Log message on each new subscription
        return kafkaReceiver                                                // Returns kafkaReceiver for GraphQL to subscribe to it
    }
}
</xmp>


<p>Just to recap. We are <strong>creating a Kafka Receiver</strong> for the topic we care about (the topic configuration is part of the <code>receiverOptions</code> object, not shown in the snippet).</p>

<p>We are <strong>mapping the event</strong> from the <em>Kafka model</em> to the <em>GraphQL model</em> through the <code>map()</code> method.</p>

<p>Then we are turning the receiver into a hot stream by calling <code>publish()</code>. We are doing this because <strong>we want new subscribers to only see events that happened after they subscribed to the <code>Publisher</code></strong>. And that’s exactly what <code>publish()</code> does. In fact if you pay close attention to the marble diagram of the <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#publish--">method documentation</a> you’ll notice how <strong>it looks pretty similar to our use case flow diagram.</strong></p>

<p><img class="center" src="/images/posts/2018-10-24/publish.png" width="500" title="‘Publish marble diagram’" ></p>

<p>We’re calling <code>autoConnect()</code> so that it connects to the upstream source as soon as the first <code>Subscriber</code> subscribes.</p>

<p>Finally we’re implementing the <code>event</code> function <strong>by simply returning the reference to our hot stream of events</strong>. Whenever a new client calls the Subscription endpoint <strong>GraphQL Java will subscribe to this stream</strong> and send a message for every new event that shows up in the configured Kafka topic.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Using Gradle With Kotlin DSL]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl/"/>
    <updated>2018-08-28T08:36:57-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl</id>
    <content type="html"><![CDATA[<p>Since Gradle 3.0 you can <a href="https://blog.gradle.org/kotlin-meets-gradle"><strong>write your build scripts using Kotlin instead of Groovy</strong></a>. I was curious, so I decided to give it a try. Here are my thoughts on the process.</p>

<!--more-->


<h1>Why?</h1>

<p>Ok, we can write our build scripts in Kotlin, but you might be wondering: <em>”why would I want to do that?”</em> Here are my reasons:</p>

<h2>1. All things Kotlin</h2>

<p>Our backend codebase is <em>mostly written in Kotlin</em>. We even wrote our <a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">githooks using Kotlin scripts!</a> So it was only natural to use Kotlin on our build tools too.</p>

<p>Being able to use the same language across the stack means that your learning efforts pays double. This way <strong>the team doesn’t have to learn a new language just to write a simple Gradle task.</strong> And as an added bonus you can apply <em>the same testing, coverage and code inspection tools</em> that you use in production to your tooling code.</p>

<h2>2. IDE support</h2>

<p>The second reason for making the transition was IDE support. Groovy is a dynamically typed language, which makes it harder for the IDE to provide accurate code completion and script validity through type checks. Kotlin being statically typed doesn’t suffer from the same problems</p>

<p><img class="center" src="/images/posts/2018-09-11/kotlin-code-completion.png" title="‘Kotlin code completion’" ></p>

<h2>3. Interoperability</h2>

<p>As you probably know <a href="https://kotlinlang.org/docs/reference/java-interop.html">Kotlin was designed with Java interoperability in mind</a>. And the same interoperability <a href="">extends to Groovy code</a>.</p>

<p>This interoperability let us <strong><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy_2">call Groovy code from Kotlin</a> and <a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy">viceversa</a></strong>. Which effectively means that you can have <strong>a mix of both Groovy and Kotlin scripts working together in the same project</strong>. So no need to migrate all your build scripts at once, or to push stubborn <em>“Wally”</em> to learn Kotlin DSL.</p>

<p><img class="center" src="/images/posts/2018-09-11/wally2.png" title="‘Wally’" ></p>

<h1>The exodus</h1>

<p><em>”So how painful was the migration?”</em> It wasn’t that bad really. Kotlin DSL was designed to be pretty similar to the classic <code>build.gradle</code> files.</p>

<p>You’ll just have to <strong>push through that first moment</strong> when nothing seems to be working, your project doesn’t compile at all, and you know you’re a <code>⌘ + Z</code> away from a pristine working copy. <em>But you can&rsquo;t make an omelet without breaking a few eggs, can you?</em></p>

<p><img class="center" src="/images/posts/2018-09-11/panic.png" title="‘Panic!’" ></p>

<p><strong>I just wish there was some kind of automatic migration action in IntelliJ.</strong> Even if it’s a best effort that leaves you half way there, I’d greatly appreciate it. Ideally it should work just like when you paste some Java code into a Kotlin file: <code>⌘ + V</code> + ✨<em>fairy dust</em>✨ and you have your <code>build.gradle.kts</code> ready to go.</p>

<h3>Resources</h3>

<p>This are the resources that help me complete the migration. Hopefully you’ll find them helpful too.</p>

<ul>
<li><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/"><strong>Official Gradle migration guide</strong></a> <strong>Start here!</strong> You don’t have to cover the whole thing but you can skim through it and later go back to the section you need.</li>
<li><a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/"><strong>Samples in the Kotlin DSL repo</strong></a> This is <strong>the go-to place for Kotlin DSL samples</strong>. You’ll find yourself coming back to this repo over and over. Be sure to search the <em>Issues</em> section too.</li>
<li>For the times when the <a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/">Kotlin DSL repo</a> doesn’t have what you’re looking for, I find it useful to use <a href="https://github.com/search/advanced"><strong>Github Search</strong></a> looking for code in files with <code>*.kts</code> extension.</li>
<li><a href="https://github.com/jnizet/gradle-kotlin-dsl-migration-guide"><strong>jnizet/gradle-kotlin-dsl-migration-guide</strong></a> this is another migration guide that has proven useful in the past.</li>
<li>Finally I followed <a href="https://handstandsam.com/2018/02/11/kotlin-buildsrc-for-better-gradle-dependency-management/"><strong>this article</strong></a> by <a href="https://handstandsam.com/about-me/">Handstand Sam</a> to do <em>dependency management</em> on out multi-module project.</li>
</ul>


<h1>The not so good</h1>

<h2>1. <em>“I can’t just copy-past things from Stack Overflow”</em></h2>

<p><img class="center" src="/images/posts/2018-09-11/copy-paste.jpg" width="250" title="‘Copy paste from Stack Overflow’" ></p>

<p>This is <strong>by far the biggest drawback</strong>. In my experience most teams have one or two <em>”build tool experts”</em>. The rest of the team just use a few tasks and maybe add a dependency every now and then. This casual user might have a harder time using Kotlin DSL because <strong>copy-pasting pieces of code from the web will not work out of the box</strong>. Converting this snippets to Kotlin DSL is not rocket-science, but in some cases it might require some basic level of understanding of how Kotlin DSL works.</p>

<p>This is specially true when using plugins that were not designed with Kotlin DSL in mind (I’m looking at you <a href="https://github.com/google/protobuf-gradle-plugin/issues/219">protobuf Gradle plugin</a>).</p>

<h2>2. IDE support could be better</h2>

<p>Remember all the nice things I said about IDE auto-completion on the build scripts? Well let me clarify: <em>“IDE support is awesome… most of the time”</em>.</p>

<p>Once you have your script fully migrated and IntelliJ has finished indexing then everything should work just fine. But to get there you’ll have to have your full <code>build.gradle</code> script fully migrated. That’s why my advice is to <strong>comment everything out and start migrating piece by piece</strong>. For example you can start with configuring the <em>repositories</em>, and <em>plugins</em> and only then move to <em>dependencies</em>.</p>

<p>This gets intensified if you are working on a <a href="https://guides.gradle.org/creating-multi-project-builds/">multi-module project</a> and/or you’re using <a href="https://docs.gradle.org/current/userguide/custom_plugins.html"><code>buildSrc</code> for custom plugins</a>.</p>

<p>The silver lining is that IDE support is getting better with each release, and once you’ve migrated everything it mostly works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JaCoCo &amp; Kotlin: Coverage on Generated Code]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/12/jacoco-and-kotlin-coverage-on-generated-code/"/>
    <updated>2018-08-12T21:26:43-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/12/jacoco-and-kotlin-coverage-on-generated-code</id>
    <content type="html"><![CDATA[<p>JaCoCo works <em>flawlessly</em> with Kotlin. Except when it reports lines not covered on generated code 😡. Fortunately there’s a fix already in place.</p>

<!--more-->


<hr />

<h3><em>Update 08/26:</em> <strong>JaCoCo 0.8.2 has now officially been released</strong> 👏 No need to use the <em>0.8.2-SNAPSHOT</em> anymore.</h3>

<hr />

<p><img class="center" src="/images/posts/2018-08-12/JaCoCo-before.png" width="720" title="’JaCoCo before’" ></p>

<p><blockquote><p>What!? I didn’t even write those functions! There’s no way I’m writing tests for them. I’m pretty sure the compiler knows what it’s doing…</p><footer><strong>Me</strong> <cite>Every Time I Saw the Coverage Report</cite></footer></blockquote></p>

<p>Good news is that this <a href="https://github.com/goodwinnk">has been fixed</a> in the latest JaCoCo release (thanks to <a href="https://github.com/goodwinnk">goodwink</a>). Bad news is that <strong>0.8.2 is not out yet</strong> 😞</p>

<p>If you are like me, and can’t wait to get this working, you can <strong>use the SNAPSHOT version of JaCoCo</strong> making this changes on your <code>build.gradle</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">repositories</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="n">maven</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span><span class="p">&gt;</span><span class="n">https</span><span class="p">:</span><span class="c1">//oss.sonatype.org/content/repositories/snapshots&lt;/a&gt;&amp;rdquo;)</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">jacoco</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">toolVersion</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="m">0.8</span><span class="p">.</span><span class="m">2</span><span class="p">-</span><span class="n">SNAPSHOT</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><em>(I’m using <a href="https://github.com/gradle/kotlin-dsl">Gradle with Kotlin DSL</a> in this example)</em></p>

<p>Now you can finally take your Kotlin coverage to 100% without having to write tests for <code>component1()</code> and <code>component2()</code>.</p>

<p><img class="center" src="/images/posts/2018-08-12/JaCoCo-after.png" width="720" title="’JaCoCo after’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hierarchical Queries on RDBMS With JPA]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/04/recursive-queries-on-rdbms-with-jpa/"/>
    <updated>2018-08-04T11:29:52-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/04/recursive-queries-on-rdbms-with-jpa</id>
    <content type="html"><![CDATA[<p>Hello! In this post I’ll explore the different alternatives for querying hierarchical data stored on a RDBMS using <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html">JPA</a>.</p>

<!--more-->


<h1>What are we trying to do?</h1>

<p>Let’s use a silly example to illustrate what we are trying to achieve. Say we want to model <strong>mother-daughter relationships</strong>, we can do so with an entity like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany

//sampleStart
@Entity
data class Woman (
    val name: String,
    @OneToMany(cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

\~</xmp>


<p>In OO-talk that’s just one Type with a reference to itself like this:</p>

<p><img class="center" src="/images/posts/2018-08-04/UML.jpg" width="240" title="’UML’" ></p>

<p>And once we start creating a bunch of mothers, we’ll get a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a>. Although for this example, and to keep things simple, <strong>we’ll just model the offspring of just one single person</strong> so we get a nice tree like this:</p>

<p><img class="center" src="/images/posts/2018-08-04/tree.jpg" width="480" title="’Tree’" ></p>

<p>But in DB this is stored in <strong>2 tables</strong>. One contains the Woman data and the other one the relationships.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;table>
</span><span class='line'>&lt;thead>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;th> Id &lt;/th>
</span><span class='line'>&lt;th> Name   &lt;/th>
</span><span class='line'>&lt;th>       &lt;/th>
</span><span class='line'>&lt;th> Woman_Id &lt;/th>
</span><span class='line'>&lt;th>  Daughters_Id &lt;/th>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/thead>
</span><span class='line'>&lt;tbody>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 1        &lt;/td>
</span><span class='line'>&lt;td> 2             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 1        &lt;/td>
</span><span class='line'>&lt;td> 3             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 2        &lt;/td>
</span><span class='line'>&lt;td> 4             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 2        &lt;/td>
</span><span class='line'>&lt;td> 5             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 3  &lt;/td>
</span><span class='line'>&lt;td> Carol  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 3        &lt;/td>
</span><span class='line'>&lt;td> 6             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 4  &lt;/td>
</span><span class='line'>&lt;td> Linda  &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 5  &lt;/td>
</span><span class='line'>&lt;td> Betty  &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 6  &lt;/td>
</span><span class='line'>&lt;td> Lisa   &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/tbody>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>We’ll focus in just one single type of query, namely:</p>

<blockquote><p><em>Find a node and return the whole subtree underneath</em></p></blockquote>

<p>Or in domain specific terms:</p>

<blockquote><p><em>Find a woman and return her along with her offspring</em></p></blockquote>

<h1>Alternatives</h1>

<p>Let’s explore our options. For the following examples I’ll be using <a href="https://kotlinlang.org/">Kotlin</a>, <a href="http://projects.spring.io/spring-data/">Spring Data</a>, <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html">JPA</a>, <a href="http://hibernate.org/">Hibernate</a> and an <a href="https://www.oracle.com/database/index.html">Oracle Database</a>. Thanks to JPA you’ll notice that most of the time <strong>the solutions provided work on whatever you’ve decided to use</strong> (I’ll note it when it’s not the case). You can use Java instead of Kotlin, Eclipselink instead of Hibernate and MySQL instead of Oracle, and even abandon Spring completely.</p>

<p>Because this is meant to be a formative post <strong>I’ll start with some of the “wrong” approaches first</strong> and explain its downsides. If you’re in a rush you can just scroll to the bottom 😃</p>

<h2>Eager fetching</h2>

<p>The simplest solution is using <a href="https://www.thoughts-on-java.org/entity-mappings-introduction-jpa-fetchtypes/">Eager fetching</a>. We can enable eager fetching specifying the <code>fetch</code> parameter on the <code>@OneToMany</code>  annotation like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany

//sampleStart
@Entity
data class Woman (
    val name: String,
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

</xmp>


<p>Great, it works! But wait, <em>why do I see so many SELECT calls to the database?</em> As you’ve probably figured out the issue with this approach is that it falls in the <a href="https://stackoverflow.com/questions/97197/what-is-the-n1-select-query-issue">N + 1 SELECT problem</a>.</p>

<p>Some authors even go as far as considering <a href="https://vladmihalcea.com/eager-fetching-is-a-code-smell/">eager fetching a <strong>code smell</strong></a>. In the words of <a href="https://vladmihalcea.com/about/">Vlad Mihalcea</a> (emphasis mine):</p>

<blockquote><p>The EAGER fetching strategy is a code smell. Most often it’s used for simplicity sake without considering the long-term performance penalties. The fetching strategy <strong>should never be the entity mapping responsibility</strong>. Each business use case has different entity load requirements and therefore the fetching strategy should be delegated to each individual query.</p></blockquote>

<h2>Using <code>join fetch</code></h2>

<p>Another alternative would be to use <code>join fetch</code> as part of the JPQL query.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
fun findWomanUsingJoinFetch(id: Long): Woman? {
        return em.createQuery("select distinct w from Woman w left join fetch w.daughters", Woman::class.java)
        .resultList
        .find { it.id == id }
}
</xmp>


<p>With <code>join fetch</code> we can tell JPA to do a <code>join</code> to execute the query and also include the data as part of the response object when mapping to the OO world.</p>

<p>The <em>huge downside</em> is that we’re actually <strong>querying ALL women</strong>  and only then selecting the one we were looking for from the <code>resultList</code>. This means that, unless you’re querying for the root node, <strong>you’ll always be doing extra work</strong>.</p>

<p>And no, a <code>where</code> clause can’t help us here. Using <code>where w.id = :id</code> would leave us with just the root and one level of descendants in the <em>resultList</em>.</p>

<p>Unfortunately <strong>I couldn’t find a way of making this a single JPQL query</strong>.  <a href="https://vladmihalcea.com/about/">Vlad Mihalcea</a> has a <a href="https://vladmihalcea.com/hibernate-facts-multi-level-fetching/">great article</a> explaining how to use <code>join fetch</code> to query all the leaves of the tree and then build the associations all the way up the entity hierarchy. Sadly we can’t apply the same approach here because we’re querying a <em>multi-level homogeneous tree</em>. That means that <strong>all the nodes are of the same type, and thus mapped to the same table,</strong> and furthermore leaves can be N levels deep. So if we try Vlad’s approach we’d end up with the similar <strong><code>where</code> problem</strong> mentioned above.</p>

<h2>Entity graph</h2>

<p>Another proposed solution is to use <a href="https://docs.oracle.com/javaee/7/tutorial/persistence-entitygraphs001.htm">Entity Graphs</a> introduced in <em>JPA 2.1</em>. You can use Entity Graphs as a query hint to <strong>specify which fields you want eagerly fetched as part of the query</strong>.</p>

<blockquote><p>Entity graphs have attributes that correspond to the fields that will be eagerly fetched during a find or query operation</p></blockquote>

<p>They come in 2 flavors. Static through annotations:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.FetchType
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.NamedAttributeNode
import javax.persistence.NamedEntityGraph
import javax.persistence.NamedEntityGraphs
import javax.persistence.NamedSubgraph
import javax.persistence.OneToMany

//sampleStart
@Entity
@NamedEntityGraphs(
    NamedEntityGraph(name = "womanWithDaughters",
        attributeNodes = [NamedAttributeNode(value = "daughters", subgraph = "daughterWithDaughters")],
        subgraphs = [
            NamedSubgraph(
                name = "daughterWithDaughters",
                attributeNodes = [NamedAttributeNode("daughters")]
            )
        ]
    )
)
data class Woman (
//sampleEnd
    val name: String,
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
</xmp>


<p>Or you can construct the graph <strong>programmatically</strong> to have some more flexibility:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
fun findWomanUsingEntityGraph(id: Long): Woman {
    val graph = em.createEntityGraph(Woman::class.java)
        .also { it.addSubgraph<Woman>("daughters") }
    return em.find(Woman::class.java, id, mapOf("javax.persistence.loadgraph" to graph))
}
</xmp>


<p>I thought: <em>“This is it IT! If I can manually build the graph for each query I can even specify how many levels deep I want to go”</em>. But once again, it didn’t quite work 😞</p>

<p>I tried creating graphs with subgraphs N levels deep but <strong>the query would just ignore them and only fetch up to 2 levels</strong>. From the annotations flavor this limitation is clear since:</p>

<ol>
<li>You can’t use a subgraph reference on an attribute of the same graph recursively (it’ll fail at runtime)</li>
<li>And <code>@NamedSubgraph</code> can’t have other <code>subgraphs</code> defined underneath.</li>
</ol>


<p>I was hoping this would be possible through the API, but apparently it’s not. Maybe Hibernate is to blame here, I don’t really know… But <em>I couldn’t find any documentation beyond the basic 2 level example</em>.</p>

<h2>Using <code>@BatchSize</code></h2>

<p>Going back to the Eager Fetch approach, we hated it because it resulted in N queries where N is the number of Women in the table. <strong>With  <code>@BatchSize</code> we can mitigate this</strong>.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
data class Woman(
    val name: String,
    @BatchSize(size = 10)
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
</xmp>


<p>By setting the batch size to 10 we’re basically saying: <em>“Since you’re going to the DB to execute a query bring up to 10 elements instead of just one”</em>. Effectively <strong>reducing the number of roundtrips to the database</strong>.</p>

<p><code>@BatchSize</code> is a <a href="https://docs.jboss.org/hibernate/orm/5.3/javadocs/org/hibernate/annotations/BatchSize.html">Hibernate specific annotation</a> but on Eclipselink you can use <a href="http://www.eclipse.org/eclipselink/documentation/2.5/jpa/extensions/q_batch_size.htm"><code>eclipselink.batch.size</code></a> to achieve the same result. In fact, remember that as a rule of thumb  <strong>it’s better to apply this kind of configurations to the query</strong> instead of using an annotation on the entity.</p>

<h2>Connect by (Best solution!)</h2>

<p>If you’re using Oracle then we can solve this using a native query with <a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm"><code>CONNECT BY</code></a>. Turns out this clause was created specifically for <strong>selecting rows in hierarchical order</strong>.</p>

<p><img class="center" src="/images/posts/2018-08-04/connectby.gif" title="’Connect by syntax’" ></p>

<p>We use <code>START WITH</code> to specify the root node of the hierarchy, and then <code>CONNECT BY</code> to specify the relationship between rows. Our query would look like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">w</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">wd</span><span class="p">.</span><span class="n">daughters_id</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">woman</span> <span class="n">w</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">woman_daughters</span> <span class="n">wd</span> <span class="k">ON</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">wd</span><span class="p">.</span><span class="n">woman_id</span>
</span><span class='line'><span class="k">START</span> <span class="k">WITH</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="o">?</span><span class="mi">1</span>
</span><span class='line'><span class="k">CONNECT</span> <span class="k">BY</span> <span class="k">PRIOR</span> <span class="n">wd</span><span class="p">.</span><span class="n">daughters_id</span> <span class="o">=</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note how in the <code>CONNECT BY</code> clause we use <code>PRIOR</code> to refer to the parent row.</p>

<p>This achieves exactly what we want <strong>in just one query!</strong>. But this doesn’t come for free. By using native queries we are stepping out of the <em>JPA magical world™</em>. This means that what the query returns is not an object but a list of rows of the form:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;table>
</span><span class='line'>&lt;thead>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;th> Id &lt;/th>
</span><span class='line'>&lt;th> Name   &lt;/th>
</span><span class='line'>&lt;th> Daughters_id &lt;/th>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/thead>
</span><span class='line'>&lt;tbody>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td> 2            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td> 3            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td> 4            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td> 5            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 3  &lt;/td>
</span><span class='line'>&lt;td> Carol  &lt;/td>
</span><span class='line'>&lt;td> 6            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 4  &lt;/td>
</span><span class='line'>&lt;td> Linda  &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 5  &lt;/td>
</span><span class='line'>&lt;td> Betty  &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 6  &lt;/td>
</span><span class='line'>&lt;td> Lisa   &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/tbody>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>So we’ll have to write the code to transform this back to our domain model. To achieve this I used the <code>@SqlResultSetMapping</code> to model the native query result.</p>

<xmp class="kotlin-code" theme="darcula"data-highlight-only>
    import javax.persistence.CascadeType
import javax.persistence.ColumnResult
import javax.persistence.ConstructorResult
import javax.persistence.Entity
import javax.persistence.EntityManager
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany
import javax.persistence.SqlResultSetMapping

//sampleStart
data class WomanWithRef(
    val id: Long,
    val name: String,
    val fieldsId: Long?
)

@Entity
@SqlResultSetMapping(
    name = "WomanWithRef",
    classes = [
        ConstructorResult (
            targetClass = WomanWithRef::class,
            columns = [
                ColumnResult(name = "id", type = Long::class),
                ColumnResult(name = "name", type = String::class),
                ColumnResult(name = "daughters_id", type = Long::class)
            ]
        )
    ]
)
data class Woman(
    val name: String,
    @OneToMany(cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

</xmp>


<p>And we can finally write the query like this:</p>

<xmp class="kotlin-code" theme="darcula"data-highlight-only>
//sampleStart
fun findTypeWithConnectBy(id: Long): Woman {
    val results: List<WomanWithRef> = em.createNativeQuery(
        """   
            SELECT w.id, w.name, wd.daughters_id
            FROM woman w
            LEFT JOIN woman_daughters wd ON w.id = wd.woman_id
            START WITH w.id = ?1
            CONNECT BY PRIOR wd.daughters_id = w.id
        """.trimIndent(), "TypeWithRefMapping")
        .setParameter(1, id)
        .resultList as List<WomanWithRef>
    return buildGraph(results, id)
}

//sampleEnd
fun buildGraph(queryResult: List<WomanWithRef>, id: Long): Woman {
    val rows = queryResult { it.id == id }
    val firstRow = rows.first()

    val fields = if (rows.size == 1 && firstRow.daughterId == null) {
        mutableSetOf()
    } else {
        rows.mapNotNull { it.daughterId }
            .map { buildGraph(queryResult, it) }
            .toMutableSet()
    }

    return Woman(firstRow.name, fields, id)
}

</xmp>


<p>Using the <code>buildGraph</code> function to traverse the query result and reconstruct the root <code>Woman</code> object.</p>

<p>If you’re using <code>HibernateCallback</code> here’s another way of writing the result mapping: <a href="https://docs.spring.io/spring/docs/2.0.x/javadoc-api/org/springframework/orm/hibernate/HibernateCallback.html">https://docs.spring.io/spring/docs/2.0.x/javadoc-api/org/springframework/orm/hibernate/HibernateCallback.html</a></p>

<p><strong>If you’re not using Oracle</strong> (or some other DB that supports <code>CONNECT BY</code>) you can do recursive queries using <a href="https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL#Common_table_expression">Common Table Expression (CTE)</a> to achieve a similar result.</p>

<h1>Is RDBMS right for you?</h1>

<p>If you find yourself bending over backwards to make this graph-like queries work, or if you need a query language that will let you express something like:</p>

<blockquote><p><em>Find all women whose great-grandmother is named Carol and have at least one descendant named Brenda</em></p></blockquote>

<p>Then <strong>maybe you should consider your options beyond RDBMS</strong>. You can take a look at graph databases such as <a href="https://neo4j.com/">Neo4j</a> and get familiar with it’s <a href="https://neo4j.com/developer/cypher-query-language/">query language</a>. Or, if you’re not ready to make the jump but want to explore a graph API on top of your relational data you should take a look at <a href="http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/index.html">Oracle Spatial and Graph</a>.</p>

<hr />

<p><em>Phew!</em> that was a long one… Hope you find it useful!</p>

<p>If you know of a better way of doing this kind of queries I’d love to hear about it, leave me a comment down here👇 or just <a href="https://twitter.com/jivimberg">ping me on Twitter</a>.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Githooks in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2018/07/03/writing-githooks-in-kotlin/"/>
    <updated>2018-07-03T19:45:28-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/07/03/writing-githooks-in-kotlin</id>
    <content type="html"><![CDATA[<p>You’re already using Kotlin on your codebase. Maybe, you’ve even migrated to the new <a href="https://github.com/gradle/kotlin-dsl">Kotlin DSL for Gradle</a>. Wouldn’t it be nice if you could use Kotlin for your <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a> too?</p>

<!--more-->


<p><strong>Well, turns out you can!</strong> Here’s how you do it…</p>

<p><img class="center" src="/images/posts/2018-07-04/captain-hook.png" title="’Captain githook’" ></p>

<h2>What do I need?</h2>

<p>Git will basically run whatever script you drop on the <code>.git/hooks</code> directory. In their words:</p>

<blockquote><p>To enable a hook script, put a file in the hooks subdirectory of your <code>.git</code> directory that is named appropriately (without any extension) and is executable</p></blockquote>

<p>So all we need is to be able to execute Kotlin files as scripts. There is a <a href="https://github.com/Kotlin/KEEP/blob/scripting/proposals/scripting-support.md">Kotlin Scripting Support KEEP</a> under definition. But for the time being <strong>we’ll stick with the awesome <a href="https://github.com/holgerbrandl/kscript">KScript library</a> (by <a href="https://github.com/holgerbrandl">@holgerbrandl</a>)</strong> that enables Kotlin scripting on <em>*nix-based</em> systems.</p>

<p>You can find the details for installing KScript <a href="https://github.com/holgerbrandl/kscript#installation">here</a>. On MacOS if you’re using <a href="https://brew.sh/">Homebrew</a> all you have to do is run: <code>brew install holgerbrandl/tap/kscript</code>.</p>

<p>I’ll also be using <strong>Gradle</strong> to automatically install the githook and run the proper validation, but the same can be done with <strong>Maven</strong>.</p>

<h2>The script</h2>

<p>As an example I’m going to show how to do a <strong>pre-push client hook</strong> that aborts the push if <code>grade check</code> task is not successful. For this I’ve created a file named <code>Pre-Push.kts</code>:</p>

<xmp class="kotlin-code" data-highlight-only>
//sampleStart
#!/usr/bin/env kscript

import java.io.File

println("${Constants.SCRIPT_LOG_TAG} Running pre-push hook")
val hasStashed = stash()
if (hasStashed) {
    println("${Constants.SCRIPT_LOG_TAG} Stashing uncommited changes")
}

val checkExistStatus = runCheck()

if (hasStashed) {
    println("${Constants.SCRIPT_LOG_TAG} Unstashing your changes")
    unstash()
}

val exitValue = when {
    checkExistStatus != Constants.SUCCESS_EXIT_VALUE -> {
        println("${Constants.SCRIPT_LOG_TAG} Gradle check failed. I'm sorry but you can't continue with your push")
        Constants.ERROR_EXIT_VALUE
    }
    else -> {
        println("${Constants.SCRIPT_LOG_TAG} Everything went fine. You can continue with your push")
        Constants.SUCCESS_EXIT_VALUE
    }
}

kotlin.system.exitProcess(exitValue)
//sampleEnd

fun runCheck(): ExitStatus {
    println("${Constants.SCRIPT_LOG_TAG} Running gradle check")
    return "gradle check".runCommandWithRedirect()
}

fun stash(): Boolean {
    val stashOutput = """git stash push --include-untracked -m "stash created by pre-push hook"""".runCommand()
    return stashOutput.firstOrNull() != Constants.NOTHING_TO_STASH_MSG
}

fun unstash() = "git stash pop -q".runCommand()

fun String.runCommand(dir: File? = null): Sequence<String> =
    ProcessBuilder("/bin/sh", "-c", this)
        .redirectErrorStream(true)
        .directory(dir)
        .start()
        .inputStream.bufferedReader().lineSequence()

// Redirecting output and error to stdout
fun String.runCommandWithRedirect(dir: File? = null): ExitStatus =
    ProcessBuilder("/bin/sh", "-c", this)
        .redirectErrorStream(true)
        .inheritIO()
        .directory(dir)
        .start()
        .waitFor()

object Constants {
    const val SCRIPT_LOG_TAG = "Pre-push -"
    const val NOTHING_TO_STASH_MSG = "No local changes to save"
    const val SUCCESS_EXIT_VALUE = 0
    const val ERROR_EXIT_VALUE = -1
}

typealias ExitStatus = Int
</xmp>


<p>The first line is all the <em>magic incantation</em> we need to execute the script. By setting the shebang to <code>#!/usr/bin/env kscript</code> we get to use <code>kscript</code> as <a href="https://github.com/holgerbrandl/kscript#interpreter-usage">interpreter for the script</a>.</p>

<p>The code after the import is <strong>the actual script</strong>. Those are the lines that are going to be executed as soon as somebody calls the script. <em>Just as you’d expect with any regular shell script.</em></p>

<p>In a nutshell this is what the script does:</p>

<ol>
<li>Stash uncommitted changes <em>if any</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>Run code validation (in this case <code>gradle check</code>)</li>
<li>Unstash possible changes stashed on <em>step 1</em></li>
<li>Log outcome and set the proper exit value</li>
</ol>


<p>The last step is important because <strong>if the script exits to anything other than 0 then git aborts the action</strong> (in this case the push).</p>

<h3>How do I call things from a script?</h3>

<p>To do anything useful on your script you’ll probably have to <strong>call some external tool</strong> at some point. In this particular case for example a mix of <em>git commands</em> and <em>gradle tasks</em>.</p>

<p>There are 2 ways you can go about this:</p>

<ol>
<li>Either <strong>use a Kotlin/Java library</strong> for the task you’re trying to accomplish (in this example we could use <a href="https://www.eclipse.org/jgit/">JGit</a> and <a href="https://docs.gradle.org/current/userguide/embedding.html">Gradle tooling API</a>)</li>
<li>Or <strong>call a shell command</strong> directly</li>
</ol>


<p>While the first approach is more <strong>portable</strong>, it will introduce some dependencies to your script (which fortunately <a href="https://github.com/holgerbrandl/kscript#declare-dependencies-with-deps">KScript has great support for</a>). On the other hand the second option is probably <strong>easier to implement</strong> because it’s just using the same commands we use everyday on our workflow.</p>

<p>Since I can assume everybody in my team has <code>git</code> and <code>gradle</code> installed and in their path <strong>I went for option 2</strong>.</p>

<h3>Running shell commands from Kotlin</h3>

<p>We can run shell commands on Kotlin using <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html"><code>ProcessBuilder</code></a>, just like we’d do from Java.</p>

<p>In this case I’ve created a <code>runCommandWithRedirect</code> extension function that looks like this:</p>

<xmp class="kotlin-code" data-highlight-only>
import java.io.File

//sampleStart
fun String.runCommandWithRedirect(dir: File? = null): ExitStatus {
        return ProcessBuilder("/bin/sh", "-c", this)
            .redirectErrorStream(true)
            .inheritIO()
            .directory(dir)
            .start()
            .waitFor()
}

//sampleEnd
typealias ExitStatus = Int
</xmp>


<p>This function can be called on any String like this:</p>

<p><code>"gradle check".runCommandWithRedirect()</code></p>

<p>This function will:</p>

<ol>
<li>Redirect the standard and error output to the one for the current process, in our case that means <strong>the output of the command will be visible on the terminal when the githook is executed</strong>.</li>
<li>Set the directory to the passed <code>dir</code> parameter, or use the current directory if no parameter is provided.</li>
<li>Execute the command, wait for it to finish and return the <code>ExitStatus</code></li>
</ol>


<p>You can play around with the different <code>ProcessBuilder</code> options. In my script above for example I’ve another version of this function called <code>runCommand</code> that  <strong>executes the command and returns it’s output as a <code>Sequence&lt;String&gt;</code></strong>.</p>

<h2>Automatic installation</h2>

<p>Githooks are great to enforce code quality practices (i.e. <em>”You can’t push if your coverage is less than 80% “</em> 👮). But for the client-side githook to be execute it needs to be in the <code>.git/hooks</code> folder which is not versioned. That means that <strong>each developer on your team has to manually install the hook</strong>, which means that you are again, relying on the good memory of your teammates to enforce code quality.</p>

<p>Instead we could use <a href="https://gist.github.com/KenVanHoeylandt/c7a928426bce83ffab400ab1fd99054a">this trick</a>. We can create a <em>gradle task</em> called <em>“copy”</em> that copies the githook from the <code>src</code> folder to the <code>git/hooks</code> and removes the file extension in the process.</p>

<p>Then we can make the <em>“build”</em> task depend on this new <em>”copy”</em> task. <strong>The next time the developer runs <code>gradle build</code> the githook will be installed</strong>. And as a bonus:  the githook script is now versioned too! <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Here’s how this would look like (using <a href="https://github.com/gradle/kotlin-dsl">Kotlin DSL for Gradle</a>)</p>

<xmp class="kotlin-code" data-highlight-only>
tasks {
    "copy"(Copy::class) {
        from("src/main/kotlin/io/jivimberg/githook/pre-push.kts") {
            rename { it.removeSuffix(".kts") }
        }
        into(".git/hooks")
    }

    "build" {
        dependsOn("copy")
    }
}
</xmp>


<p>⚠️ Don’t forget to do <code>chmod u+x Pre-Push.kts</code> to make the script runnable, otherwise it won’t work.</p>

<h2>What about performance?</h2>

<p>Kotlin is a compiled language, so at some point your script will have to be compiled. Fortunately thanks to KScript <strong>this only happens the first time you run the script</strong> and it’s only compiled again if the script changes.</p>

<p>Other than that there’s the JVM startup time which adds <strong>around 200ms of overhead</strong>. Maybe in the future we’ll be able to use <a href="https://kotlinlang.org/docs/reference/native-overview.html">Kotlin Native</a> to compile to native binaries directly and avoid this overhead.</p>

<p>If you want to read more about performance comparison between <em>Python</em> and <em>Kotlin</em> scripts check the <a href="https://github.com/holgerbrandl/kscript#what-are-performance-and-resource-usage-difference-between-scripting-with-kotlin-and-python">KScript documentation</a>.</p>

<h2>Bonus track: testing</h2>

<p>Testing Kotlin scripts turned out <strong>not to be so straight forward.</strong></p>

<p><a href="https://proandroiddev.com/testing-kotlin-scripts-42bbbbe09ae5">This article</a> suggests using a <code>runCommand</code> method similar to the one described above to execute the script and check it’s outputs. Whereas <a href="https://github.com/holgerbrandl/kscript/blob/master/test/TestsReadme.md">KScript own tests</a> are written using <a href="https://github.com/lehmannro/assert.sh">assert.sh</a>.</p>

<p>Neither approach convinced me. I was just looking for a way of <strong>individually test the functions</strong> in my script <strong>using the same tools I use to test the other parts of my code</strong>.</p>

<p>So what I ended up doing was moving all the <em>Pre-Push</em> logic to a regular <code>*.kt</code> file. And then simply creating a <code>*kts</code> Kotlin script that calls my class using the <a href="https://github.com/holgerbrandl/kscript#ease-prototyping-with-include"><code>//INCLUDE</code> KScript directive</a>.</p>

<p><img class="center" src="/images/posts/2018-07-04/testing-githook-kotlin.png" title="’Testing githook’" ></p>

<p>The downside is that I know have 2 files for my githook (a <code>*.kt</code> and a <code>*.kts</code>) but that seems <strong>a small price to pay for being able to easily test my code</strong>.</p>

<h1>Conclusion</h1>

<p>Writing githooks in Kotlin is possible and not that hard thanks to <a href="https://github.com/holgerbrandl/kscript">KScript</a>. <strong>You’ll be glad you have tried it out</strong> the next time you have to refactor that <em>pre-push</em> hook.</p>

<p>You can find an <strong>example repository</strong> containing all the code for this blogpost here: <a href="https://github.com/jivimberg/kotlin-githook">https://github.com/jivimberg/kotlin-githook</a></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>because you want to verify only on the changes that are going to be pushed<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>And it can even be subject to the same quality standards enforced by the githook itself. INCEPTION!<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
