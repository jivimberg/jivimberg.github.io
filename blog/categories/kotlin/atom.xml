<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2019-01-27T21:56:41-08:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using UUID on Spring Data JPA Entities]]></title>
    <link href="http://jivimberg.github.io/blog/2018/11/05/using-uuid-on-spring-data-jpa-entities/"/>
    <updated>2018-11-05T07:25:37-08:00</updated>
    <id>http://jivimberg.github.io/blog/2018/11/05/using-uuid-on-spring-data-jpa-entities</id>
    <content type="html"><![CDATA[<p>In this article I‚Äôll explore <strong>how to model a <a href="https://stackoverflow.com/questions/6033905/create-the-perfect-jpa-entity">JPA Entity</a> using an <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></strong> as Primary Key working with <a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA.</a></p>

<!--more-->


<p><img class="center" src="/images/posts/2018-11-07/uuid.png" title="‚Äòuuid key‚Äô" ></p>

<h1>Why UUIDs?</h1>

<p>Usually we use numerical keys on our models and let the DB generate that for us on persistence. But there are <strong>some reasons why you might prefer to use UUIDs</strong> as your Primary Key instead. Namely:</p>

<ul>
<li><strong>UUIDs are globally unique.</strong> This means that we don‚Äôt need a centralized component to generate unique ids, <strong>we can generate the ids on the application itself</strong> instead of relying on <a href="https://vladmihalcea.com/hibernate-and-uuid-identifiers/">some UUID generator</a> that populates the <code>id</code> field on persist.</li>
<li>Having globally unique ids also means that <strong>your ids are unique across databases.</strong> This allows us to move data across databases without having to check for conflicting ids.</li>
<li>Having application generated ids means the id is known even before the entity is persisted. This lets us <strong>model our entities as <a href="https://proandroiddev.com/kotlin-for-beginners-immutability-and-the-value-of-val-78ab45b60b57">immutable objects</a></strong> and we avoid having to handle null values on the id.</li>
</ul>


<p>But as you probably already know: <a href="https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch">üö´üÜìüçΩ</a>. So here are some of the downsides of using UUIDss for you to consider:</p>

<ul>
<li><strong>Storage space.</strong> As you can imagine storing an UUID takes a lot more space than storying an Int. Specially if you make the mistake of storing it as a <code>String</code>. You might think Id space is not a big deal, but consider that <strong>Primary Keys are often used in indexes and as Foreign Keys on other tables</strong>. So the numbers start to add up.</li>
<li>They are <strong>not human friendly</strong>. What‚Äôs easier to remember: <code>223492</code> or <code>453bd9d7-83c0-47fb-b42e-0ab045b29f83¬†</code>? This is specially true if you happen to be exposing your ids on your public APIs. Think: <code>/albums/2311445/photo/7426321</code> vs <code>/albums/b3480d79-e458-4675-a7ba-61ac5957cb7c/photo/19b24967-1741-4405-a746-d2b081ee45f2¬†</code>.</li>
</ul>


<p><strong>If you‚Äôre still on the fence</strong> here‚Äôs a great article talking about the pros and cons of using UUIDs as primary keys: <a href="https://tomharrisonjr.com/uuid-or-guid-as-primary-keys-be-careful-7b2aa3dcb439">https://tomharrisonjr.com/uuid-or-guid-as-primary-keys-be-careful-7b2aa3dcb439</a>.</p>

<h1>How to do it</h1>

<p>Now let‚Äôs talk about how we can implement this. I‚Äôll go step by step explaining why we add each piece of code.</p>

<p>The first thing we need to do is <strong>generate the UUID</strong>. As mentioned above we‚Äôd like to do this on the application code so we can have <em>immutable entities</em>. Generating the UUID is easy, all we need to do is: <code>UUID.randomUUID()</code>. So our entity would look like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import java.util.*
import javax.persistence.Id
import javax.persistence.Entity

//sampleStart
@Entity
class Artist(
        @Id val id: UUID = UUID.randomUUID(),
        val name: String
)
//sampleEnd
</xmp>


<p>You‚Äôve probably noticed how we‚Äôre making the id an argument of the <a href="https://kotlinlang.org/docs/reference/classes.html#constructors">primary constructor</a>. This is required to <strong>let clients construct entities with known ids to represent persisted objects</strong>. This is useful for example to <strong>model an update operation</strong>: create an enwtity with a known id and updated values, then call <code>save()</code> on such entity.</p>

<h2>isNew?</h2>

<p>As mentioned we‚Äôre using <a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA</a> for our Repository layer. Now there‚Äôs a small detail we have to take into account when <strong>using application provided ids with Spring Data</strong>. If you do a <code>artistRepository.save(Artist(name = "David Bowie"))</code> you might get an output like this:</p>

<p><img class="center" src="/images/posts/2018-11-07/2sql.png" title="‚Äòpersist logs‚Äô" ></p>

<p>If you pay close attention to the log you‚Äôll notice that <strong>Hibernate is actually executing 2 SQL queries</strong>: one <code>select</code> followed by one <code>insert</code>. Not quite what we were expecting.</p>

<p>The reason for this behavior is the implementation of Spring Data‚Äôs <a href="https://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java"><code>SimpleJpaRepository.java</code></a>. In particular the <a href="https://github.com/spring-projects/spring-data-jpa/blob/01e36dbb44d6bc87f7deb3b6d6dacc955ea6c8bd/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L506"><code>save()</code></a> method:</p>

<pre><code class="java">@Transactional
public &lt;S extends T&gt; S save(S entity) {
    if (entityInformation.isNew(entity)) {
        em.persist(entity);
        return entity;
    } else {
        return em.merge(entity);
    }
}
</code></pre>

<p><strong>The double SQL statement is caused by the call to <code>merge()</code></strong>. By default the way this class decides whether to do a <code>persist()</code> or a <code>merge()</code> <strong>is simply by checking if the id is null</strong>. Which works fine for DB assigned ids, but <em>not</em> for application assigned ones. üòï</p>

<p><strong>The best way to control this is by implementing the <a href="https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/domain/Persistable.java"><code>Persistable&lt;ID&gt;</code></a> interface</strong> providing a <code>isNew()</code> method. Since this is something we‚Äôll want to do every time we use application generated UUIDs <strong>I‚Äôll extract this into an abstract class</strong> and making use of the <code>@MappedSuperClass</code> annotation.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import org.springframework.data.domain.Persistable
import java.util.*
import javax.persistence.*

//sampleStart
@MappedSuperclass
abstract class AbstractBaseEntity(givenId: UUID? = null) : Persistable<UUID> {

    @Id
    @Column(name = "id", length = 16, unique = true, nullable = false)
    private val id: UUID = givenId ?: UUID.randomUUID()

    @Transient
    private var persisted: Boolean = givenId != null
    
    override fun getId(): UUID = id

    override fun isNew(): Boolean = !persisted

    override fun hashCode(): Int = id.hashCode()

    override fun equals(other: Any?): Boolean {
        return when {
            this === other -> true
            other == null -> false
            other !is AbstractBaseEntity -> false
            else -> getId() == other.getId()
        }
    }

    @PostPersist
    @PostLoad
    private fun setPersisted() {
        persisted = true
    }
}
//sampleEnd

</xmp>


<blockquote><p>This design was <strong>suggested to me by <a href="https://twitter.com/PabloHernanS">@paschmid</a> and <a href="https://twitter.com/rcruzjo">@rcruzjo</a></strong>, this code would be quite ugly if it weren‚Äôt for them!</p></blockquote>

<p>You can see how the <code>persisted</code> state is decided based on whether an id is provided on creation or not, to account for updates. Also notice how <strong>its value gets automatically updated upon <em>persist</em> and <em>load</em></strong> thanks to <code>@PostPersist</code> and <code>@PostLoad</code> annotations.</p>

<p>Also since <code>id</code> is now <em>unique</em> and <em>non-nullable</em> <strong>we can use it to implement <code>equals()</code> and <code>hashcode()</code></strong> and avoid falling in some of the common pitfalls of implementing this methods (to learn more about this check <a href="https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/">this article</a> by <a href="https://twitter.com/vlad_mihalcea">@vlad_mihalcea</a> and <a href="https://kotlinexpertise.com/hibernate-with-kotlin-spring-boot/">this one</a> by <a href="https://twitter.com/s1m0nw1">@s1m0nw1</a>).</p>

<p>And in case you‚Äôre wondering <strong>why we need an explicit <code>getId()</code> function</strong>, it is because of this issue: <a href="https://youtrack.jetbrains.com/issue/KT-6653">Kotlin properties do not override Java-style getters and setters</a>.</p>

<h1>Putting it all together</h1>

<p>Finally let‚Äôs see how a concrete entity would use this.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import org.springframework.data.repository.CrudRepository
import java.util.*
import javax.persistence.Entity

//sampleStart
@Entity
class Artist(
        id: UUID? = null,
        val name: String
) : AssignedIdBaseEntity(id)
//sampleEnd
</xmp>


<p>Pretty similar to our original approach right? Thanks to the abstract class all the <code>isNew()</code> <strong>implementation details are hidden</strong> from concrete entities.</p>

<p>And now if we do a <code>save()</code> on a new entity <strong>we get one single SQL statement</strong> as we were expecting.</p>

<p><img class="center" src="/images/posts/2018-11-07/1sql.png" width="600" title="‚Äòpersist logs with abstractEntity‚Äô" ></p>

<hr />

<p>You can find all the <strong>code samples</strong> for this post on <strong><a href="https://github.com/jivimberg/spring-data-uuid-example">this GitHub repo</a></strong>.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive GraphQL Subscriptions From Kafka]]></title>
    <link href="http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka/"/>
    <updated>2018-10-23T07:58:14-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka</id>
    <content type="html"><![CDATA[<p>In this post I‚Äôll be exploring how to implement <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">GraphQL subscriptions</a> <em>reactively</em> on a Spring Boot application using <a href="https://kafka.apache.org/">Kafka</a>.</p>

<!--more-->


<h1>The use case</h1>

<p>So, <em>what are we trying to achieve?</em> We want to provide <strong>a way for clients to get notified</strong> whenever an event occurs in the application.</p>

<p>The GraphQL way of doing this is through a <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">Subscription</a>. For the application events we‚Äôre using Kafka. So all we are trying to do is to tie those 2 things so that <strong>whenever an event pops up in Kafka all clients with an active subscription get notified</strong>.</p>

<p><img class="center" src="/images/posts/2018-10-24/SubscriptionFlow.png" width="700" title="‚ÄòSubscription flow diagram‚Äô" ></p>

<h1>The setup</h1>

<p>Let‚Äôs introduce the different pieces of the puzzle:</p>

<ol>
<li>I have a <a href="https://spring.io/guides/gs/spring-boot/">Spring Boot application</a> that has some business logic.</li>
<li>Using <a href="https://github.com/graphql-java-kickstart/graphql-spring-boot"><code>graphql-spring-boot-starter</code></a> I‚Äôm exposing my service through a GraphQL API. <strong>One of those endpoints it‚Äôs going to be a Subscription endpoint.</strong> It‚Äôs schema definition looks something like this:</li>
</ol>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">type</span> <span class="n">Subscription</span> <span class="o">{</span>
</span><span class='line'> <span class="nl">event:</span> <span class="n">EventMessage</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>On the other end I have a <a href="https://kafka.apache.org/documentation/#intro_topics">Kafka topic</a> with events that a user might be interested in. We plan to use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to <strong>consume the events through a reactive stream</strong>.</li>
</ol>


<p><img class="center" src="/images/posts/2018-10-24/Setup.png" width="800" title="‚ÄôSetup diagram‚Äô" ></p>

<p>So the challenge is: <em>how do we connect all this pieces together?</em></p>

<h1>Reactive all the way</h1>

<p>To implement the resolver <a href="https://github.com/graphql-java-kickstart/graphql-java-tools">GraphQL Java Tools</a> <strong>requires that we implement a function that returns a <code>Publisher&lt;T&gt;</code></strong>. Where <em>T</em> is the type of event to be pushed to the subscriber. From <a href="https://github.com/graphql-java/graphql-java">GraphQL Java</a> documentation:</p>

<blockquote><p>What is special is that the initial result of a subscription query is a <strong>reactive-streams¬†Publisher¬†object</strong> which you need to use to get the future values.</p></blockquote>

<p>On the other end <strong>we can use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to create a reactive Receiver</strong> to consume the events from the topic. Then all that‚Äôs left is <strong>obtaining a <code>Publisher</code> from this receiver so that clients can subscribe to it</strong>. This is all the code we need:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import graphql.schema.DataFetchingEnvironment
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import reactor.core.publisher.Flux
import reactor.kafka.receiver.KafkaReceiver
import reactor.kafka.receiver.ReceiverOptions

@Component
class SubscriptionsResolverImpl(
    receiverOptions: ReceiverOptions<String, EntityUpdated>                 // Receiver configuration. Injected by Spring
) : SubscriptionsResolver {

    private val logger = LoggerFactory.getLogger(javaClass)

    private val kafkaReceiver: Flux<GraphqlEvents.Update> by lazy {         // Use lazy to delay KafkaReceiver initialization
        KafkaReceiver.create(receiverOptions).receive()                     // Create Kafka reactive receiver
            .map { GraphqlEvents.Update.fromEvent(it.value()) }             // Map from Kafka event to Graphql Event
            .doFinally { logger.info("Closing with signal: ${it.name}") }   // Log message on stream closure
            .publish()                                                      // Get a ConnectableFlux. Turns stream to hot
            .autoConnect()                                                  // Connect to upstream on first subscription
    }

    override fun event(env: DataFetchingEnvironment): Publisher<GraphqlEvents.Update> {
        logger.info("GraphQL 'event' subscription called")                  // Log message on each new subscription
        return kafkaReceiver                                                // Returns kafkaReceiver for GraphQL to subscribe to it
    }
}
</xmp>


<p>Just to recap. We are <strong>creating a Kafka Receiver</strong> for the topic we care about (the topic configuration is part of the <code>receiverOptions</code> object, not shown in the snippet).</p>

<p>We are <strong>mapping the event</strong> from the <em>Kafka model</em> to the <em>GraphQL model</em> through the <code>map()</code> method.</p>

<p>Then we are turning the receiver into a hot stream by calling <code>publish()</code>. We are doing this because <strong>we want new subscribers to only see events that happened after they subscribed to the <code>Publisher</code></strong>. And that‚Äôs exactly what <code>publish()</code> does. In fact if you pay close attention to the marble diagram of the <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#publish--">method documentation</a> you‚Äôll notice how <strong>it looks pretty similar to our use case flow diagram.</strong></p>

<p><img class="center" src="/images/posts/2018-10-24/publish.png" width="500" title="‚ÄòPublish marble diagram‚Äô" ></p>

<p>We‚Äôre calling <code>autoConnect()</code> so that it connects to the upstream source as soon as the first <code>Subscriber</code> subscribes.</p>

<p>Finally we‚Äôre implementing the <code>event</code> function <strong>by simply returning the reference to our hot stream of events</strong>. Whenever a new client calls the Subscription endpoint <strong>GraphQL Java will subscribe to this stream</strong> and send a message for every new event that shows up in the configured Kafka topic.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Using Gradle With Kotlin DSL]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl/"/>
    <updated>2018-08-28T08:36:57-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl</id>
    <content type="html"><![CDATA[<p>Since Gradle 3.0 you can <a href="https://blog.gradle.org/kotlin-meets-gradle"><strong>write your build scripts using Kotlin instead of Groovy</strong></a>. I was curious, so I decided to give it a try. Here are my thoughts on the process.</p>

<!--more-->


<h1>Why?</h1>

<p>Ok, we can write our build scripts in Kotlin, but you might be wondering: <em>‚Äùwhy would I want to do that?‚Äù</em> Here are my reasons:</p>

<h2>1. All things Kotlin</h2>

<p>Our backend codebase is <em>mostly written in Kotlin</em>. We even wrote our <a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">githooks using Kotlin scripts!</a> So it was only natural to use Kotlin on our build tools too.</p>

<p>Being able to use the same language across the stack means that your learning efforts pays double. This way <strong>the team doesn‚Äôt have to learn a new language just to write a simple Gradle task.</strong> And as an added bonus you can apply <em>the same testing, coverage and code inspection tools</em> that you use in production to your tooling code.</p>

<h2>2. IDE support</h2>

<p>The second reason for making the transition was IDE support. Groovy is a dynamically typed language, which makes it harder for the IDE to provide accurate code completion and script validity through type checks. Kotlin being statically typed doesn‚Äôt suffer from the same problems</p>

<p><img class="center" src="/images/posts/2018-09-11/kotlin-code-completion.png" title="‚ÄòKotlin code completion‚Äô" ></p>

<h2>3. Interoperability</h2>

<p>As you probably know <a href="https://kotlinlang.org/docs/reference/java-interop.html">Kotlin was designed with Java interoperability in mind</a>. And the same interoperability <a href="">extends to Groovy code</a>.</p>

<p>This interoperability let us <strong><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy_2">call Groovy code from Kotlin</a> and <a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy">viceversa</a></strong>. Which effectively means that you can have <strong>a mix of both Groovy and Kotlin scripts working together in the same project</strong>. So no need to migrate all your build scripts at once, or to push stubborn <em>‚ÄúWally‚Äù</em> to learn Kotlin DSL.</p>

<p><img class="center" src="/images/posts/2018-09-11/wally2.png" title="‚ÄòWally‚Äô" ></p>

<h1>The exodus</h1>

<p><em>‚ÄùSo how painful was the migration?‚Äù</em> It wasn‚Äôt that bad really. Kotlin DSL was designed to be pretty similar to the classic <code>build.gradle</code> files.</p>

<p>You‚Äôll just have to <strong>push through that first moment</strong> when nothing seems to be working, your project doesn‚Äôt compile at all, and you know you‚Äôre a <code>‚åò + Z</code> away from a pristine working copy. <em>But you can&rsquo;t make an omelet without breaking a few eggs, can you?</em></p>

<p><img class="center" src="/images/posts/2018-09-11/panic.png" title="‚ÄòPanic!‚Äô" ></p>

<p><strong>I just wish there was some kind of automatic migration action in IntelliJ.</strong> Even if it‚Äôs a best effort that leaves you half way there, I‚Äôd greatly appreciate it. Ideally it should work just like when you paste some Java code into a Kotlin file: <code>‚åò + V</code> + ‚ú®<em>fairy dust</em>‚ú® and you have your <code>build.gradle.kts</code> ready to go.</p>

<h3>Resources</h3>

<p>This are the resources that help me complete the migration. Hopefully you‚Äôll find them helpful too.</p>

<ul>
<li><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/"><strong>Official Gradle migration guide</strong></a> <strong>Start here!</strong> You don‚Äôt have to cover the whole thing but you can skim through it and later go back to the section you need.</li>
<li><a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/"><strong>Samples in the Kotlin DSL repo</strong></a> This is <strong>the go-to place for Kotlin DSL samples</strong>. You‚Äôll find yourself coming back to this repo over and over. Be sure to search the <em>Issues</em> section too.</li>
<li>For the times when the <a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/">Kotlin DSL repo</a> doesn‚Äôt have what you‚Äôre looking for, I find it useful to use <a href="https://github.com/search/advanced"><strong>Github Search</strong></a> looking for code in files with <code>*.kts</code> extension.</li>
<li><a href="https://github.com/jnizet/gradle-kotlin-dsl-migration-guide"><strong>jnizet/gradle-kotlin-dsl-migration-guide</strong></a> this is another migration guide that has proven useful in the past.</li>
<li>Finally I followed <a href="https://handstandsam.com/2018/02/11/kotlin-buildsrc-for-better-gradle-dependency-management/"><strong>this article</strong></a> by <a href="https://handstandsam.com/about-me/">Handstand Sam</a> to do <em>dependency management</em> on out multi-module project.</li>
</ul>


<h1>The not so good</h1>

<h2>1. <em>‚ÄúI can‚Äôt just copy-past things from Stack Overflow‚Äù</em></h2>

<p><img class="center" src="/images/posts/2018-09-11/copy-paste.jpg" width="250" title="‚ÄòCopy paste from Stack Overflow‚Äô" ></p>

<p>This is <strong>by far the biggest drawback</strong>. In my experience most teams have one or two <em>‚Äùbuild tool experts‚Äù</em>. The rest of the team just use a few tasks and maybe add a dependency every now and then. This casual user might have a harder time using Kotlin DSL because <strong>copy-pasting pieces of code from the web will not work out of the box</strong>. Converting this snippets to Kotlin DSL is not rocket-science, but in some cases it might require some basic level of understanding of how Kotlin DSL works.</p>

<p>This is specially true when using plugins that were not designed with Kotlin DSL in mind (I‚Äôm looking at you <a href="https://github.com/google/protobuf-gradle-plugin/issues/219">protobuf Gradle plugin</a>).</p>

<h2>2. IDE support could be better</h2>

<p>Remember all the nice things I said about IDE auto-completion on the build scripts? Well let me clarify: <em>‚ÄúIDE support is awesome‚Ä¶ most of the time‚Äù</em>.</p>

<p>Once you have your script fully migrated and IntelliJ has finished indexing then everything should work just fine. But to get there you‚Äôll have to have your full <code>build.gradle</code> script fully migrated. That‚Äôs why my advice is to <strong>comment everything out and start migrating piece by piece</strong>. For example you can start with configuring the <em>repositories</em>, and <em>plugins</em> and only then move to <em>dependencies</em>.</p>

<p>This gets intensified if you are working on a <a href="https://guides.gradle.org/creating-multi-project-builds/">multi-module project</a> and/or you‚Äôre using <a href="https://docs.gradle.org/current/userguide/custom_plugins.html"><code>buildSrc</code> for custom plugins</a>.</p>

<p>The silver lining is that IDE support is getting better with each release, and once you‚Äôve migrated everything it mostly works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JaCoCo &amp; Kotlin: Coverage on Generated Code]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/12/jacoco-and-kotlin-coverage-on-generated-code/"/>
    <updated>2018-08-12T21:26:43-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/12/jacoco-and-kotlin-coverage-on-generated-code</id>
    <content type="html"><![CDATA[<p>JaCoCo works <em>flawlessly</em> with Kotlin. Except when it reports lines not covered on generated code üò°. Fortunately there‚Äôs a fix already in place.</p>

<!--more-->


<hr />

<h3><em>Update 08/26:</em> <strong>JaCoCo 0.8.2 has now officially been released</strong> üëè No need to use the <em>0.8.2-SNAPSHOT</em> anymore.</h3>

<hr />

<p><img class="center" src="/images/posts/2018-08-12/JaCoCo-before.png" width="720" title="‚ÄôJaCoCo before‚Äô" ></p>

<p><blockquote><p>What!? I didn‚Äôt even write those functions! There‚Äôs no way I‚Äôm writing tests for them. I‚Äôm pretty sure the compiler knows what it‚Äôs doing‚Ä¶</p><footer><strong>Me</strong> <cite>Every Time I Saw the Coverage Report</cite></footer></blockquote></p>

<p>Good news is that this <a href="https://github.com/goodwinnk">has been fixed</a> in the latest JaCoCo release (thanks to <a href="https://github.com/goodwinnk">goodwink</a>). Bad news is that <strong>0.8.2 is not out yet</strong> üòû</p>

<p>If you are like me, and can‚Äôt wait to get this working, you can <strong>use the SNAPSHOT version of JaCoCo</strong> making this changes on your <code>build.gradle</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">repositories</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‚Ä¶</span>
</span><span class='line'>    <span class="n">maven</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="p">=</span><span class="s">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span><span class="p">&gt;</span><span class="n">https</span><span class="p">:</span><span class="c1">//oss.sonatype.org/content/repositories/snapshots&lt;/a&gt;&amp;rdquo;)</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">jacoco</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">toolVersion</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="m">0.8</span><span class="p">.</span><span class="m">2</span><span class="p">-</span><span class="n">SNAPSHOT</span><span class="p">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><em>(I‚Äôm using <a href="https://github.com/gradle/kotlin-dsl">Gradle with Kotlin DSL</a> in this example)</em></p>

<p>Now you can finally take your Kotlin coverage to 100% without having to write tests for <code>component1()</code> and <code>component2()</code>.</p>

<p><img class="center" src="/images/posts/2018-08-12/JaCoCo-after.png" width="720" title="‚ÄôJaCoCo after‚Äô" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hierarchical Queries on RDBMS With JPA]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/04/recursive-queries-on-rdbms-with-jpa/"/>
    <updated>2018-08-04T11:29:52-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/04/recursive-queries-on-rdbms-with-jpa</id>
    <content type="html"><![CDATA[<p>Hello! In this post I‚Äôll explore the different alternatives for querying hierarchical data stored on a RDBMS using <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html">JPA</a>.</p>

<!--more-->


<h1>What are we trying to do?</h1>

<p>Let‚Äôs use a silly example to illustrate what we are trying to achieve. Say we want to model <strong>mother-daughter relationships</strong>, we can do so with an entity like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany

//sampleStart
@Entity
data class Woman (
    val name: String,
    @OneToMany(cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

\~</xmp>


<p>In OO-talk that‚Äôs just one Type with a reference to itself like this:</p>

<p><img class="center" src="/images/posts/2018-08-04/UML.jpg" width="240" title="‚ÄôUML‚Äô" ></p>

<p>And once we start creating a bunch of mothers, we‚Äôll get a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graph</a>. Although for this example, and to keep things simple, <strong>we‚Äôll just model the offspring of just one single person</strong> so we get a nice tree like this:</p>

<p><img class="center" src="/images/posts/2018-08-04/tree.jpg" width="480" title="‚ÄôTree‚Äô" ></p>

<p>But in DB this is stored in <strong>2 tables</strong>. One contains the Woman data and the other one the relationships.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;table>
</span><span class='line'>&lt;thead>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;th> Id &lt;/th>
</span><span class='line'>&lt;th> Name   &lt;/th>
</span><span class='line'>&lt;th>       &lt;/th>
</span><span class='line'>&lt;th> Woman_Id &lt;/th>
</span><span class='line'>&lt;th>  Daughters_Id &lt;/th>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/thead>
</span><span class='line'>&lt;tbody>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 1        &lt;/td>
</span><span class='line'>&lt;td> 2             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 1        &lt;/td>
</span><span class='line'>&lt;td> 3             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 2        &lt;/td>
</span><span class='line'>&lt;td> 4             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 2        &lt;/td>
</span><span class='line'>&lt;td> 5             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 3  &lt;/td>
</span><span class='line'>&lt;td> Carol  &lt;/td>
</span><span class='line'>&lt;td>       &lt;/td>
</span><span class='line'>&lt;td> 3        &lt;/td>
</span><span class='line'>&lt;td> 6             &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 4  &lt;/td>
</span><span class='line'>&lt;td> Linda  &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 5  &lt;/td>
</span><span class='line'>&lt;td> Betty  &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 6  &lt;/td>
</span><span class='line'>&lt;td> Lisa   &lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;td>&lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/tbody>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>We‚Äôll focus in just one single type of query, namely:</p>

<blockquote><p><em>Find a node and return the whole subtree underneath</em></p></blockquote>

<p>Or in domain specific terms:</p>

<blockquote><p><em>Find a woman and return her along with her offspring</em></p></blockquote>

<h1>Alternatives</h1>

<p>Let‚Äôs explore our options. For the following examples I‚Äôll be using <a href="https://kotlinlang.org/">Kotlin</a>, <a href="http://projects.spring.io/spring-data/">Spring Data</a>, <a href="http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html">JPA</a>, <a href="http://hibernate.org/">Hibernate</a> and an <a href="https://www.oracle.com/database/index.html">Oracle Database</a>. Thanks to JPA you‚Äôll notice that most of the time <strong>the solutions provided work on whatever you‚Äôve decided to use</strong> (I‚Äôll note it when it‚Äôs not the case). You can use Java instead of Kotlin, Eclipselink instead of Hibernate and MySQL instead of Oracle, and even abandon Spring completely.</p>

<p>Because this is meant to be a formative post <strong>I‚Äôll start with some of the ‚Äúwrong‚Äù approaches first</strong> and explain its downsides. If you‚Äôre in a rush you can just scroll to the bottom üòÉ</p>

<h2>Eager fetching</h2>

<p>The simplest solution is using <a href="https://www.thoughts-on-java.org/entity-mappings-introduction-jpa-fetchtypes/">Eager fetching</a>. We can enable eager fetching specifying the <code>fetch</code> parameter on the <code>@OneToMany</code>  annotation like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany

//sampleStart
@Entity
data class Woman (
    val name: String,
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

</xmp>


<p>Great, it works! But wait, <em>why do I see so many SELECT calls to the database?</em> As you‚Äôve probably figured out the issue with this approach is that it falls in the <a href="https://stackoverflow.com/questions/97197/what-is-the-n1-select-query-issue">N + 1 SELECT problem</a>.</p>

<p>Some authors even go as far as considering <a href="https://vladmihalcea.com/eager-fetching-is-a-code-smell/">eager fetching a <strong>code smell</strong></a>. In the words of <a href="https://vladmihalcea.com/about/">Vlad Mihalcea</a> (emphasis mine):</p>

<blockquote><p>The EAGER fetching strategy is a code smell. Most often it‚Äôs used for simplicity sake without considering the long-term performance penalties. The fetching strategy <strong>should never be the entity mapping responsibility</strong>. Each business use case has different entity load requirements and therefore the fetching strategy should be delegated to each individual query.</p></blockquote>

<h2>Using <code>join fetch</code></h2>

<p>Another alternative would be to use <code>join fetch</code> as part of the JPQL query.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
fun findWomanUsingJoinFetch(id: Long): Woman? {
        return em.createQuery("select distinct w from Woman w left join fetch w.daughters", Woman::class.java)
        .resultList
        .find { it.id == id }
}
</xmp>


<p>With <code>join fetch</code> we can tell JPA to do a <code>join</code> to execute the query and also include the data as part of the response object when mapping to the OO world.</p>

<p>The <em>huge downside</em> is that we‚Äôre actually <strong>querying ALL women</strong>  and only then selecting the one we were looking for from the <code>resultList</code>. This means that, unless you‚Äôre querying for the root node, <strong>you‚Äôll always be doing extra work</strong>.</p>

<p>And no, a <code>where</code> clause can‚Äôt help us here. Using <code>where w.id = :id</code> would leave us with just the root and one level of descendants in the <em>resultList</em>.</p>

<p>Unfortunately <strong>I couldn‚Äôt find a way of making this a single JPQL query</strong>.  <a href="https://vladmihalcea.com/about/">Vlad Mihalcea</a> has a <a href="https://vladmihalcea.com/hibernate-facts-multi-level-fetching/">great article</a> explaining how to use <code>join fetch</code> to query all the leaves of the tree and then build the associations all the way up the entity hierarchy. Sadly we can‚Äôt apply the same approach here because we‚Äôre querying a <em>multi-level homogeneous tree</em>. That means that <strong>all the nodes are of the same type, and thus mapped to the same table,</strong> and furthermore leaves can be N levels deep. So if we try Vlad‚Äôs approach we‚Äôd end up with the similar <strong><code>where</code> problem</strong> mentioned above.</p>

<h2>Entity graph</h2>

<p>Another proposed solution is to use <a href="https://docs.oracle.com/javaee/7/tutorial/persistence-entitygraphs001.htm">Entity Graphs</a> introduced in <em>JPA 2.1</em>. You can use Entity Graphs as a query hint to <strong>specify which fields you want eagerly fetched as part of the query</strong>.</p>

<blockquote><p>Entity graphs have attributes that correspond to the fields that will be eagerly fetched during a find or query operation</p></blockquote>

<p>They come in 2 flavors. Static through annotations:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import javax.persistence.CascadeType
import javax.persistence.Entity
import javax.persistence.FetchType
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.NamedAttributeNode
import javax.persistence.NamedEntityGraph
import javax.persistence.NamedEntityGraphs
import javax.persistence.NamedSubgraph
import javax.persistence.OneToMany

//sampleStart
@Entity
@NamedEntityGraphs(
    NamedEntityGraph(name = "womanWithDaughters",
        attributeNodes = [NamedAttributeNode(value = "daughters", subgraph = "daughterWithDaughters")],
        subgraphs = [
            NamedSubgraph(
                name = "daughterWithDaughters",
                attributeNodes = [NamedAttributeNode("daughters")]
            )
        ]
    )
)
data class Woman (
//sampleEnd
    val name: String,
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
</xmp>


<p>Or you can construct the graph <strong>programmatically</strong> to have some more flexibility:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
fun findWomanUsingEntityGraph(id: Long): Woman {
    val graph = em.createEntityGraph(Woman::class.java)
        .also { it.addSubgraph<Woman>("daughters") }
    return em.find(Woman::class.java, id, mapOf("javax.persistence.loadgraph" to graph))
}
</xmp>


<p>I thought: <em>‚ÄúThis is it IT! If I can manually build the graph for each query I can even specify how many levels deep I want to go‚Äù</em>. But once again, it didn‚Äôt quite work üòû</p>

<p>I tried creating graphs with subgraphs N levels deep but <strong>the query would just ignore them and only fetch up to 2 levels</strong>. From the annotations flavor this limitation is clear since:</p>

<ol>
<li>You can‚Äôt use a subgraph reference on an attribute of the same graph recursively (it‚Äôll fail at runtime)</li>
<li>And <code>@NamedSubgraph</code> can‚Äôt have other <code>subgraphs</code> defined underneath.</li>
</ol>


<p>I was hoping this would be possible through the API, but apparently it‚Äôs not. Maybe Hibernate is to blame here, I don‚Äôt really know‚Ä¶ But <em>I couldn‚Äôt find any documentation beyond the basic 2 level example</em>.</p>

<h2>Using <code>@BatchSize</code></h2>

<p>Going back to the Eager Fetch approach, we hated it because it resulted in N queries where N is the number of Women in the table. <strong>With  <code>@BatchSize</code> we can mitigate this</strong>.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
data class Woman(
    val name: String,
    @BatchSize(size = 10)
    @OneToMany(fetch = FetchType.EAGER, cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
</xmp>


<p>By setting the batch size to 10 we‚Äôre basically saying: <em>‚ÄúSince you‚Äôre going to the DB to execute a query bring up to 10 elements instead of just one‚Äù</em>. Effectively <strong>reducing the number of roundtrips to the database</strong>.</p>

<p><code>@BatchSize</code> is a <a href="https://docs.jboss.org/hibernate/orm/5.3/javadocs/org/hibernate/annotations/BatchSize.html">Hibernate specific annotation</a> but on Eclipselink you can use <a href="http://www.eclipse.org/eclipselink/documentation/2.5/jpa/extensions/q_batch_size.htm"><code>eclipselink.batch.size</code></a> to achieve the same result. In fact, remember that as a rule of thumb  <strong>it‚Äôs better to apply this kind of configurations to the query</strong> instead of using an annotation on the entity.</p>

<h2>Connect by (Best solution!)</h2>

<p>If you‚Äôre using Oracle then we can solve this using a native query with <a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm"><code>CONNECT BY</code></a>. Turns out this clause was created specifically for <strong>selecting rows in hierarchical order</strong>.</p>

<p><img class="center" src="/images/posts/2018-08-04/connectby.gif" title="‚ÄôConnect by syntax‚Äô" ></p>

<p>We use <code>START¬†WITH</code> to specify the root node of the hierarchy, and then <code>CONNECT¬†BY</code> to specify the relationship between rows. Our query would look like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">w</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">wd</span><span class="p">.</span><span class="n">daughters_id</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">woman</span> <span class="n">w</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">woman_daughters</span> <span class="n">wd</span> <span class="k">ON</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">wd</span><span class="p">.</span><span class="n">woman_id</span>
</span><span class='line'><span class="k">START</span> <span class="k">WITH</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="o">?</span><span class="mi">1</span>
</span><span class='line'><span class="k">CONNECT</span> <span class="k">BY</span> <span class="k">PRIOR</span> <span class="n">wd</span><span class="p">.</span><span class="n">daughters_id</span> <span class="o">=</span> <span class="n">w</span><span class="p">.</span><span class="n">id</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note how in the <code>CONNECT BY</code> clause we use <code>PRIOR</code> to refer to the parent row.</p>

<p>This achieves exactly what we want <strong>in just one query!</strong>. But this doesn‚Äôt come for free. By using native queries we are stepping out of the <em>JPA magical world‚Ñ¢</em>. This means that what the query returns is not an object but a list of rows of the form:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;table>
</span><span class='line'>&lt;thead>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;th> Id &lt;/th>
</span><span class='line'>&lt;th> Name   &lt;/th>
</span><span class='line'>&lt;th> Daughters_id &lt;/th>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/thead>
</span><span class='line'>&lt;tbody>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td> 2            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 1  &lt;/td>
</span><span class='line'>&lt;td> Wendy  &lt;/td>
</span><span class='line'>&lt;td> 3            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td> 4            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 2  &lt;/td>
</span><span class='line'>&lt;td> Brenda &lt;/td>
</span><span class='line'>&lt;td> 5            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 3  &lt;/td>
</span><span class='line'>&lt;td> Carol  &lt;/td>
</span><span class='line'>&lt;td> 6            &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 4  &lt;/td>
</span><span class='line'>&lt;td> Linda  &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 5  &lt;/td>
</span><span class='line'>&lt;td> Betty  &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;tr>
</span><span class='line'>&lt;td> 6  &lt;/td>
</span><span class='line'>&lt;td> Lisa   &lt;/td>
</span><span class='line'>&lt;td> null         &lt;/td>
</span><span class='line'>&lt;/tr>
</span><span class='line'>&lt;/tbody>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>So we‚Äôll have to write the code to transform this back to our domain model. To achieve this I used the <code>@SqlResultSetMapping</code> to model the native query result.</p>

<xmp class="kotlin-code" theme="darcula"data-highlight-only>
    import javax.persistence.CascadeType
import javax.persistence.ColumnResult
import javax.persistence.ConstructorResult
import javax.persistence.Entity
import javax.persistence.EntityManager
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.OneToMany
import javax.persistence.SqlResultSetMapping

//sampleStart
data class WomanWithRef(
    val id: Long,
    val name: String,
    val fieldsId: Long?
)

@Entity
@SqlResultSetMapping(
    name = "WomanWithRef",
    classes = [
        ConstructorResult (
            targetClass = WomanWithRef::class,
            columns = [
                ColumnResult(name = "id", type = Long::class),
                ColumnResult(name = "name", type = String::class),
                ColumnResult(name = "daughters_id", type = Long::class)
            ]
        )
    ]
)
data class Woman(
    val name: String,
    @OneToMany(cascade = [CascadeType.ALL]) val daughters: MutableSet<Woman> = mutableSetOf(),
    @Id @GeneratedValue(strategy = GenerationType.AUTO) val id: Long? = null
)
//sampleEnd

</xmp>


<p>And we can finally write the query like this:</p>

<xmp class="kotlin-code" theme="darcula"data-highlight-only>
//sampleStart
fun findTypeWithConnectBy(id: Long): Woman {
    val results: List<WomanWithRef> = em.createNativeQuery(
        """   
            SELECT w.id, w.name, wd.daughters_id
            FROM woman w
            LEFT JOIN woman_daughters wd ON w.id = wd.woman_id
            START WITH w.id = ?1
            CONNECT BY PRIOR wd.daughters_id = w.id
        """.trimIndent(), "TypeWithRefMapping")
        .setParameter(1, id)
        .resultList as List<WomanWithRef>
    return buildGraph(results, id)
}

//sampleEnd
fun buildGraph(queryResult: List<WomanWithRef>, id: Long): Woman {
    val rows = queryResult { it.id == id }
    val firstRow = rows.first()

    val fields = if (rows.size == 1 && firstRow.daughterId == null) {
        mutableSetOf()
    } else {
        rows.mapNotNull { it.daughterId }
            .map { buildGraph(queryResult, it) }
            .toMutableSet()
    }

    return Woman(firstRow.name, fields, id)
}

</xmp>


<p>Using the <code>buildGraph</code> function to traverse the query result and reconstruct the root <code>Woman</code> object.</p>

<p>If you‚Äôre using <code>HibernateCallback</code> here‚Äôs another way of writing the result mapping: <a href="https://docs.spring.io/spring/docs/2.0.x/javadoc-api/org/springframework/orm/hibernate/HibernateCallback.html">https://docs.spring.io/spring/docs/2.0.x/javadoc-api/org/springframework/orm/hibernate/HibernateCallback.html</a></p>

<p><strong>If you‚Äôre not using Oracle</strong> (or some other DB that supports <code>CONNECT BY</code>) you can do recursive queries using <a href="https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL#Common_table_expression">Common Table Expression (CTE)</a> to achieve a similar result.</p>

<h1>Is RDBMS right for you?</h1>

<p>If you find yourself bending over backwards to make this graph-like queries work, or if you need a query language that will let you express something like:</p>

<blockquote><p><em>Find all women whose great-grandmother is named Carol and have at least one descendant named Brenda</em></p></blockquote>

<p>Then <strong>maybe you should consider your options beyond RDBMS</strong>. You can take a look at graph databases such as <a href="https://neo4j.com/">Neo4j</a> and get familiar with it‚Äôs <a href="https://neo4j.com/developer/cypher-query-language/">query language</a>. Or, if you‚Äôre not ready to make the jump but want to explore a graph API on top of your relational data you should take a look at <a href="http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/index.html">Oracle Spatial and Graph</a>.</p>

<hr />

<p><em>Phew!</em> that was a long one‚Ä¶ Hope you find it useful!</p>

<p>If you know of a better way of doing this kind of queries I‚Äôd love to hear about it, leave me a comment down hereüëá or just <a href="https://twitter.com/jivimberg">ping me on Twitter</a>.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
</feed>
