<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microservices | Coding Forest]]></title>
  <link href="http://jivimberg.io/blog/categories/microservices/atom.xml" rel="self"/>
  <link href="http://jivimberg.io/"/>
  <updated>2023-09-13T05:40:48+00:00</updated>
  <id>http://jivimberg.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Migrating to Cloud-Native Application Architectures]]></title>
    <link href="http://jivimberg.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures/"/>
    <updated>2018-07-24T16:18:45-07:00</updated>
    <id>http://jivimberg.io/blog/2018/07/24/book-recommendations-migrating-to-cloud-native-application-architectures</id>
    <content type="html"><![CDATA[<p>Complementing <a href="https://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/">my last book recommendation</a> on <em> Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a> now I present <a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><em>Migrating to Cloud-Native Application Architectures</em></a> by <a href="@mstine">Matt Stine</a>.</p>

<!--more-->


<p><a href="https://content.pivotal.io/ebooks/migrating-to-cloud-native-application-architectures"><img class="center" src="/images/posts/2018-07-28/cover.jpg" title="’Migrating to Cloud-Native Application book cover’" ></a></p>

<p>I’m really digging this O’Reilly booklet style! They <strong>condense a good overview of a specific topic in one-sitting books</strong>. While at the same time provide enough links and resources to keep you digging for a few afternoons if interested.</p>

<p>Matt’s book is divided in 3 parts. The first bit <strong>”The rise of cloud service”</strong> serves as an introduction to the topic. It defines <em>cloud native architectures </em> key characteristics and <strong>why you might consider using one</strong>.  If you are already familiar with the subject you may want to skim through this first section.</p>

<p>The second part is the one I enjoyed the most. It talks about <strong>the changes needed to go cloud native</strong>. It covers areas that are sometimes forgotten or considered as an afterthought such as <em>team collaboration</em>, <em>organizational changes</em> (the <a href="https://www.thoughtworks.com/radar/techniques/inverse-conway-maneuver">Inverse Conway Maneuver</a>) and the <em>decentralization of decision making</em>. The rest of the chapter touches on the <strong>technical challenges</strong> required. It was really nice to see a bit on how to <strong>use <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> to identify service boundaries</strong> when decomposing data models.</p>

<p>On the last chapter, called <strong>Migration Cookbook</strong>, Matt explores different strategies for decomposing the monolith (such as <em>”strangling the monolith”</em>, <em>”new features as Micro-services”</em>, <em>”anti-corruption layer”</em>, etc.) and provides links to articles by companies that applied this strategies on their own systems. The book finishes with a section called <strong>Distributed system recipes</strong>  where some of the more common <em>“challenges”</em> of a cloud-native architecture are explored and particular solutions are presented using <a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a> and <a href="https://netflix.github.io/">Netflix OSS</a>. Here you’ll find things like <em>service discovery</em>, <em>versioned configuration</em>, <em>load balancing</em>, etc. Each topic is presented with a brief description of the problem, a mention of the Netflix OSS solution (and it’s features) and a code snippet showing how to integrate it with Spring.</p>

<h2>Bottom line</h2>

<p><strong>GO READ IT!</strong> It won’t take you more than an afternoon and chances are you’ll learn something new. You’ll walk away with <strong>a better understanding of the cloud-native landscape.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recomendations: Migrating to Microservices Databases]]></title>
    <link href="http://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/"/>
    <updated>2018-05-25T07:32:00-07:00</updated>
    <id>http://jivimberg.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases</id>
    <content type="html"><![CDATA[<p>Just finished reading <em> Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a>. If you can relate to the 3 nouns in the title then you’ll want to check it out.</p>

<!--more-->


<blockquote><p>Code is easy; state is hard.</p>

<p>— <em>Edson Yanaga</em></p></blockquote>

<p>If you are on the journey of <strong>migrating your monolith to a micro-service architecture</strong> (like every other developer this days) then, at some point, you probably found yourself staring at a whiteboard full of rectangles and hexagons thinking: <em>where does the data fit in this mess?</em></p>

<p>Maybe you’ve read about the <a href="http://microservices.io/patterns/data/database-per-service.html">“Database per service”</a> pattern and now you’re wondering what your requirements are on <a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">data consistency</a>. Or somebody told you about <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> but you don’t know it’s advantages and disadvantages.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="/images/posts/2018-05-26/MigratingToMicroservicesDatabases.png" title="’Migrating to Micro-services databases book cover’" ></a></p>

<p>Edson’s book opens with a brief recap of the micro-service world. Going from <em>“Why microservices”</em> to <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a> and <a href="https://martinfowler.com/bliki/CanaryRelease.html">Canary deployment</a>, the book provides a <strong>super-quick explanation of each concept without going into many details.</strong></p>

<p>By contrast the second part of the book deeps dive into <strong>how to handle the data</strong> of your micro-services. <em>Chapter 3</em> explains how to do <strong>Zero downtime migration</strong> of your relational DB and which tools to use.</p>

<p>On <em>Chapter 4</em> Edson introduces the different <strong>consistency models</strong> and compares <strong>CRUD Vs. CQRS</strong> (explaining also <em>Event sourcing</em>)</p>

<p><strong>The last chapter is, to me, the best.</strong> <em>Chapter 5</em>  contains a recount and description of some of the different <strong>Integration Strategies</strong> we might want to consider when <em>migrating the monolith</em>. Each strategy is briefly described, and we are also provided with an assessment of <strong>applicability</strong> and section of <strong>considerations</strong> to keep in mind if using this strategy.</p>

<h2>Conclusion</h2>

<p>The hardest part of design is not knowing the architectural patterns or the different techniques to solve a problem, but <strong>knowing which solution is a good fit to which problem.</strong> Yanaga’s book serves as a good <strong>catalog of possible solutions</strong> to consider, when working with data on micro-services. It provides a concise analysis of each <strong>strategy</strong> and helps us avoid those  <em>”I wish I’ve thought this better before writing the code”</em> moments.</p>
]]></content>
  </entry>
  
</feed>
