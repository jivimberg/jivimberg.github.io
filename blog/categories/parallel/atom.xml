<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Parallel | Coding Forest]]></title>
  <link href="http://jivimberg.github.io/blog/categories/parallel/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2018-08-08T11:24:44-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parallel Map in Java (From Kotlin)]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/07/parallel-map-in-java/"/>
    <updated>2018-05-07T13:19:58-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/07/parallel-map-in-java</id>
    <content type="html"><![CDATA[<p>Following up of my <a href="http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/">previous post</a>, I was curious how a parallel map operation would look like using Java’s <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--"><code>parallelStream</code></a>. Here’s what I find out.</p>

<!--more-->


<p>In Java to use <code>map</code> you do:</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors

//sampleStart
fun main(args: Array<String>) {
    val output = (1..100).toList()
            .stream()
            .map { it * 2 }
            .collect(Collectors.toList())
    println(output)
}
//sampleEnd
</xmp>


<p><em>(In case you’re wondering I’m using Java collections from Kotlin)</em></p>

<p>And to do a <em>parallel</em> <code>map</code> you can simply do:</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors

//sampleStart
fun main(args: Array<String>) {
    val output = (1..100).toList()
            .parallelStream()
            .map { it * 2 }
            .collect(Collectors.toList())
    println(output)
}
//sampleEnd
</xmp>


<p>No need to write a special <code>pmap</code> operation like we did for Kotlin. Just call <code>parallelStream</code> and that’s it. <em>Pretty cool, right?</em></p>

<p>I was curious about how this solution <strong>compared to the one on <a href="http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/">my previous post</a></strong>,  so I decided to time it too.</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors
import kotlin.system.measureTimeMillis

//sampleStart
fun main(args: Array<String>) {
    val time = measureTimeMillis {
        val output = (1..100).toList()
                .parallelStream()
                .map {
                    Thread.sleep(100)
                    it * 2
                }
                .collect(Collectors.toList())

        println(output)
    }

    println("Total time: $time")
}
//sampleEnd
</xmp>


<p>In this case instead I’m actually setting a delay of <strong>100 milliseconds</strong> (instead of <em>1,000</em> like I did on my previous post)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I was expecting the total time to be something close to <em>100 milliseconds</em>, just like it was for the Kotlin <code>pmap</code>, <strong>instead I got something close to 5,000</strong>.</p>

<p>Turns out <code>parallelStream</code> uses the default <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"><em>ForkJoinPool.commonPool</em></a> which by default has a parallelism level <strong>equal to the number of available processors.</strong> In this case 2 processors: <em>100 operations * 100 milliseconds / 2 processors = 5000 milliseconds</em>. You can check the number of available processors simply by adding this line to the script:</p>

<p><code>println(Runtime.getRuntime().availableProcessors())</code></p>

<h2>But, I want more parallelism!</h2>

<p>What if we want to increase the parallelism level? There are <em>2 ways to achieve this.</em></p>

<p><em>The first one</em> is to make our code <strong>run in a custom thread pool</strong> of our choice. Unfortunately Java doesn’t make it easy to provide a custom thread pool, but <a href="http://www.baeldung.com/java-8-parallel-streams-custom-threadpool">the workaround is not so bad either</a>.</p>

<p><em>The other option</em> is to change the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"><em>ForkJoinPool.commonPool</em></a> parallelism level by system property like this:</p>

<p><code>System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "10")</code></p>

<p>Unfortunately this doesn’t work on Kotlin Playground so you’ll have to try it on your own machine or take my word that it works.</p>

<p>It’s worth noting that with the second approach you’d still be using the same default thread pool <strong>shared globally across the app</strong>. As you can imagine this can be <strong>EXTREMELY BAD</strong> as you’d be basically depleting resources for the whole application. Some would even argue <a href="https://zeroturnaround.com/rebellabs/java-parallel-streams-are-bad-for-your-health/">this is reason enough not to use <code>parallelStream</code> at all</a>. Although that seems a little extreme if you ask me.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Otherwise the execution takes too long and doesn’t complete. Probably a limitation of Kotlin Playground<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Map in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/04/parallel-map-in-kotlin/"/>
    <updated>2018-05-04T16:32:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/04/parallel-map-in-kotlin</id>
    <content type="html"><![CDATA[<p>Ever wonder how to run <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a>  in parallel using coroutines? This is how you do it.</p>

<!--more-->




<xmp class="kotlin-code" data-highlight-only>
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking

//sampleStart
fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleEnd
</xmp>


<p><em>Confused?</em> Let’s unpack it.</p>

<p>First we have the <strong>function signature</strong> which is pretty similar to the actual <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a> extension function signature on <code>Iterable</code>. The only thing we added was the <code>suspend</code> keyword on the parameter, which let’s us use <code>suspend</code> functions in <code>f</code> (as we’re going to see in a moment).</p>

<p>Then we have the <code>runBlocking</code> which let’s us bridge the blocking code with the coroutine world. As the name suggests <strong>this will block the current thread until everything inside the block finishes executing</strong>. Which is exactly what we want.</p>

<p>Finally we have the actual execution which is divided in 2 steps. The <em>first step</em> <strong>launches a new coroutine for each function application</strong> using <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/async.html"><code>async</code></a>. This effectively wraps the type of each element with  <code>Deferred</code>. In the <em>second step</em> we wait for all function applications to complete and unwrap the result with <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/await.html"><code>await</code></a>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>How to use it</h2>

<p>Easy! <strong>Just like you use <code>map</code></strong>:</p>

<xmp class="kotlin-code">
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking

fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleStart
fun main(args: Array<String>) {
    println((1..100).pmap { it * 2 })
}
//sampleEnd
</xmp>


<p>(Psst! I’m using <a href="https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/">Kotlin Playground</a> so you can actually run this code!)</p>

<h2>Prove that it’s running in parallel</h2>

<p>Ok so let’s resort to the good old <code>delay</code> to prove that this is actually running in parallel. We are going to add a <strong>delay of 1 second</strong> on each multiplication and measure the time it takes to run.</p>

<p>Running over <em>100 elements</em> the result should be: <strong>close to 1,000 milliseconds if it’s running in parallel</strong> and close to <em>100,000 milliseconds if it’s running sequentially</em>.</p>

<xmp class="kotlin-code">
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking
import kotlin.system.measureTimeMillis
import kotlinx.coroutines.experimental.delay

fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleStart
fun main(args: Array<String>) {
    val time = measureTimeMillis {
        val output = (1..100).pmap {
            delay(1000)
            it * 2
        }

        println(output)
    }

    println("Total time: $time")
}
//sampleEnd
</xmp>




<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Since I’m not explicitly passing any  <code>CoroutineContext</code> the <code>DefaultDispatcher</code> will be used. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
