<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coroutines | Coding Forest]]></title>
  <link href="http://jivimberg.io/blog/categories/coroutines/atom.xml" rel="self"/>
  <link href="http://jivimberg.io/"/>
  <updated>2023-09-13T06:18:17+00:00</updated>
  <id>http://jivimberg.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Different Kinds of Channels in Kotlin]]></title>
    <link href="http://jivimberg.io/blog/2019/04/18/different-kinds-of-channels-in-kotlin/"/>
    <updated>2019-04-18T07:59:14-07:00</updated>
    <id>http://jivimberg.io/blog/2019/04/18/different-kinds-of-channels-in-kotlin</id>
    <content type="html"><![CDATA[<p>Overview of the different kinds of Kotlin channels and their behaviors.</p>

<!--more-->


<p><img class="center" src="/images/posts/2019-04-18/Channels.gif" width="600" title="‘Channels animation’" ></p>

<h2>Rendezvous</h2>

<p><img class="right" src="/images/posts/2019-04-18/baton.jpg" width="250" title="‘Passing the baton’" ></p>

<p>In Rendezvous channels capacity is 0. Which means the channel has no buffer at all. Elements are transferred only when sender and receiver meet. Which is literally what <em>Rendezvous</em> means. I like to picture it as a <a href="https://en.wikipedia.org/wiki/Relay_race">relay race</a> where the runners need to meet at one point to pass the baton.</p>

<p>In technical terms this means that <code>send</code> <em>suspends</em> until another coroutine invokes <code>receive</code>, and <code>receive</code> <em>suspends</em> until another coroutine invokes <code>send</code>.</p>

<h2>Buffered</h2>

<p>Buffered channels have a positive capacity but are not <code>Unlimited</code>. Calling <code>send</code> <em>suspends</em> only if the buffer is full. And calling <code>receive</code> <em>suspends</em> only if buffer is empty (i.e. there are no more messages in the channel).</p>

<h2>Unlimited</h2>

<p>You guessed it. Unlimited buffer. Sender will never <em>suspend</em> on <code>send</code>.</p>

<p>But there’s no such thing as <em>Unlimited</em>, right? The implementation uses a linked-list buffer so your only constraint is memory.</p>

<h2>Conflated</h2>

<p>This is the oddball. The sender never <em>suspends</em>, but the channel offers at most one element at any given time. When a new element comes, the previous element in the channel (if any) is discarded. The receiver only gets the most recent element sent. Previous elements are lost.</p>

<p><img class="right-fill" src="/images/signatures/signature7.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQS Consumer Using Kotlin Coroutines]]></title>
    <link href="http://jivimberg.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines/"/>
    <updated>2019-02-23T16:52:48-03:00</updated>
    <id>http://jivimberg.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines</id>
    <content type="html"><![CDATA[<p>Today we’ll see how to write a SQS consumer that processes messages in a parallel, non-blocking way, using Kotlin coroutines.</p>

<!--more-->


<h2>The pool of workers pattern</h2>

<p>After some experimentation I’ve opted for using a <em>pool of workers</em> for writing the consumer. For an introduction on the pattern and how to implement it in Kotlin I strongly suggested watching Roman’s talk from 2018 Kotlin Conf.</p>

<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/a3agLJQ6vt8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>


<p>For our particular solution we’ll need:</p>

<ol>
<li>One coroutine that periodically retrieves the messages (<strong>MsgReceiver</strong>).</li>
<li>Multiple <strong>workers</strong> that process the receiving messages in parallel without blocking.</li>
<li>A <strong>channel</strong> to communicate between the <em>MsgReceiver</em> coroutine and the <em>Workers</em>.</li>
</ol>


<p><img class="center" src="/images/posts/2019-03-10/consumerDiagram.png" width="800" title="‘SQS consumer diagram’" ></p>

<h3><em>fun start()</em></h3>

<p>Let’s start by creating the elements we mentioned in the previous section. We’ll do this in the <code>start()</code> method.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
fun start() = launch {
        val messageChannel = Channel<Message>()
        repeat(N_WORKERS) { launchWorker(messageChannel) }
        launchMsgReceiver(messageChannel)
    }
</xmp>


<p>This function launches a coroutine that creates: the channel, <em>N</em> <em>workers</em> and the <em>MsgReceiver</em>.</p>

<p>Don’t worry too much about how we’re able to call <code>launch</code> here. I’ll go back to this later.</p>

<h3>Message receiver</h3>

<p>Now it’s time to write the code for the message receiver:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private fun CoroutineScope.launchMsgReceiver(channel: SendChannel<Message>) = launch {
        repeatUntilCancelled {
            val receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(SQS_URL)
                    .waitTimeSeconds(20)
                    .maxNumberOfMessages(10)
                    .build()
    
            val messages = sqs.receiveMessage(receiveRequest).await().messages()
            println("${Thread.currentThread().name} Retrieved ${messages.size} messages")
    
            messages.forEach {
                channel.send(it)
            }
        }
    }
</xmp>


<p>This function takes a <code>SendChannel</code> that it’ll use to communicate with the <em>worker</em> coroutines.</p>

<p>It is written as a <code>CoroutineScope</code> to denote that it creates a new coroutine and does not wait for it to complete.</p>

<p>Next thing you’ll notice is that all the code is wrapped with a <code>repeatUntilCancelled</code>. This is a helper function that will repeat our block infinitely, and make sure it keeps running even in the face of exceptions. It will only stop when the coroutine is cancelled. We’ll use this little trick on our <em>Worker</em> code too. Here’s the code, courtesy of <a href="https://twitter.com/_fletchr">@_fletchr</a>:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
import kotlinx.coroutines.CancellationException
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.isActive
import kotlinx.coroutines.yield
import java.lang.Thread.currentThread

//sampleStart
suspend fun CoroutineScope.repeatUntilCancelled(block: suspend () -> Unit) {
    while (isActive) {
        try {
            block()
            yield()
        } catch (ex: CancellationException) {
            println("coroutine on ${currentThread().name} cancelled")
        } catch (ex: Exception) {
            println("${currentThread().name} failed with {$ex}. Retrying...")
            ex.printStackTrace()
        }
    }
    
    println("coroutine on ${currentThread().name} exiting")
}
//sampleEnd
</xmp>


<p>We have while loop on the <code>isActive</code> property from the CoroutineScope that will guarantee we keep repeating the block until the coroutine is no longer active (i.e. it has been cancelled). We have access to this property because <code>repeatUntilCancelled</code> is an extension function on CoroutineScope.</p>

<p>Having the <em>try/catch</em> guarantees the coroutine will keep looping even if the block throws an exception (like a connection timeout reading messages from the queue, for example). <code>CancellationException</code> is the exception used by the coroutines machinery to signal the cancellation of the coroutine. We handle it as a special case because we don&rsquo;t want to print a message saying <em>&ldquo;Retrying&hellip;&rdquo;</em>, because the while loop is about to break.</p>

<p>The call to <code>yield()</code> is needed to avoid the case where all threads are busy with CPU intensive coroutines that do not suspend, and thus there&rsquo;s no chance for other coroutines to execute.</p>

<p>Ok, back to our <code>launchMsgReceiver</code> function!  The next part is the actual polling for messages. You’ll notice that I’m maxing out the <code>waitTimeSeconds</code>  so the call waits up to <em>20 seconds</em>, for at least one message to be available before returning empty. I’m also picking the biggest value for the number of messages being retrieved at once (10), because the whole point of my consumer is to be able to process as many of them in parallel, as possible.</p>

<p>Next line is the <code>receiveMessage</code> call on the SQS client. One extremely important detail is that <strong>I’m using the <code>SqsAsyncClient</code> from <a href="https://github.com/aws/aws-sdk-java-v2">AWS Java SDK v2</a></strong>. Why? Because I don’t want my thread to be blocked waiting for messages to appear. And the <code>SqsAsyncClient</code> of Java SKD v1 returns only a <code>Future</code> (because it needs to be compatible with Java 1.6) making it harder to integrate with the coroutines world. Instead, the new version returns <code>CompletableFuture</code>, which lets us call <code>await()</code> (from <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-jdk8/">Kotlinx Coroutines JDK8</a>) to suspend our coroutine until the result is ready <strong>without blocking the thread</strong>.</p>

<p>Finally we iterate over the messages and send them through the channel using  <code>channel.send(it)</code> . Because of the way <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html">unbuffered channels</a> work the <code>send</code> call will suspend if there is no worker available to receive the message. This is a very nice property because it means <strong>we get <a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7"><em>backpressure</em></a> for free</strong>. If at some point our workers are not able to process the messages fast enough, the <em>MsgReceiver</em> will just wait (suspend) until some worker becomes available, instead of fetching even more messages, drowning the workers.</p>

<h3>Worker</h3>

<p>Now let’s take a look at the worker that will process the messages:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
 private fun CoroutineScope.launchWorker(channel: ReceiveChannel<Message>) = launch {
        repeatUntilCancelled {
            for (msg in channel) {
                try {
                    processMsg(msg)
                    deleteMessage(msg)
                } catch (ex: Exception) {
                    println("${Thread.currentThread().name} exception trying to process message ${msg.body()}")
                    ex.printStackTrace()
                    changeVisibility(msg)
                }
            }
        }
    }
</xmp>


<p>The first lines are pretty similar to the <em>MsgReceiver</em>. We’re again launching a coroutine and not waiting for it to complete, and thus we have the <code>launch</code> call and our function is an extension of <code>CoroutineScope</code>. We’re also wrapping everything in a <code>repeatUntilCancelled</code> for the same reasons we used it before. The only difference you might notice is that it takes a <code>ReceiveChannel</code> instead of <code>SendChannel</code>, because this is the receiving end of the communication.</p>

<p>Next we use a <code>for</code> loop to consume messages from the channel. It will suspend the coroutine if there are no new messages in the channel. The use of <code>for</code> is important because we’re doing <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html#fan-out">fan-out</a>, we have multiple coroutines consuming from the same channel. Consuming with <code>for</code> guarantees us that if one coroutine fails it won’t cancel the underlying channel, which is what would happen if we had used <code>consumeEach</code> to go through the messages, instead.</p>

<p>Also channels have the nice property of <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html#channels-are-fair">being fair</a>. Meaning that the first coroutine that invoke <code>receive</code> gets the message. FIFO style.</p>

<p>If something fails while processing the message we (try to) <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">change the visibility timeout</a> so that the message will show up in the queue again sooner, and picked up for re-processing.</p>

<p>Let’s now take a look at <em>processMessage(msg)</em> implementation:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun processMsg(message: Message) {
        println("${Thread.currentThread().name} Started processing message: ${message.body()}")
        delay((1000L..2000L).random())
        println("${Thread.currentThread().name} Finished processing of message: ${message.body()}")
    }
</xmp>


<p>As you can tell, this is a mock implementation. There’s nothing interesting happening here. We just <code>delay</code> for a few seconds and then continue saying that message has been processed. This is where you’d put your actual logic. Or better yet, if you plan to reuse your SQS consumer implementation <strong>you might want to turn this into a Lambda expression that can be passed as a parameter</strong>.</p>

<p>Finally let’s see <em>deleteMsg(msg)</em> and <em>changeVisibility(msg)</em>:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun deleteMessage(message: Message) {
        sqs.deleteMessage { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
        }.await()
        println("${Thread.currentThread().name} Message deleted: ${message.body()}")
    }
    
    private suspend fun changeVisibility(message: Message) {
        sqs.changeMessageVisibility { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
            req.visibilityTimeout(10)
        }.await()
        println("${Thread.currentThread().name} Changed visibility of message: ${message.body()}")
    }
</xmp>


<p>This 2 methods follow the same pattern: call the <code>SQSAsyncClient</code> corresponding method then <code>await()</code>, finally log.</p>

<h3>Contexts, dispatchers and supervisors</h3>

<p>Now that we have a good grasp on the different parts of our solution, let’s pay closer attention to how the coroutines are created and dispatched.</p>

<p>One of the central tenets of Kotlin coroutines is <em><a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#structured-concurrency">structured concurrency</a></em>. <em>Structured concurrency</em> helps us write code that properly cleans up active coroutines in case of exceptions. If you think you’re a hardcore developer and instead launch your coroutines using <code>GlobalScope.launch { ... }</code>, then you risk leaking coroutines when something fails (check <a href="https://twitter.com/relizarov">@relizarov</a>’s <a href="https://medium.com/@elizarov/structured-concurrency-722d765aa952">article</a> to see an example of this). So, how’s are our coroutines structured?</p>

<p><img class="center" src="/images/posts/2019-03-10/coroutinesScope.png" width="400" title="‘coroutines structure’" ></p>

<p>To mark the lifecycle of our coroutines we extend our class with <code>CoroutineScope</code> and provide a context by overriding <code>corroutinesContext: CorroutineContext</code>. This is the context that’ll be used by our root coroutine, the one started by the <code>launch</code> call on the <code>start()</code> function, at the beginning of this post. Since we want our coroutines to match the lifecycle of our class we’ve added a <code>close()</code> method that clients can call to cancel all the coroutines in the consumer. If you’re using some kind of framework you might want to tie this function the lifecycle of the class in some other way.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
package com.jivimberg.sqs

import kotlinx.coroutines.\*
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.SendChannel
import kotlinx.coroutines.future.await
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.sqs.SqsAsyncClient
import software.amazon.awssdk.services.sqs.model.Message
import software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest
import kotlin.coroutines.CoroutineContext

//sampleStart

class SqsSampleConsumerChannels(
        private val sqs: SqsAsyncClient
) : CoroutineScope {

    private val supervisorJob = SupervisorJob()
    override val coroutineContext: CoroutineContext
        get() = Dispatchers.IO + supervisorJob
    
    fun start() = launch {
        val messageChannel = Channel<Message>()
        repeat(N_WORKERS) { launchWorker(messageChannel) }
        launchMsgReceiver(messageChannel)
    }
    
    fun stop() {
        supervisorJob.cancel()
    }

//sampleEnd

    private fun CoroutineScope.launchMsgReceiver(channel: SendChannel<Message>) = launch {
        repeatUntilCancelled {
            val receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(SQS_URL)
                    .waitTimeSeconds(20)
                    .maxNumberOfMessages(10)
                    .build()
    
            val messages = sqs.receiveMessage(receiveRequest).await().messages()
            println("${Thread.currentThread().name} Retrieved ${messages.size} messages")
    
            messages.forEach {
                channel.send(it)
            }
        }
    }
    
    private fun CoroutineScope.launchWorker(channel: ReceiveChannel<Message>) = launch {
        repeatUntilCancelled {
            for (msg in channel) {
                try {
                    processMsg(msg)
                    deleteMessage(msg)
                } catch (ex: Exception) {
                    println("${Thread.currentThread().name} exception trying to process message ${msg.body()}")
                    ex.printStackTrace()
                    changeVisibility(msg)
                }
            }
        }
    }
    
    private suspend fun processMsg(message: Message) {
        println("${Thread.currentThread().name} Started processing message: ${message.body()}")
        delay((1000L..2000L).random())
        println("${Thread.currentThread().name} Finished processing of message: ${message.body()}")
    }
    
    private suspend fun deleteMessage(message: Message) {
        sqs.deleteMessage { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
        }.await()
        println("${Thread.currentThread().name} Message deleted: ${message.body()}")
    }
    
    private suspend fun changeVisibility(message: Message) {
        sqs.changeMessageVisibility { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
            req.visibilityTimeout(10)
        }.await()
        println("${Thread.currentThread().name} Changed visibility of message: ${message.body()}")
    }
}

fun main() = runBlocking {
    println("${Thread.currentThread().name} Starting program")
    val sqs = SqsAsyncClient.builder()
            .region(Region.US_EAST_1)
            .build()
    val consumer = SqsSampleConsumerChannels(sqs)
    consumer.start()
    delay(30000)
    consumer.stop()
}

private const val N\_WORKERS = 4
</xmp>


<p>Our <code>coroutineContext</code> has 2 elements: the <code>Dispatcher</code> and the <code>supervisorJob</code> (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/-coroutine-context/plus.html">the <code>+</code> operation</a> concatenates both elements in a new <code>CoroutineContext</code> ).</p>

<p>The <em>Dispatcher</em> marks which thread our coroutine will run on. In our case I used <code>Dispatchers.IO</code> that uses a shared pool of threads for doing IO (more details <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html">here</a>). This is because most of the time my coroutines are doing IO operations for: receiving messages, deleting them, changing visibility, etc. If, in your case, processing a message requires a CPU intensive calculation you’d use <code>Dispatchers.Default</code> through the <code>withContext</code> function like this:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun processMsg(message: Message) = withContext(Dispatchers.Default) {
        // Your code here
    }
</xmp>


<h2>In case of exception</h2>

<p>Because we’re responsible developers, let’s see what would happen if something were to fail.</p>

<p>As a first line of defense we know both our <em>Workers</em> and the <em>MsgReceiver</em> are running in <code>repeatUntilCancelled</code> loops, so any exception should be logged and ignored. This is ok for us because once the visibility timeout is over, the message will re-appear in the queue for another worker to consume. Still, to be extra careful, let’s consider what would happen with our coroutines in case of exception if we didn’t have <code>repeatUntilCancelled</code>s.</p>

<p>The whole premise of <a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#structured-concurrency">structured concurrency</a> is to avoid leaking coroutines in case of failure. That’s why, by default, <strong>whenever a child coroutine terminates with exception its parent and siblings are cancelled too</strong>. This is a nice property, but not quite what we want in this case. We don’t want all workers to be cancelled because one worker threw an exception. That’s why we use <code>supervisorJob</code> as part of our <code>coroutineContext</code>. <a href="https://kotlinlang.org/docs/reference/coroutines/exception-handling.html#supervision-job">SupervisorJob</a> is like a regular job, with the exception that cancellation is propagated only downwards.</p>

<p><img class="center" src="/images/posts/2019-03-10/Supervisor.png" width="600" title="‘Regular Job vs. Supervisor Job’" ></p>

<p>Finally, don’t forget to configure a <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">dead letter queue</a> for those messages that can’t be processed even after multiple retries.</p>

<hr />

<p>That’s all! You can find all the code from this post in <a href="https://gist.github.com/jivimberg/b0f4f94871c6f3e7d17fae1106c28047">this gist</a>. If you have any improvement to suggest, I’d ❤️ to hear about it. Leave me a comment down there.</p>

<p><img class="right-fill" src="/images/signatures/signature11.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Map in Kotlin]]></title>
    <link href="http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/"/>
    <updated>2018-05-04T16:32:00-07:00</updated>
    <id>http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin</id>
    <content type="html"><![CDATA[<p>Ever wonder how to run <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a>  in parallel using coroutines? This is how you do it.</p>

<!--more-->




<xmp class="kotlin-code" data-highlight-only theme="darcula">
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.awaitAll

//sampleStart
suspend fun <A, B> Iterable<A>.pmap(f: suspend (A) -> B): List<B> = coroutineScope {
    map { async { f(it) } }.awaitAll()
}
//sampleEnd
</xmp>


<p><em>Confused?</em> Let’s unpack it.</p>

<p>First we have the <strong>function signature</strong> which is pretty similar to the actual <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a> extension function signature on <code>Iterable</code>. The only thing we added were the <code>suspend</code> keywords. One for our function and another one on the parameter.</p>

<p>Then we have the <code>coroutineScope</code> that marks the scope in which the <code>async</code> calls are going to be executed. This way if something goes wrong and an exception is thrown, all coroutines that were launched in this scope are cancelled. That&rsquo;s the main benefit of <a href="https://kotlinlang.org/docs/reference/coroutines/composing-suspending-functions.html#structured-concurrency-with-async">structured concurrency</a>.</p>

<p>Finally we have the actual execution which is divided in 2 steps: The <em>first step</em> <strong>launches a new coroutine for each function application</strong> using <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/async.html"><code>async</code></a>. This effectively wraps the type of each element with  <code>Deferred</code>.</p>

<p>In the <em>second step</em> we wait for all function invocations to complete and unwrap the result using <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html"><code>awaitAll()</code></a>. This is similar to doing <code>.map { it.await() }</code> but better because <code>awaitAll()</code> will fail as soon as one of the invocations fails, instead of having to sequentially wait for the call to <code>await()</code> on the failing deferred. For example, let’s say we call <code>pmap</code> with 3 elements. <code>f(0)</code> will complete in 2 minutes, <code>f(1)</code> completes in 5 minutes and <code>f(3)</code> fails immediately. With <code>.map { it.await() }</code> we’d have to wait for <code>f(1)</code> and <code>f(2)</code> completion before seeing the <code>f(3)</code> failure, whereas <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/await-all.html"><code>awaitAll()</code></a> will know that something failed right away.</p>

<h2>How to use it</h2>

<p>Easy! <strong>Just like you use <code>map</code></strong>:</p>

<xmp class="kotlin-code" theme="darcula">
import kotlinx.coroutines.async
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.Dispatchers

suspend fun <A, B> Iterable<A>.pmap(f: suspend (A) -> B): List<B> = coroutineScope {
    map { async { f(it) } }.awaitAll()
}
//sampleStart
fun main(args: Array<String>) = runBlocking(Dispatchers.Default) {
    println((1..100).pmap { it * 2 })
}
//sampleEnd
</xmp>


<p>(Psst! I’m using <a href="https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/">Kotlin Playground</a> so you can actually run this code!)</p>

<h2>Prove that it’s running in parallel</h2>

<p>Ok so let’s resort to the good old <code>delay</code> to prove that this is actually running in parallel. We are going to add a <strong>delay of 1 second</strong> on each multiplication and measure the time it takes to run.</p>

<p>Running over <em>100 elements</em> the result should be: <strong>close to 1,000 milliseconds if it’s running in parallel</strong> and close to <em>100,000 milliseconds if it’s running sequentially</em>.</p>

<xmp class="kotlin-code" theme="darcula">
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import kotlin.system.measureTimeMillis
import kotlinx.coroutines.delay
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.Dispatchers

suspend fun <A, B> Iterable<A>.pmap(f: suspend (A) -> B): List<B> = coroutineScope {
    map { async { f(it) } }.awaitAll()
}
//sampleStart
fun main(args: Array<String>) = runBlocking(Dispatchers.Default) {
    val time = measureTimeMillis {
        val output = (1..100).pmap {
            delay(1000)
            it * 2
        }
    
        println(output)
    }
    
    println("Total time: $time")
}
//sampleEnd
</xmp>


<h2>Beware of <code>runBlocking</code></h2>

<p>A previous iteration of this article proposed the following solution:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.awaitAll

//sampleStart
// DON'T DO THIS
fun <A, B> Iterable<A>.pmapOld(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.awaitAll()
}
//sampleEnd
</xmp>


<p>As <a href="https://disqus.com/by/disqus_VE5B5eZQX9/">Gildor</a> pointed out in the comments, <a href="http://disq.us/p/1zbc6a7">this a very bad idea</a>. By default <a href="https://kotlinlang.org/docs/reference/coroutines/coroutine-context-and-dispatchers.html#unconfined-vs-confined-dispatcher"><code>runBlocking</code> uses a dispatcher that is confined to the invoker thread</a>. Which means we are forcefully blocking the thread until the execution of <code>pmap</code> finishes, instead of letting the caller decide how the execution should go.</p>

<p>Note that the same would happen if we simply wrap our <code>pmap</code> call with <code>runBlocking</code>.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.awaitAll


suspend fun <A, B> Iterable<A>.pmap(f: suspend (A) -> B): List<B> = coroutineScope {
    map { async { f(it) } }.awaitAll()
}

//sampleStart
// DON'T DO THIS
fun main() = runBlocking<Unit> {
    (1..100).pmap { fibonnaci(it.toBigInteger()) }
}
//sampleEnd

</xmp>


<p>This is because <code>coroutineScope</code> basically inherits the caller’s context. So again we’d be running in the single thread confined Dispatcher <code>runBlocking</code> gets by default. Which may, or may not, be OK depending on your use case. Remember that you can always change the Dispatcher used by <code>runBlocking</code> by passing one: <code>runBlocking(Dispatchers.IO)</code>.</p>

<p><img class="right-fill" src="/images/signatures/signature10.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Channels in Kotlin - an Example]]></title>
    <link href="http://jivimberg.io/blog/2018/04/23/go-channels-in-kotlin-an-example/"/>
    <updated>2018-04-23T08:37:13-07:00</updated>
    <id>http://jivimberg.io/blog/2018/04/23/go-channels-in-kotlin-an-example</id>
    <content type="html"><![CDATA[<p>This is the story of a real use case that was solved by using <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#channels">Go style channels in Kotlin</a>.</p>

<!--more-->


<h2>The use case</h2>

<p>At work we have this CI/CD pipeline to get our code into production, and we needed a way of visualizing the Merge Requests that currently in the pipeline.</p>

<p>To make this happen we have 2 things:</p>

<ul>
<li>The GitLab service, accessible through <a href="https://docs.gitlab.com/ee/api">REST</a></li>
<li>The commit SHA of the last Merge Request that went into production</li>
</ul>


<p><img class="center" src="/images/posts/2018-04-24/useCase.png" title="‘Use Case’" ></p>

<p>Now the problem is that <a href="https://docs.gitlab.com/ee/api/merge_requests.html">Merge Request endpoint</a> doesn’t allow for this kind of query. You can only search Merge Requests by <em>title</em> or <em>description</em> which is not what we want. So our only option is to get the latest Merge Requests up until we see the one that is in production.</p>

<p>The REST endpoint is paginated, and by default each response will contain 20 items. But what happens if the Merge Request we are looking for is not in those first 20 elements? <strong>We’ll need to keep making requests for new pages until we find the item we’re interested in</strong>. It’s not the most elegant solution but we’ll have to make do with what we have.</p>

<h2>Our first approach: imperative</h2>

<p>Our first try of putting that last paragraph into code looked something like this:</p>

<p><div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ImperativeApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequests(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    var page = 1
    var mergeRequests = emptyList&lt;MergeRequest&gt;()
    
    // Fetch pages until we have the one that contains the commit we are looking for 
    while (mergeRequests.none { it.commitSha == lastProductionSha }) {
        mergeRequests += gitLabService.fetchMergeRequests(page++)
    }

    // Trim the Merge Requests that are already in production
    val indexOfLastMergeRequestInProduction = mergeRequests.indexOfLast { it.commitSha == lastProductionSha }
    return mergeRequests.subList(0, indexOfLastMergeRequestInProduction)
}</code></pre></noscript></div>
</p>

<p>Not pretty, but it does the job.</p>

<p>The next attempt we made was implementing it as an <code>Iterable</code>. And it was even uglier! Believe me, you don’t even want to see that one. Your retina might burn just from looking at the <a href="https://gist.github.com/jivimberg/862c4ee1c72603a224d57b30eedf74fc#file-iterableapproach-kt">code…</a></p>

<h2>Using <em>buildSequence</em></h2>

<p>We kept looking for a way of making the code cleaner, so we decide to try using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/build-sequence.html"><code>buildSequence</code></a>. It seemed like a good idea because a sequence can be thought as an <code>Iterator</code> where the values are evaluated lazily. So potentially <code>Sequences</code> can be infinite.</p>

<p>To make use of this feature we needed to add the <a href="https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core">kotlinx-coroutines-core</a>
 to our project. Anyway, this is how the code looked like:</p>

<p><div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=SequenceApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsSequence(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    val mrSequence = buildSequence {
        var page = 1
        while (true) yieldAll(gitLabService.fetchMergeRequests(page++))
    }

    return mrSequence
            .takeWhile { it.commitSha != lastProductionSha }
            .toList()
}</code></pre></noscript></div>
</p>

<p>Let’s unpack it:</p>

<ol>
<li>First we have the sequence declaration. We call the build sequence function which receives a <em>lambda with receiver</em>: <code>SequenceBuilder&lt;T&gt;.() -&gt; Unit</code>. This allows us to call the methods <code>yield</code> and <code>yieldAll</code> once we have calculated the values to be produced on this sequence. We use <code>yieldAll</code> in this case because we receive a Collection of values from the REST call, otherwise the type of the sequence would be: <code>Sequence&lt;List&lt;MergeReques&gt;&gt;</code> whereas we only need <code>Sequence&lt;MergeRequest&gt;</code></li>
<li>We use <code>takeWhile { ... }</code> to only get the Merge Requests that are <strong>not</strong> in production.</li>
<li>We convert the sequence to a List and return</li>
</ol>


<p>You might be thinking <strong>”Ok but, why is this better than the imperative approach?”</strong></p>

<p>For starters this code is easier to read. This alone is reason enough in my book, as the quote goes:</p>

<blockquote><p><em>”Any fool can write code that a computer can understand. <strong>Good programmers write code that humans can understand.</strong>”</em></p>

<p>Martin Fowler</p></blockquote>

<p>As a bonus by using a <code>Sequence</code> we get some extra flexibility. In the imperative approach the condition is right in the middle of the function. Using sequences we could easily have a function that generates the sequence and then write other functions that use it, leveraging all the awesome collection functions (<code>filter</code>, <code>find</code>, <code>take</code>, <code>drop</code>, etc).</p>

<p>It is important to note that when using sequences the evaluation is lazy (just like Java streams). In our case that means that <code>takeWhile</code> will only start once we call the <code>toList</code> function, because <code>toList</code> is a <em>terminal</em> operation.</p>

<p>So are we using coroutines now? <strong>YES!</strong> But… <code>buildSequence</code> is coroutine builder that creates a <em>synchronous coroutine</em>. This means that even thought it uses coroutines everything is executed sequentially.</p>

<h2>Using channels</h2>

<p>Finally we decided to go all in on coroutines by using channels. This is the result:</p>

<p><div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ChannelApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsChannel(gitLabService: GitLabService, lastProductionSha: String): ReceiveChannel&lt;MergeRequest&gt; {
    return produce {
        var page = 1
        while (true) {
            gitLabService.delayedFetchMergeRequests(page++).forEach { send(it) }
        }
    }.takeWhile { it.commitSha != lastProductionSha }
}

fun main(args: Array&lt;String&gt;) {
    val mrs = fetchMergeRequestsChannel(GitLabService(), &quot;04d78f5c7cd51c52d0482d08224ff6a214da12c1&quot;)

    runBlocking {
        delay(10, TimeUnit.SECONDS)
        mrs.consumeEach {
            println(&quot;consuming $it&quot;)
        }
    }
}</code></pre></noscript></div>
</p>

<p>Now we have a function that creates a channel, and we are using <code>consumeEach</code>  to receive each of the elements the channel sends. Since <code>consumeEach</code> is a suspending function <strong>we have to call it from a coroutine context</strong>, <code>runBlocking</code> helps us bridge the gap between blocking execution and the coroutines world.</p>

<p>With <code>ReceiveChannel</code> we have the flexibility of <code>Sequences</code>, but we also get one more thing: <strong>concurrency!</strong>. You can see that I’ve added an artificial <code>delay</code> call before beginning to consume the Merge Requests. This is to show that <strong>even before the receiver is ready to consume the channel, the producer has already started to fetch elements</strong>. In this case since we’re using an <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#buffered-channels"><em>unbuffered channel</em></a> only one send will be called before suspending the coroutine. But that’s all we need since in our case sending 1 element means that we’ve already fetched the whole first page!</p>
]]></content>
  </entry>
  
</feed>
