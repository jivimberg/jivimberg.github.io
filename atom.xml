<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[What I learned today]]></title>
  <link href="http://jivimberg.github.io/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2018-04-26T22:53:46-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jacoco & Gradle - How to Verify Coverage With Exclusions]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/26/gradle-verify-coverage-with-exclusions/"/>
    <updated>2018-04-26T08:49:52-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/26/gradle-verify-coverage-with-exclusions</id>
    <content type="html"><![CDATA[<p>A post about how to add exclusions to your Jacoco test coverage verification in Gradle.</p>

<!--more-->


<p>This is how you setup Jacoco to fail when the code doesn’t meet the expected coverage threshold:</p>

<div><script src='https://gist.github.com/ea79614ce9b80c29b03be8326586f238.js'></script>
<noscript><pre><code>apply plugin: &quot;jacoco”

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.79
            }
        }
    }
}


// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification  </code></pre></noscript></div>


<p>See that <code>rule</code>?  I’m not setting any particular <code>element</code> so <a href="https://docs.gradle.org/current/javadoc/org/gradle/testing/jacoco/tasks/rules/JacocoViolationRule.html#getElement--">by default it’ll set <em>BUNDLE</em></a>. <strong>This is just what I want as I’d like to set a threshold for the coverage of the entire module.</strong></p>

<p>So if I need to exclude certain <strong>packages</strong> or <strong>files</strong> from the count this is what I do:</p>

<div><script src='https://gist.github.com/3ee0beaa9ab8b20b48e4273378dcd30e.js'></script>
<noscript><pre><code>jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    &#39;com/example/my/package/*&#39;,
                    &#39;com/example/service/MyApplication.kt&#39;,
                    &#39;com/google/protobuf/*&#39;
            ])
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.79
            }
        }
    }
}</code></pre></noscript></div>


<h3>Why <em>exclude</em> doesn’t work</h3>

<p>My first approach was setting the <code>excludes</code> property on the rule like this:</p>

<div><script src='https://gist.github.com/0962942885d4db41a9dad890aba5d225.js'></script>
<noscript><pre><code>jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    &#39;com/example/my/package/*&#39;,
                    &#39;com/example/service/MyApplication.kt&#39;,
                    &#39;com/google/protobuf/*&#39;
            ]
            limit {
                minimum = 0.79
            }
        }
    }
}</code></pre></noscript></div>


<p>The reason this doesn’t work is that <code>excludes</code> works on objects of the type defined with the <code>element</code> property. In this case the type is <em>BUNDLE</em> whereas the thing we want to exclude are <strong>packages</strong> and <strong>files</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Channels in Kotlin - an Example]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/23/go-channels-in-kotlin-an-example/"/>
    <updated>2018-04-23T08:37:13-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/23/go-channels-in-kotlin-an-example</id>
    <content type="html"><![CDATA[<p>This is the story of a real use case that was solved by using <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#channels">Go style channels in Kotlin</a>.</p>

<!--more-->


<h2>The use case</h2>

<p>At work we have this CI/CD pipeline to get our code into production, and we needed a way of visualizing the Merge Requests that currently in the pipeline.</p>

<p>To make this happen we have 2 things:</p>

<ul>
<li>The GitLab service, accessible through <a href="https://docs.gitlab.com/ee/api">REST</a></li>
<li>The commit SHA of the last Merge Request that went into production</li>
</ul>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-04-24/useCase.png" title="‘Use Case’" ></p>

<p>Now the problem is that <a href="https://docs.gitlab.com/ee/api/merge_requests.html">Merge Request endpoint</a> doesn’t allow for this kind of query. You can only search Merge Requests by <em>title</em> or <em>description</em> which is not what we want. So our only option is to get the latest Merge Requests up until we see the one that is in production.</p>

<p>The REST endpoint is paginated, and by default each response will contain 20 items. But what happens if the Merge Request we are looking for is not in those first 20 elements? <strong>We’ll need to keep making requests for new pages until we find the item we’re interested in</strong>. It’s not the most elegant solution but we’ll have to make do with what we have.</p>

<h2>Our first approach: imperative</h2>

<p>Our first try of putting that last paragraph into code looked something like this:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ImperativeApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequests(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    var page = 1
    var mergeRequests = emptyList&lt;MergeRequest&gt;()
    
    // Fetch pages until we have the one that contains the commit we are looking for 
    while (mergeRequests.none { it.commitSha == lastProductionSha }) {
        mergeRequests += gitLabService.fetchMergeRequests(page++)
    }

    // Trim the Merge Requests that are already in production
    val indexOfLastMergeRequestInProduction = mergeRequests.indexOfLast { it.commitSha == lastProductionSha }
    return mergeRequests.subList(0, indexOfLastMergeRequestInProduction)
}</code></pre></noscript></div>


<p>Not pretty, but it does the job.</p>

<p>The next attempt we made was implementing it as an <code>Iterable</code>. And it was even uglier! Believe me, you don’t even want to see that one. Your retina might burn just from looking at the <a href="https://gist.github.com/jivimberg/862c4ee1c72603a224d57b30eedf74fc#file-iterableapproach-kt">code…</a></p>

<h2>Using <em>buildSequence</em></h2>

<p>We kept looking for a way of making the code cleaner, so we decide to try using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/build-sequence.html"><code>buildSequence</code></a>. It seemed like a good idea because a sequence can be thought as an <code>Iterator</code> where the values are evaluated lazily. So potentially <code>Sequences</code> can be infinite.</p>

<p>To make use of this feature we needed to add the <a href="https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core">kotlinx-coroutines-core</a>
 to our project. Anyway, this is how the code looked like:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=SequenceApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsSequence(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    val mrSequence = buildSequence {
        var page = 1
        while (true) yieldAll(gitLabService.fetchMergeRequests(page++))
    }

    return mrSequence
            .takeWhile { it.commitSha != lastProductionSha }
            .toList()
}</code></pre></noscript></div>


<p>Let’s unpack it:</p>

<ol>
<li>First we have the sequence declaration. We call the build sequence function which receives a <em>lambda with receiver</em>: <code>SequenceBuilder&lt;T&gt;.() -&gt; Unit</code>. This allows us to call the methods <code>yield</code> and <code>yieldAll</code> once we have calculated the values to be produced on this sequence. We use <code>yieldAll</code> in this case because we receive a Collection of values from the REST call, otherwise the type of the sequence would be: <code>Sequence&lt;List&lt;MergeReques&gt;&gt;</code> whereas we only need <code>Sequence&lt;MergeRequest&gt;</code></li>
<li>We use <code>takeWhile { ... }</code> to only get the Merge Requests that are <strong>not</strong> in production.</li>
<li>We convert the sequence to a List and return</li>
</ol>


<p>You might be thinking <strong>”Ok but, why is this better than the imperative approach?”</strong></p>

<p>For starters this code is easier to read. This alone is reason enough in my book, as the quote goes:</p>

<blockquote><p><em>”Any fool can write code that a computer can understand. <strong>Good programmers write code that humans can understand.</strong>”</em></p>

<p>Martin Fowler</p></blockquote>

<p>As a bonus by using a <code>Sequence</code> we get some extra flexibility. In the imperative approach the condition is right in the middle of the function. Using sequences we could easily have a function that generates the sequence and then write other functions that use it, leveraging all the awesome collection functions (<code>filter</code>, <code>find</code>, <code>take</code>, <code>drop</code>, etc).</p>

<p>It is important to note that when using sequences the evaluation is lazy (just like Java streams). In our case that means that <code>takeWhile</code> will only start once we call the <code>toList</code> function, because <code>toList</code> is a <em>terminal</em> operation.</p>

<p>So are we using coroutines now? <strong>YES!</strong> But… <code>buildSequence</code> is coroutine builder that creates a <em>synchronous coroutine</em>. This means that even thought it uses coroutines everything is executed sequentially.</p>

<h2>Using channels</h2>

<p>Finally we decided to go all in on coroutines by using channels. This is the result:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ChannelApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsChannel(gitLabService: GitLabService, lastProductionSha: String): ReceiveChannel&lt;MergeRequest&gt; {
    return produce {
        var page = 1
        while (true) {
            gitLabService.delayedFetchMergeRequests(page++).forEach { send(it) }
        }
    }.takeWhile { it.commitSha != lastProductionSha }
}

fun main(args: Array&lt;String&gt;) {
    val mrs = fetchMergeRequestsChannel(GitLabService(), &quot;04d78f5c7cd51c52d0482d08224ff6a214da12c1&quot;)

    runBlocking {
        delay(10, TimeUnit.SECONDS)
        mrs.consumeEach {
            println(&quot;consuming $it&quot;)
        }
    }
}</code></pre></noscript></div>


<p>Now we have a function that creates a channel, and we are using <code>consumeEach</code>  to receive each of the elements the channel sends. Since <code>consumeEach</code> is a suspending function <strong>we have to call it from a coroutine context</strong>, <code>runBlocking</code> helps us bridge the gap between blocking execution and the coroutines world.</p>

<p>With <code>ReceiveChannel</code> we have the flexibility of <code>Sequences</code>, but we also get one more thing: <strong>concurrency!</strong>. You can see that I’ve added an artificial <code>delay</code> call before beginning to consume the Merge Requests. This is to show that <strong>even before the receiver is ready to consume the channel, the producer has already started to fetch elements</strong>. In this case since we’re using an <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#buffered-channels"><em>unbuffered channel</em></a> only one send will be called before suspending the coroutine. But that’s all we need since in our case sending 1 element means that we’ve already fetched the whole first page!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Stumbled With Knockout's Computed Observables]]></title>
    <link href="http://jivimberg.github.io/blog/2016/05/01/how-i-stumbled-with-knockouts-computed-observables/"/>
    <updated>2016-05-01T15:01:16-07:00</updated>
    <id>http://jivimberg.github.io/blog/2016/05/01/how-i-stumbled-with-knockouts-computed-observables</id>
    <content type="html"><![CDATA[<p>The first thing you learn about Knockout is about <a href="http://knockoutjs.com/documentation/observables.html">observables</a>. The second thing is <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a>. They are dead simple. They even form part of the <a href="http://knockoutjs.com/examples/helloWorld.html">Hello World example</a>. But then, the magic was not working for me. Here&rsquo;s why:</p>

<!--more-->


<p>In a nutshell <strong>computed observables</strong> are functions that are dependent on one or more other observables, and that will automatically update whenever any of these dependencies change.</p>

<script async src="http://jsfiddle.net/rniemeyer/LkqTU/embed/js,html,css,result/dark/"></script>


<p>On my usecase I wanted the computed to updated only if certain condition was met. So I used a variable and a good old if.</p>

<script async src="http://jsfiddle.net/jivimberg/uza8ds21/embed/js,html,css,result/dark/"></script>


<p>I also added a toggle function to be able to change the value of the <code>bindingActive</code> variable from the UI. So the <code>fullName</code> should get updated once I toggle the boolean variable. <strong>Guess what? it doesn&rsquo;t!</strong></p>

<p>Go ahead, give it a try. Turn on the toggle using the link and you&rsquo;ll notice that the message does not appear as it did on the Hello World example.</p>

<p>I spent half a day looking for an answer of what I was doing wrong. Until I decided to do what I should&rsquo;ve done in the first place. Instead of regarding some new technology as magic, I went ahead and read the documentation to actually understand how it works.</p>

<p>So here&rsquo;s how the <a href="http://knockoutjs.com/documentation/computed-dependency-tracking.html">dependency tracking algorithm</a> works according to KO documentation:</p>

<blockquote><ol>
<li>Whenever you declare a computed observable, KO immediately invokes its evaluator function to get its initial value.</li>
<li>While the evaluator function is running, KO sets up a subscription to any observables (including other computed observables) that the evaluator reads. The subscription callback is set to cause the evaluator to run again, looping the whole process back to step 1 (disposing of any old subscriptions that no longer apply).</li>
<li>KO notifies any subscribers about the new value of your computed observable.</li>
</ol>
</blockquote>

<p>Notice what&rsquo;s going on? Since <code>bindingActive</code> initial value is <em>false</em> the tracking algorithm does not see the observables on it&rsquo;s first past. Therefore the <strong>computed observable is not suscribed to update when any of the observables change!</strong></p>

<h3>How can we fix this?</h3>

<p>Well a simple solution would be to define the toggle as an observable too. That way the computed observable suscribes to the toggle var observable and it gets recomputed when the variable changes.</p>

<p>Note that afterwards the step 2 of the tracking algorithm is designed to recognized the new observables that it missed the first time. That&rsquo;s quite nice! Only in our case since no observable was seen at all the computed observable was never updated.</p>

<p>Here&rsquo;s how such solution would look like:</p>

<script async src="http://jsfiddle.net/jivimberg/ymucehk2/embed/js,html,css,result/dark/"></script>


<p>Another way of solving this issue would be to call the observables for <code>firstName</code> and <code>lastName</code> outside the if. That works too, but I like the other approach better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PowerMock + TestNG to Mock a Static Class]]></title>
    <link href="http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class/"/>
    <updated>2016-04-03T08:38:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class</id>
    <content type="html"><![CDATA[<p>￼
This week I needed to test a class that depended on a method from an static class. I saw we were using <a href="https://github.com/jayway/powermock" title="PowerMock">PowerMock</a> and thought to myself: <em>“Well this sounds pretty common, I bet it’s easy to accomplish”</em>. But of course I ran into half a dozen issues before I was able to make it work. Here’s my two cents to make your experience easier than mine.</p>

<!--more-->


<h2>Setup</h2>

<p>Let’s start with the ingredients. To mock static methods you’ll need a couple of libraries:</p>

<ul>
<li><a href="http://easymock.org/">EasyMock</a> for the mocking<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li><a href="https://github.com/jayway/powermock">PowerMock</a></li>
<li><a href="http://testng.org/">TestNG</a> for the test</li>
</ul>


<p>When choosing your library version you’ll need to make sure <strong>PowerMock</strong> and <strong>TestNG</strong> versions are compatible. You can do so by comparing your versions with the ones specified <a href="https://github.com/jayway/powermock/wiki/TestNG_usage">here</a>.</p>

<p>Also, if you’re not using <strong>Maven</strong> to include PowerMock in your project make sure you also add it’s dependencies. You’ll find a zip file containing everything you need <a href="https://github.com/jayway/powermock/wiki/GettingStarted">here</a>.</p>

<h2>Writing the test</h2>

<p>To have the test working you’ll need to do 3 things:</p>

<ol>
<li>Configure <strong>TestNG</strong> to use the PowerMock object factory</li>
<li>Use <code>@PrepareForTest</code> annotation to prepare the static class</li>
<li><strong>Mock</strong> the static class method</li>
<li><strong>Write the rest</strong> of the test</li>
</ol>


<p>Let’s go one by one:</p>

<h4>1. Configure TestNG to use the PowerMock object factory</h4>

<p>There are a bunch of ways of doing this, namely:</p>

<ul>
<li>Configure it on the <code>suite.xml</code> file</li>
<li>Extending your test class with <code>PowerMockTestCase</code></li>
<li>Or by adding a method like this to your test</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ObjectFactory</span>
</span><span class='line'><span class="kd">public</span> <span class="n">IObjectFactory</span> <span class="nf">getObjectFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">powermock</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">PowerMockObjectFactory</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I choose to go with the latter because I don’t use the <code>suite.xml</code> file and adding an annotated method is less restrictive than extending a class. But feel free to use whatever works for you.</p>

<h4>2. @PrepareForTest</h4>

<p>You’ll need to prepare your static class for mocking. You can do so with the <code>@PrepareForTest</code> annotation like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can pass an array of classes to the annotation if you need to prepare multiple classes.</p>

<h4>3. Mocking</h4>

<p>Now you’re ready to mock the static method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// mocking static method</span>
</span><span class='line'>  <span class="n">PowerMock</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">EasyMock</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">()).</span><span class="na">andReturn</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="o">)).</span><span class="na">anyTimes</span><span class="o">();</span>
</span><span class='line'>  <span class="n">PowerMock</span><span class="o">.</span><span class="na">replay</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. Writing the rest</h4>

<p>Ok let’s put everything together and write the rest of the test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ObjectFactory</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">IObjectFactory</span> <span class="nf">getObjectFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">powermock</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">PowerMockObjectFactory</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// mocking static method</span>
</span><span class='line'>      <span class="n">PowerMock</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">EasyMock</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">()).</span><span class="na">andReturn</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="o">)).</span><span class="na">anyTimes</span><span class="o">();</span>
</span><span class='line'>      <span class="n">PowerMock</span><span class="o">.</span><span class="na">replay</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// test</span>
</span><span class='line'>      <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span> <span class="err">”</span> <span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course this is an oversimplified example. The cool thing about mocking static methods is that <strong>the static call you may need to mock may be hidden under several layers of abstraction</strong>. Using this approach you are able to mock the static call and test your classes without changing a single line of production code.</p>

<h2>Some things to watch out for</h2>

<p>There are a few things to keep in mind when initializing the mock:</p>

<ol>
<li>You cannot create mocks during <strong>field initialization</strong>.</li>
<li>You cannot create mocks inside <strong>before static methods</strong>.</li>
</ol>


<p>Finally I also run into the following error when running my test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">VerifyError</span><span class="o">:</span> <span class="n">Expecting</span> <span class="n">a</span> <span class="n">stackmap</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">branch</span> <span class="n">target</span> <span class="mi">71</span> <span class="n">in</span> <span class="n">method</span> <span class="n">com</span><span class="o">.</span><span class="na">abc</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">myPackage</span><span class="o">.</span><span class="na">MyClass$JaxbAccessorM_getDescription_setDescription_java_lang_String</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span> <span class="n">at</span> <span class="n">offset</span> <span class="mi">20</span><span class="n">_</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out that, as explained <a href="http://stackoverflow.com/questions/15122890/java-lang-verifyerror-expecting-a-stackmap-frame-at-branch-target-jdk-1-7">here</a> Java 7 introduced a stricter verification and changed the class format. The byte code generation library PowerMock uses is generating code that does not comply with the new verification. But worry not, <strong>this validation can be disabled</strong> by passing <code>-noverify</code> as argument to the JVM.</p>

<p>If you&rsquo;re running you&rsquo;re using Maven to run your tests remember to add the argument to your plugin configuration.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This guide uses <strong>EasyMock</strong> but you can also use <strong>Mockito</strong><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be a Leader (HTWFAIP - Part 4)]]></title>
    <link href="http://jivimberg.github.io/blog/2015/06/15/be-a-leader-htwfaip-part-4/"/>
    <updated>2015-06-15T07:37:31-07:00</updated>
    <id>http://jivimberg.github.io/blog/2015/06/15/be-a-leader-htwfaip-part-4</id>
    <content type="html"><![CDATA[<p>Last installment of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a>. 9 Tips to become the leader you&rsquo;d like to follow.</p>

<!-- more -->


<h3>Begin with praise and honest appreciation</h3>

<p>It is always easier to listen to unpleasant things after we have heard some praise of our good points. This is also sometimes refered as the <a href="http://lifehacker.com/297247/give-constructive-criticism">&ldquo;sandwich rule&rdquo;</a>.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2015-06-15/SandwichRule.jpg" width="250" title="'Sandwich Rule'" ></p>

<h3>How to Criticize: Call attention to people’s mistakes indirectly</h3>

<p>Change the word &lsquo;but&rsquo; to &lsquo;and&rsquo;. For example: a man carefully polished a sermon and showed it to his wife, instead of talking about its many faults, she said she thought it would be a great article for some journal. Be subtle about criticism.</p>

<h3>Talk about your own mistakes before criticizing</h3>

<p>In order to build rapport with the person you are criticising, start by talking about your own mistakes. You can use phrases like: &ldquo;When I was your age, I too struggled with&hellip;&rdquo; or &ldquo;When I was at your level of experience, I too thought that&hellip;&rdquo;.</p>

<h3>Ask questions instead of giving direct orders</h3>

<p>Gave suggestions, not orders. Let people do things for themselves and make their own mistakes. Asking questions not only makes an order more palatable; it often stimulates the creativity of the persons whom you ask. <strong>People are more likely to accept an order if they have had a part in the decision that caused the order to be issued.</strong></p>

<h3>Let the other person save face</h3>

<p>A few minutes’ thought, a considerate word or two, or a genuine understanding of the other person’s attitude can go a long way to alleviating the sting of criticism. Antoine de Saint-Exupery once said: <em>“I have no right to say or do anything that diminishes a man in his own eyes. What matters is not what I think of him, but what he thinks of himself. Hurting a man in his dignity is a crime.”</em></p>

<h3>Praise every improvement, no matter how slight</h3>

<p>Take every chance you&rsquo;ve got to sincerly praise someone. Everybody likes to be praised, but when praise is specific, it comes across as sincere – not something the other person may be saying just to make one feel good. <strong>Nobody wants flattery!</strong></p>

<h3>Give the person a fine reputation to live up to</h3>

<p>In short, if you want to improve a person in a certain respect, act as though that particular trait were already one of his or her outstanding characteristics. Give them a fine reputation to live up to, and they will make prodigious efforts rather than see you disillusioned.</p>

<h3>Make a fault seem easy to correct</h3>

<p>Make the thing seem easy to do, let the other person know that you have faith in his ability to do it, that he has an undeveloped flair for it – and he will practise until the dawn comes in the window in order to excel.</p>

<h3>Make the other person happy about doing what you suggest</h3>

<p>When you make your request, put it in a form that will convey to the other person the idea that he personally will benefit. <em>&lsquo;He had a delightful way of putting things; he created the impression that by accepting this great honour I would be doing him a favour.&rsquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win People to Your Way of Thinking (HTWFAIP - Part 3)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/12/21/win-people-to-your-way-of-thinking-htwfaip-part-3/"/>
    <updated>2014-12-21T18:53:16-08:00</updated>
    <id>http://jivimberg.github.io/blog/2014/12/21/win-people-to-your-way-of-thinking-htwfaip-part-3</id>
    <content type="html"><![CDATA[<p>Third post of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a>. Today: some advice on how to convince people to your way of thinking. This is a long, but juicy post.</p>

<!-- more -->


<h3>1. You can’t win an argument</h3>

<p>If you argue and rankle and contradict, you may achieve a victory sometimes; but it will be an empty victory because you will never get your opponent’s good will (&ldquo;You have made him feel inferior. You have hurt his pride. He will resent your triumph.&rdquo;). Distrust your first instinctive impression. Our first natural reaction in a disagreeable situation is to be defensive. Be careful. Listen first. Give your opponents a chance to talk. Let them finish. Do not resist, defend or debate. This only raises barriers. Try to build bridges of understanding. Don’t build higher barriers of misunderstanding. Look for areas of agreement. When you have heard your opponents out, dwell first on the points and areas on which you agree. Be honest. Look for areas where you can admit error and say so. Apologize for your mistakes. It will help disarm your opponents and reduce defensiveness. Thank your opponents sincerely for their interest. Anyone who takes the time to disagree with you is interested in the same things you are. Think of them as people who really want to help you, and you may turn your opponents into friends.</p>

<h3>2. Show respect for the other person’s opinions</h3>

<p>Never say, “You’re wrong.”: Never begin by announcing ‘I am going to prove so-and-so to you.’ That’s bad. Do it so subtly, so adroitly, that no one will feel that you are doing it. You will never get into trouble by admitting that you may be wrong. That will stop all argument and inspire your opponent to be just as fair and open and broad-minded as you are. It will make him want to admit that he, too, may be wrong.</p>

<h3>3. When wrong, admit it quickly and emphatically</h3>

<p>Say about yourself all the derogatory things you know the other  person is thinking or wants to say—and say them before that person has a chance to. The chances are a hundred to one that a generous, forgiving attitude will be taken and your mistakes will be minimised.</p>

<h3>4. Begin in a friendly way</h3>

<p>Gentleness and friendliness were always stronger than fury and force.</p>

<h3>5. Get the other person saying “yes, yes”</h3>

<p>Begin by emphasising – and keep on emphasising – the things on which you agree. Keep emphasising, if possible, that you are both striving for the same end and that your only difference is one of method and not of purpose. The skillful speaker gets, at the outset, a number of ‘Yes’ responses.</p>

<h3>6. Let the other person do lots of the talking</h3>

<p>Let the other people talk themselves out. They know more about their business and problems than you do. So ask them questions. Let them tell you a few things. Almost every successful person likes to reminisce about his early struggles.</p>

<h3>7. Let the other person feel ownership of the idea</h3>

<p>No one likes to feel that he or she is being sold something or told to do a thing. We much prefer to feel that we are buying of our own accord or acting on our own ideas. We like to be consulted about our wishes, our wants, our thoughts.</p>

<h3>8. Try honestly to see things from the other  person’s point of view</h3>

<p>Success in dealing with people depends on a sympathetic grasp of the other person’s viewpoint. ‘I would rather walk the sidewalk in front of a person’s office for two hours before an interview,’ said Dean Donham of the Harvard business school, ‘than step into that office without a perfectly clear idea of what I was going to say and what that person – from my knowledge of his or her interests and motives – was likely to answer.’</p>

<h3>9. Be sympathetic towards the other person’s ideas and desires</h3>

<p>The magic words: “I don’t blame you one iota for feeling as you do. If I were you I’d undoubtedly feel the same.” And mean it!</p>

<h3>10. Appeal to the nobler motives</h3>

<p>If you have no other evidence, assume that a customer is honest, truthful, and willing to pay the charges if they are convinced that they are correct.Even those who aren’t naturally honest will often react well if you show that you consider them to be honest and fair.</p>

<h3>11. Dramatize your idea</h3>

<p>Merely stating a truth isn’t enough. The truth has to be made vivid, interesting, dramatic. You have to use showmanship.</p>

<h3>12. Throw down a challenge</h3>

<p>People love the work they are doing, and being great at it.Charles Schwab: “The way to get things done is to stimulate competition. I do not mean in a sordid, money-getting way, but in the desire to excel.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make People Like You (HTWFAIP - Part 2)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/11/15/how-to-make-people-like-you-htwfaip-part-2/"/>
    <updated>2014-11-15T18:57:40-08:00</updated>
    <id>http://jivimberg.github.io/blog/2014/11/15/how-to-make-people-like-you-htwfaip-part-2</id>
    <content type="html"><![CDATA[<p>Second post of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a> on the book <a href="http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034">&ldquo;How to Win Friends and Influence People&rdquo;</a> by <a href="http://en.wikipedia.org/wiki/Dale_Carnegie">Dale Carnegie</a>. I know, <strong>How to make people like you</strong> sounds soooo lame, but stick with me, this is a good chapter.</p>

<!-- more -->


<h3>1. Become genuinely interested in other people</h3>

<p>You can make more friends in two months by becoming interested in other people than you can in two years by trying to get other people interested in you.</p>

<h3>2. Smile!</h3>

<p>Like a dog, show that you are happy to see people. Smile even when talking on the phone. Happiness doesn’t depend on outward conditions. It depends on inner conditions. ‘A man without a smiling face must not open a shop.’</p>

<h3>3. Remember that a person’s name is to that person the sweetest sound in any language</h3>

<p>Napoleon’s advice on remembering names: If he didn’t get the name distinctly, he said, “So sorry. I didn’t get the name clearly.” Then, if it was an unusual name, he would say, “How is it spelled?” During the conversation, he took the trouble to repeat the name several times, and tried to associate it in his mind with the person’s features, expression and general appearance.</p>

<h3>4. Be a good listener</h3>

<p>Encourage others to talk about themselves: &ldquo;She didn’t want to hear me talk about my travels. All she wanted was an interested listener, so she could expand her ego and tell about where she had been.&rdquo; Exclusive attention to the person who is speaking to you is very important. Nothing else is so flattering as that. Ask questions that the other  person will enjoy answering. A friend often doesn’t want advice, but just a friendly, sympathetic listener. A person’s toothache means more to that person than a famine in China which kills a million people, think of that the next time you start a conversation.</p>

<h3>5. Talk in terms of the other person’s interests</h3>

<p>Whenever Roosevelt expected a visitor, he sat up late the night before, reading up on the subject in which he knew his guest was particularly interested.</p>

<h3>6. Make the other person feel important—and do it sincerely</h3>

<p>Little phrases such as ‘I’m sorry to trouble you,’ ‘Would you be so kind as to – ?’ ‘Won’t you please?’ ‘Would you mind?’ ‘Thank you’ – little courtesies like these oil the cogs of the monotonous grind of everyday life – and incidentally, they are the hallmark of good breeding. The unvarnished truth is that almost all the people you meet feel themselves superior to you in some way, and a sure way to their hearts is to let them realise in some subtle way that you realise their importance, and recognise it sincerely. ‘Talk to people about themselves and they will listen for hours.’</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling People (HTWFAIP - Part 1)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/11/02/handling-people-htwfaip-part-1/"/>
    <updated>2014-11-02T18:50:13-03:00</updated>
    <id>http://jivimberg.github.io/blog/2014/11/02/handling-people-htwfaip-part-1</id>
    <content type="html"><![CDATA[<p>This is the first of a <a href="http://localhost:4000/blog/categories/htwfaip/">series of posts</a> on the book <a href="http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034">&ldquo;How to Win Friends and Influence People&rdquo;</a> by <a href="http://en.wikipedia.org/wiki/Dale_Carnegie">Dale Carnegie</a>. Today: <strong>Handling People</strong>.</p>

<!-- more -->


<h3>1. Don&rsquo;t criticize condemn or complain</h3>

<p>Criticism is futile because it puts a person on the defensive and usually makes him strive to justify himself. Criticism is dangerous, because it wounds a person’s precious pride, hurts his sense of importance, and arouses resentment.</p>

<h3>2. Give sincere and honest appreciation</h3>

<p>Everyone wants to feel important. We usually spend about 95 percent of our time thinking about ourselves. Be hearty in your approbation and lavish in your praise. Think of the other person’s good points, so you won’t have to resort to flattery. Try leaving a friendly trail of little sparks of gratitude on your daily trips.</p>

<h3>3. Arouse in the other person an eager want</h3>

<p> Talk about what they want and show them how to get it. Henry Ford: “If there is any one secret of success, it lies in the ability to get the other person’s point of view and see things from that person’s angle as well as from your own.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on API Design]]></title>
    <link href="http://jivimberg.github.io/blog/2014/10/12/notes-on-api-design/"/>
    <updated>2014-10-12T15:34:29-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/10/12/notes-on-api-design</id>
    <content type="html"><![CDATA[<p>This is from a presentation I gave at work about how to design APIs that don&rsquo;t suck. You can download the whole presentation from <a href="http://jivimberg.github.io/downloads/ApiDesignKeynote.zip">here</a></p>

<!-- more -->


<h2>3 aspects of a good API</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Discoverability.jpg" width="250" title="'Discoverability'" ></p>

<p><strong>Discoverability:</strong> Is how easy is for a user to access to the exposed functionality. We should always remember that our API is only a tool: a means to an end. The user wants to understand as little as possible to confidently achieve his goal.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Consistency.jpg" width="250" title="'Consistency'" >
<br></p>

<p><strong>Consistency:</strong> Helps improving the usability by reusing the same patterns across the whole API consistently. This way we beneffit from reusing the concepts the user has already learned.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Stability.jpg" width="250" title="'Stability'" ></p>

<p><strong>Stability:</strong> There are 2 different types of stability that we need to be aware of:</p>

<ol>
<li><strong>Backward compatibility:</strong> Your changes you introduce in your new version of your API must not break the apps of your users written against a previous version. To achieve this one of the best tools you have is testing. Investing time in writing tests early will result in the ability to change your API confidently, knowing that if the tests are passing then you have achieved backward compatibility</li>
<li><strong>Conceptual Stability:</strong> The user has build a conceptual model of how the API works. If possible we should avoid changing the concepts he has already learned. This one is even trickier to achieve because there is no exact way of testing it.</li>
</ol>


<h2>4 Principles to avoid complex APIs</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/EconomyOfConcepts.jpg" width="250" title="'EconomyOfConcepts'" ></p>

<p><strong>Economy of concepts:</strong> Minimizing the concepts introduced in your API will result in a flatter learning curve. A good way to achieve this is by making your API coexists with the platform. For example: avoid introducing new collections the user has to learn how to use, reuse known design patterns, honour the language naming convention, etc.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Symmetry.jpg" width="250" title="'Symmetry'" ></p>

<p><strong>Simetry:</strong> Once more a simmetric API is easier to learn because it is more predictable. For example: if the user sees a method called <code>open()</code> he probably will know that there is another called <code>close()</code> that he should call at the end, and so on and so forth.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Naming.jpg" width="250" title="'Naming'" ></p>

<p><strong>Naming:</strong> Always use the same name for the same concept. Devs tend to get creative when naming things and that&rsquo;s a bad idea! If we, for example, use the term <em>&lsquo;create&rsquo;</em> in one place and <em>&lsquo;build&rsquo;</em> in another, it becomes very difficult to understand which is the pattern behind the design of the API. When used appropiately a a simple name we can communicate a complex concept with little or no ambiguity. As a rule of thumb if we are having a hard time naming some component then perhaps it&rsquo;s responsibility is not clear enough and we should review our design.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/MinimizeAccessibility.jpg" width="350" title="'Minimize Accessibility'" ></p>

<p><strong>Minimize Accessibility:</strong> Similar to encapsulation in Object Oriented Design, we should hide all the details the user doesn&rsquo;t need to know about. This way we are able to change those things under the hood without loosing backward compatibility. This maximizes information hiding and simplifies the use of the API, avoiding confusion by eliminating unnecessary choices.</p>

<h2>6 Helpful tips</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/UseCaseDriven.jpg" width="250" title="'Use case driven'" ></p>

<p><strong>Use case driven:</strong> It is useful to validate the possible use cases with future users of the API as soon as possible. One good trick is to start writing code against the API even when the implementation is not ready yet.
An advantage of using use cases is that since we intereract with the API through code each use case can be easily translated into a test case. Furthermore using a TDD approach will provide some feeling on the usability of the API.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/WhenInDoubt.jpg" width="250" title="'When in doubt leave it out'" ></p>

<p><strong>When in doubt&hellip;:</strong> One of the most difficult choices an API designer is faced with, is deciding what stays and what goes. In general, if there isn&rsquo;t a great use case supporting a piece of the API, we&rsquo;re better off not having it there in the first place. <em>Remember: you can always add to an API, but you almost never can remove from it.</em> APIs are &ldquo;add only&rdquo;!</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Documentation.jpg" width="350" title="'Documentation'" ></p>

<p><strong>Documentation:</strong> It&rsquo;s well known that devs don&rsquo;t read the documentation. Luckily if your API is discoverable then your users won&rsquo;t need much documentation. 2 tips on this regard:</p>

<ol>
<li>Document by exception: Focus only on what the user needs to know</li>
<li>Use lot of examples: In fact if you could only write one thing make it a example.</li>
</ol>


<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Change.jpg" width="250" title="'Plan for a change'" ></p>

<p><strong>Plan for a change:</strong> In any successful API, the only constant is change. Features change, users request new features, we realise we made some obvious mistakes. Our API will change and we better be ready for it. When changing your API make sure to review your initial assumptions.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/DontDoEverything.jpg" width="250" title="'Don't do everythng'" ></p>

<p><strong>Don&rsquo;t do everything:</strong> It is as important to know what you won&rsquo;t do than knowing what you do. You have to always be open to breaking an API into several modules. Sometimes it us better to have two small APIs that one large one.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/ImplVsInterface.jpg" width="350" title="'Implementation Vs Interface'" ></p>

<p><strong>Implementation != Interface</strong> It is important to be clear on what it&rsquo;s an implementation detail and what is essential to the API. Exposing implementation details confuse the user and limits our freedom to change the API later on. For example: Avoid describing specific algorithms, avoid including tuning parameters, avoid specifying hashing functions. Focus on results, not means.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Flags]]></title>
    <link href="http://jivimberg.github.io/blog/2014/09/20/feature-flags/"/>
    <updated>2014-09-20T14:53:01-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/09/20/feature-flags</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll introduce the concept of Feature Toggles as a release alternative to <a href="http://martinfowler.com/bliki/FeatureBranch.html">FeatureBranches</a>. This technique is also known as: Feature toggles, Feature switches, Feature flippers, etc.</p>

<!-- more -->




<p class='info warning' data-title='Disclamer'>This article is HEAVILY based on Martin Fowler's FeatureToggle (http://martinfowler.com/bliki/FeatureToggle.html). Feel free to refer to the original article for further detail.</p>


<p>The basic idea of Feature Flags is to have a <strong>configuration file</strong> that defines a bunch of toggles for various features you are working on. The running application then uses these toggles in order to decide whether or not to show the new feature.</p>

<p>We can have features in the UI or in the application code. There they could be as crude as a conditional test, or something more sophisticated like a strategy wired through dependency injection.</p>

<p>Toggle checks should only appear at the minimum amount of points to ensure the new feature is properly hidden. Focus on just the entry points that would lead users there and toggle those entry points. If you find that creating, maintaining, or removing the toggles takes significant time, then that&rsquo;s a sign that you have too many toggle tests.</p>

<h2>Types of toggles</h2>

<p>Feature toggles come in 2 flavors:</p>

<ol>
<li><strong>Release toggles:</strong> Used to hide partly build features.</li>
<li><strong>Business toggles:</strong> Used to selectively turn on features in regular use. For example to only expose certain features when the application is running in a particular environment configuration.</li>
</ol>


<p>Release toggles are primarily visible to the development organization and should be retired once the feature has bedded down in the application. Business toggles are visible to the business sponsors and are a permanent feature of the application. This means that <strong>the two kinds of toggles need to be clearly separated</strong>, usually appearing in separate configuration files.</p>

<p>Another way of dividing the toggles is by the time they are set. Here we have:</p>

<ol>
<li>Set at runtime</li>
<li>Set at build time</li>
</ol>


<p>You often need to build some admin tooling to help control of business toggles that can change at runtime.</p>

<h2>Testing</h2>

<p>In general there&rsquo;s no need to test all combinations of features. For release toggles it&rsquo;s usually sufficient to run two combinations:</p>

<ol>
<li>All the toggles on that are expected to be on in the next release</li>
<li>All toggles on</li>
</ol>


<p>For business toggles the combination problem is greater, since you do need to consider the various combinations that appear in practice and how they might interfere. You usually won&rsquo;t need to test every combination, but what subset of combinations you need depends on your knowledge of how the application performs in production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Email Google Form Daily]]></title>
    <link href="http://jivimberg.github.io/blog/2014/08/21/email-google-form-daily/"/>
    <updated>2014-08-21T23:18:14-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/08/21/email-google-form-daily</id>
    <content type="html"><![CDATA[<p>Here I&rsquo;ll show you how you can email a Google Form daily, weekly or whatever. I&rsquo;ll achieve this by using <a href="https://developers.google.com/apps-script/">Google App Scripts</a>. Here we go</p>

<!--more-->


<p>1 - Create a Form (If you don&rsquo;t know how maybe this guide is a little bit too advanced for you, anyway you can start <a href="https://support.google.com/docs/answer/87809?hl=en">here</a>).</p>

<p>2 - Send this form to your email address using the <strong>Send Form</strong> button. Send it using the <strong>&ldquo;send form via email&rdquo;</strong> option, as shown in the picture:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2014-08-21/SendForm.png" width="400" title="'Send Form'" ></p>

<p>3 - Now we need to get that form in HTML. To achieve this we will need the raw email. In GMail you can see it using the <strong>Show original</strong> option in the menu, from there you should copy everything that&rsquo;s enclosed in the <code>&lt;html&gt;...&lt;/html&gt;</code> tags (including the tags).</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2014-08-21/ShowOriginal.png" width="250" title="'Show Original'" ></p>

<p>4 - So we have the HTML but, at least if you obtain it like me, you&rsquo;ll notice that it is encoding as <strong>quoted-printable</strong>. I use <a href="http://www.webatic.com/run/convert/qp.php">this site</a> to decode it. Make sure you paste your code in the <strong>Encoded</strong> text field and press the <strong>decode</strong> button. Copy this code to your clipboard, we will need it later.</p>

<p>5 - Create a new Script from a Google Spreadsheet <em>( Tools > Script Manager&hellip; > New )</em>.</p>

<p>6 - In the Script Editor create a new HTML file <em>( File > New > Html file )</em> and paste your code from step 4. Once pasted remember to save the file. If you&rsquo;re seeing a red asterisk <span style="color:red"><em>*</em></span> by the name of the file that means it&rsquo;s not saved.</p>

<p>7 - In the <em>*.gs</em> paste the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">sendFormEmail</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">toEmailAddress</span> <span class="o">=</span> <span class="s2">&quot;someone@gmail.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">htmlMessage</span> <span class="o">=</span> <span class="nx">HtmlService</span><span class="p">.</span><span class="nx">createHtmlOutputFromFile</span><span class="p">(</span><span class="s2">&quot;Name-of-your-HTML-file.html&quot;</span><span class="p">).</span><span class="nx">getContent</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">subject</span> <span class="o">=</span> <span class="s2">&quot;Subject&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="s2">&quot;Some message&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">MailApp</span><span class="p">.</span><span class="nx">sendEmail</span><span class="p">(</span><span class="nx">toEmailAddress</span><span class="p">,</span> <span class="nx">subject</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">htmlBody</span><span class="o">:</span> <span class="nx">htmlMessage</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure your replace all the fields with the actual values!</p>

<p>8 - Give it a go and run it once to see if it worked.</p>

<p>9 - Finally go to <em>Resources > Current project triggers'</em>  and create a time driven trigger to run it daily (or weekly, or whatever suits your needs)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2014-08-21/Triggers.png" width="700" title="'Triggers'" ></p>

<p>9 (option B) - As <strong>an alternative</strong> you can define the triggers in the script itself using code as suggested by <a href="https://disqus.com/by/johannesschwaninger/">Johannes Schwaninger</a> in the comments. You can do so like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">createTimeDrivenTriggers</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// Trigger every day at 6 pm.</span>
</span><span class='line'>    <span class="nx">ScriptApp</span><span class="p">.</span><span class="nx">newTrigger</span><span class="p">(</span><span class="s1">&#39;sendFormEmail&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">timeBased</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">atHour</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">everyDays</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// Frequency is required if you are using atHour() or nearMinute()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>10 - Relax and enjoy!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you’re not seeing the <em>time driven</em> option check that you’re accessing the script editor from a Spreadsheet and not from a Form. Or else just use the code alternative.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Animations Are Just a Trick]]></title>
    <link href="http://jivimberg.github.io/blog/2014/08/10/android-animations-are-just-a-trick/"/>
    <updated>2014-08-10T12:44:27-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/08/10/android-animations-are-just-a-trick</id>
    <content type="html"><![CDATA[<p>So I was learning to animate Views in Android using <a href="http://youtu.be/_UWXqFBF86U]">this video</a> and was having trouble with the second time the animation runned. First run the objects end up in their destination, second run it was mayhem.
I had fallen victim to the great misunderstanding everyone makes about Android animations: <strong>they are just a magic trick</strong>.</p>

<!--more-->


<p>The animated View isn&rsquo;t actually moving (or rotating, or scaling, or fading). The animation is actually just an order to the rendering engine to perform a last minute transformation on the desired object. <strong>The real object never leaves it&rsquo;s initial position.</strong></p>

<p>So the first time my animation runned I was making the view move from A to B. Now the second time I was trying to move it from B to C, but even when I was seeing the View in B (because I&rsquo;ve setted the <code>android:fillAfter="true"</code> flag) the real object was in A the whole time. Therefore the second run of the animation ended up in disaster.</p>

<p>To fix this there are 2 solutions:</p>

<ol>
<li>Update the View object once the animation has finished using an <a href="http://developer.android.com/reference/android/view/animation/Animation.AnimationListener.html">AnimationListener</a> and do it <code>onAnimationEnd()</code>.</li>
<li>Use an <a href="http://developer.android.com/reference/android/animation/ObjectAnimator.html">ObjectAnimator</a> which updates the underlying property while performing the animation. Or use <a href="http://nineoldandroids.com/">NineOldAndroids</a> if your target sdk is &lt;11.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Trying With Guava Retrying]]></title>
    <link href="http://jivimberg.github.io/blog/2014/07/17/keep-trying-with-guava-retrying/"/>
    <updated>2014-07-17T14:22:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/07/17/keep-trying-with-guava-retrying</id>
    <content type="html"><![CDATA[<p>We were having a <a href="http://en.wikipedia.org/wiki/Race_condition#Software">race condition</a> on a server which was &ldquo;fixed&rdquo; by adding an sleep to the thread to check again later. Yes, it sucked, so I decided to make something more sophisticated and went looking for a library to handle retryies with multiple strategies. That&rsquo;s when I first read about <a href="https://github.com/rholder/guava-retrying">Guava Retrying</a></p>

<!--more-->


<p>In the words of it&rsquo;s creator (<a href="https://github.com/rholder">rholder</a>):</p>

<blockquote><p>Guava-Retrying is a small extension to Google&rsquo;s Guava library to allow for the creation of configurable retrying strategies for an arbitrary function call, such as something that talks to a remote service with flaky uptime.</p></blockquote>

<p>Simply put give it a taks and it will retry it until success&hellip; or until a given condition is met, or after X attempts, or until it does not throw exception, or&hellip; well you get the point: <strong>flexibility</strong>.</p>

<h3>Quick example</h3>

<p>Let&rsquo;s say we want to execute a task that will:
* Retry if the result is null
* Retry if an exception of type IOException is thrown
* Wait 300 miliseconds to try again.
* Stop after 5 attempts</p>

<p>Then we would do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">yourTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// do something interesting here</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">Retryer</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">retryer</span> <span class="o">=</span> <span class="n">RetryerBuilder</span><span class="o">.&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span><span class="n">newBuilder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">retryIfResult</span><span class="o">(</span><span class="n">Predicates</span><span class="o">.&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span><span class="n">isNull</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">retryIfExceptionOfType</span><span class="o">(</span><span class="n">IOException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withWaitStrategy</span><span class="o">(</span><span class="n">WaitStrategies</span><span class="o">.</span><span class="na">fixedWait</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span>                                                                             <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withStopStrategy</span><span class="o">(</span><span class="n">StopStrategies</span><span class="o">.</span><span class="na">stopAfterAttempt</span><span class="o">(</span><span class="mi">5</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">retryer</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">yourTask</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RetryException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After attempting 5 times it will throw a <code>RetryException</code> with information about the last attempt. Any other exception thrown by your task will be wrapped and rethrown in a <code>ExecutionException</code></p>

<p>Other <strong>wait strategies</strong> supported: Random backoff, Incremental backoff, Exponential backoff, Fibonacci backoff</p>

<p>Other <strong>stop strategies</strong> supported: never stop, stop after delay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoValue for Android]]></title>
    <link href="http://jivimberg.github.io/blog/2014/04/20/autovalue-for-android/"/>
    <updated>2014-04-20T17:14:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/04/20/autovalue-for-android</id>
    <content type="html"><![CDATA[<p>Remember <a href="http://jivimberg.github.io/blog/2014/04/07/value-types-the-easy-way/">my last post</a> on value types using <a href="https://github.com/google/auto/tree/master/value">Google&rsquo;s AutoValue</a>? Today while doing some work on a new Android project I&rsquo;m starting I thought: <em>&lsquo;Great chance to use AutoValue!&rsquo;</em>. Guess what, there is a port of Google AutoValue for the Android platform.</p>

<!-- More -->


<p>So the first thing I thought was: <em>&lsquo;Why do I need an special port of the AutoValue in the first place?&rsquo;</em>. Even though you could use the original <a href="https://github.com/google/auto/tree/master/value">Google&rsquo;s AutoValue</a> and it will work just find, there are 2 reasons why you should consider the Android port:</p>

<ol>
<li>Android AutoValue splits the project in 2 libraries. Only one is included in your apk (which just contains the interface) and the other is only used during compile time</li>
<li>Apart from all the things you get using the original lib the Android AutoValue also includes Parceable generation just adding <code>implements Parcelable</code> to your classes.</li>
</ol>


<p>That&rsquo;s pretty much all. Head to the <a href="https://github.com/frankiesardo/android-auto-value">Android Autovalue github repo</a> to see how to use it in your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Value Types the Easy Way]]></title>
    <link href="http://jivimberg.github.io/blog/2014/04/07/value-types-the-easy-way/"/>
    <updated>2014-04-07T20:54:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/04/07/value-types-the-easy-way</id>
    <content type="html"><![CDATA[<p>Value types is a fancy name for those classes where you have to implement <code>equals()</code> and <code>hashCode()</code>, and usually <code>toString()</code>. You&rsquo;ve probably wrote thounsands of those classes, but have you ever wonder why do you have write almost 50 lines of code to express such a common concept?</p>

<!-- more -->


<p>Let&rsquo;s say you want to model an Employee, with name and age. If you were to write it following all of <a href="http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683">Effective Java&rsquo;s</a> advices (which is how you always roll, right?) you would get something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmployeeTheOldFashionedWay</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">EmployeeTheOldFashionedWay</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">EmployeeTheOldFashionedWay</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">EmployeeTheOldFashionedWay</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">!=</span> <span class="n">that</span><span class="o">.</span><span class="na">age</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="na">name</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;EmployeeTheOldFashionedWay{&quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;name=&#39;&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s">&quot;, age=&quot;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span>
</span><span class='line'>                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is wrong for many reasons:</p>

<ul>
<li>Way too long</li>
<li>Obvious violation of the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle</li>
<li>You won&rsquo;t tests this methods</li>
<li>They won&rsquo;t be closely reviewed</li>
<li>This classes <strong>will</strong> change and that&rsquo;s when bugs are introduced</li>
<li>Bad signal-to-noise in your code (i.e. too much code to express such an easy concept)</li>
</ul>


<p>Perhaps you are aware that this code can be easily written using IDE Templates. Your favorite IDE can generate constructor based on fields, getters, <code>equals()</code>, <code>hashCode()</code> and <code>toString()</code> methods letting you write value types classes in a breeze. But then all the things we said are wrong with the value type still hold. The only thing we achieve is to write them faster.</p>

<h3>Google AutoValue</h3>

<p>What I&rsquo;m presenting today is Google&rsquo;s solution to the value types issue. With <a href="https://github.com/google/auto/tree/master/value">AutoValue</a> you could write the same Employee class in approximately 10 lines of code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@AutoValue</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">EmployeeWithAutoValue</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">EmployeeWithAutoValue</span> <span class="nf">create</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">AutoValue_EmployeeWithAutoValue</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>What the heck just happened there?</h4>

<p>That <code>@AutoValue</code> annotation you see on the class is just a standard annotation that generates a package private implementation for your abstract class called: <em>AutoValue_EmployeeWithAutoValue</em>. In case you were wondering <a href="https://gist.github.com/jivimberg/ca86f975e3945e30978f">this is how that implementation looks like</a>.</p>

<p>Is this the best alternative? I don&rsquo;t really know&hellip; but in <a href="https://docs.google.com/presentation/d/14u_h-lMn7f1rXE1nDiLX0azS3IkgjGl5uxp5jGJ75RE/edit">this presentation</a> the authors of AutoValue compare it to other solutions and explain why they think theirs is better.</p>

<h4>Usage</h4>

<p>This is how you use your Employee class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">EmployeeWithAutoValue</span> <span class="n">employee</span> <span class="o">=</span> <span class="n">EmployeeWithAutoValue</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;Juan&quot;</span><span class="o">,</span> <span class="mi">33</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;employee.getName() = &quot;</span> <span class="o">+</span> <span class="n">employee</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;employee.getAge() = &quot;</span> <span class="o">+</span> <span class="n">employee</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty regular stuff over here. That&rsquo;s one of the good things of AutoValue: consumers don&rsquo;t need to know what&rsquo;s going on behind the scenes.</p>

<h4>Features and drawbacks</h4>

<ul>
<li>You can&rsquo;t use constructors but you can use any number of static factory methods you like. Which if you have read <a href="http://my.safaribooksonline.com/book/programming/java/9780137150021/creating-and-destroying-objects/ch02lev1sec1">Effective Java Item 1</a> you know is a good idea anyway.</li>
<li>No support for <em>mutable</em> value types. Again you are better off using immutables anyway.</li>
<li>If you want to provide your own implementation of <code>equals()</code>, <code>hashCode()</code> or <code>toString()</code> you can! Just add your own method to the class and autovalue won&rsquo;t generate it in the implementation.</li>
<li>AutoValue assumes all your non-primitive fields are not nullable and add checks in the generated code. You can modify this behaviour applying the annotation <code>@Nullable</code> to the corresponding accessor method and factory parameter.</li>
<li>You <em>can</em> add behaviour to your class</li>
<li>You <em>can</em> implement interfaces</li>
<li><strong>WARNING!</strong> The big disadvantage. The generator has to choose an order for the constructor parameters, so it uses the order in which they appear in the file. That means that a simple refactor moving the accessors can break the abstract class or worse silently mix the parameters. <strong>You&rsquo;ve been warned!</strong></li>
</ul>


<h4>Making it work in IntelliJ Idea</h4>

<p>I used Intellij Idea to try this and I must say it took me some time to get the generated class folder to be marked as src. In the end what did the trick was to reimport the mvn project.
Just know that once it has been added as a src folder you&rsquo;ll have to compile the code one time before the IDE can tell there is a generated class named <em>Autovalue_XXX.</em> You can add this to the list of minor annoyances of using AutoValue if you like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava - Fun With Comparisons]]></title>
    <link href="http://jivimberg.github.io/blog/2014/03/28/guava-fun-with-comparisons/"/>
    <updated>2014-03-28T17:26:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/03/28/guava-fun-with-comparisons</id>
    <content type="html"><![CDATA[<p>Implementing <code>compare()</code> and <code>compareTo()</code> methods was never fun. Luckily <a href="https://code.google.com/p/guava-libraries/">Guava</a> provides an utility that makes comparison methods easier to write and more pleasing to the eye.</p>

<!--more-->


<p>So let&rsquo;s say we have the class <code>Person</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">zipCode</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Age</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">enum</span> <span class="n">Age</span> <span class="o">{</span> <span class="n">YOUNG</span><span class="o">,</span> <span class="n">OLD</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we want to sort it by name, then by zipcode and finally, if they are still matched, by age (having <code>Age.YOUNG</code> first) but making <code>null</code> values greater than non <code>null</code> values.</p>

<p>Such comparator could look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VerboseComparator</span>
</span><span class='line'>            <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Person</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Person</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">o1</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">cmp</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">zipCode</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">zipCode</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">age</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Yeah I know, it&rsquo;s hard to read, prone to errors and it has a way too many if statements.</p>

<p>But <em>Don&rsquo;t Panic!</em> with Guava we can write this same comparator like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">GuavaComparator</span>
</span><span class='line'>            <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Person</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Person</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">zipCode</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">zipCode</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">o2</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsFirst</span><span class="o">())</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks way better and it&rsquo;s easier to understand.</p>

<p>Furthermore ComparisonChain stops calling the next <code>compare()</code> method as soon as one returns a value different than 0. So if you have an expensive calculation for comparison to untide similar objects you can rest assured it will only be called when absolutely necessary.</p>

<p>If you find this useful you&rsquo;ll probably want to check out other <a href="https://code.google.com/p/guava-libraries/wiki/OrderingExplained">guava&rsquo;s Ordering Utilities</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava - Using and Avoiding Null]]></title>
    <link href="http://jivimberg.github.io/blog/2014/03/19/guava-using-and-avoiding-null/"/>
    <updated>2014-03-19T00:34:41-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/03/19/guava-using-and-avoiding-null</id>
    <content type="html"><![CDATA[<p>I&rsquo;m starting a series of posts on <a href="https://code.google.com/p/guava-libraries/">Guava</a> (Google&rsquo;s core libraries). Today I am going to start with <strong>null</strong>, how to use it, and how to avoid it when necessary.</p>

<!--more-->


<blockquote><p><strong>&ldquo;I call it my billion-dollar mistake.&rdquo;</strong><br/>
Sir C. A. R. Hoare, on his invention of the null reference</p></blockquote>

<h3>Null in Guava Collections</h3>

<p>How many times have you expected null values on your collections? And how many times have you <em>actually</em> check to prevent null values on them?</p>

<p>That&rsquo;s why most of Guava &ldquo;New Collections&rdquo; and utilities will fail fast with a NPE when you try to add null to them. And they provide the <strong>Optional</strong> utilty for those cases where we need to indicate absence of some kind, without using null.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//This will fail with java.lang.NullPointerException: at index 2</span>
</span><span class='line'><span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;one&quot;</span><span class="o">,</span> <span class="s">&quot;two&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Optional</h3>

<p>Optional is a way of representing a reference which may be present or not. The whole point of using Optional instead of null, is that there is no way the client can miss the case where the reference is absent. It forces him to actively unwrap the value or else the program won&rsquo;t compile.</p>

<p>Here is how you create an optional:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">creatingAnOptional</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">findString</span><span class="o">();</span> <span class="c1">//may return null</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// which is the same as doing:</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">absent</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And here is how you query for the value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">queryingOptionals</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">optional</span> <span class="o">=</span> <span class="n">creatingAnOptional</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">optional</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()){</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">optional</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c1">//We are sure is the value is there</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The string is: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//or</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Value or default: &quot;</span> <span class="o">+</span> <span class="n">optional</span><span class="o">.</span><span class="na">or</span><span class="o">(</span><span class="s">&quot;Default value&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next time you are writing a method that return a values which may or may not be present, remember to use Optional. It will make your API much clearer and force the caller to consider the absent value case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Was This Blog Created]]></title>
    <link href="http://jivimberg.github.io/blog/2014/03/17/why-was-this-blog-created/"/>
    <updated>2014-03-17T22:48:56-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/03/17/why-was-this-blog-created</id>
    <content type="html"><![CDATA[<p>There are billions of blogs written by more experienced and talented devs, there is <a href="http://stackoverflow.com">stackoverflow.com</a> and communities for each tool and language ever created, so why bother creating yet another dev blog? Here are the two reasons why I started this blog.</p>

<!--more-->


<p>The first reason why I chose to get my hands dirty writing this pages is that I&rsquo;m like the Memento guy trying to code. Whatever code I&rsquo;m working on today will seem completely new for me next month. So one day I had an idea, what if I could have a place where I would go back and check my notes and snippets of the things I learned. There&rsquo;s a phrase that goes: <em>&ldquo;To know I read, to learn I do, to understand I teach&rdquo;</em>. So even in theory the process of thinking how to write about something is helping me remember it.</p>

<p>And the second reason is that I&rsquo;ve been using online resources for so long that I&rsquo;m starting to feel that it&rsquo;s affecting my karma for not contributing back. So here are my two cents. Hopefully someone will find it useful.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
