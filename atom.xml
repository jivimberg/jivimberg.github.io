<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding Forest]]></title>
  <link href="http://jivimberg.github.io/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2020-07-06T20:57:48-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effective Testing - Use Descriptive Test Names]]></title>
    <link href="http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names/"/>
    <updated>2020-07-05T23:21:07-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/07/05/effective-testing-use-descriptive-test-names</id>
    <content type="html"><![CDATA[<p>Picking good test names can help us identify what&rsquo;s wrong with our code when something fails.</p>

<!--more-->


<p>It&rsquo;s Friday afternoon. You finally finished that long refactor you’ve been working on for the whole week. Everything is looking good. Except you run the tests and see one failure.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-07-05/BadNames.png" title="‘Test output with bad test names’" ></p>

<p style='text-align: center; font-size: 42px;'>
🤔
</p>


<p>Unfortunately, <strong>you can&rsquo;t really tell what&rsquo;s broken from looking at that output</strong>. You’ll have to browse the test code to identify the failure.</p>

<p>But what if the output looked more like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-07-05/GoodNames.png" title="‘Test output with good test names’" ></p>

<p>Now the issue is obvious. <strong>You can immediately tell which part of the code is not working and what the output should be.</strong></p>

<p>Test names are the first (and often only) piece of information we see about a test. Using a descriptive test name can help us identify what’s broken at a glance. Furthermore, it helps us keep the test focused on validating one specific behavior, discouraging us from inflating the test with other unrelated assertions.</p>

<h2>How</h2>

<p>Instead of just using the name of the method being tested, try focusing on the behavior you want to validate. <strong>Describe the state of the system, the action performed, and the expected output.</strong> More often than not, you’ll end up with a huge name, something you probably wouldn’t use on production code, but that’s ok.</p>

<p>If you&rsquo;re using Kotlin, you can <a href="https://kotlinlang.org/docs/reference/coding-conventions.html#function-names">use backticks to have whitespaces in your function name</a>. If you’re working with <a href="https://junit.org/junit5/docs/current/user-guide/">JUnit</a> you can leverage the <a href="https://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html"><code>@DisplayName</code></a> annotation for prettier names. You can even get emojis in there:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-07-05/WithEmojis.png" title="‘Test output with emojis’" ></p>

<p>You can also write a custom name generator using <code>@DisplayNameGeneration</code> <a href="https://www.baeldung.com/junit-custom-display-name-generator">as shown here</a>.</p>

<p>Some testing libraries like <a href="https://github.com/kotest/kotest/">Kotest</a>, also <a href="https://github.com/kotest/kotest/blob/master/doc/styles.md#should-spec">support nesting tests</a>:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-07-05/NestedNames.png" title="‘Test output with emojis’" ></p>

<hr />

<p>You can read more about test naming in Chapter 12 of <a href="https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791/ref=sr_1_2?dchild=1&amp;keywords=software+engineering+at+google&amp;link_code=qs&amp;qid=1594020903&amp;sr=8-2&amp;tag=wwwcanoniccom-20">Software Engineering at Google</a>.</p>

<p>This post is part of the <a href="https://jivimberg.io/blog/categories/effective-testing-series/">Effective Testing Series</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Queues]]></title>
    <link href="http://jivimberg.github.io/blog/2020/05/30/working-with-queues/"/>
    <updated>2020-05-30T19:29:39-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/05/30/working-with-queues</id>
    <content type="html"><![CDATA[<p>Queues are a powerful tool for building reliable systems. In this article, I’ll describe some of the tips and tricks I came across when working with queues.</p>

<p>Some of the advice is specific to Amazon SQS queues because that’s what I’ve been using the most lately. And also because some of them come from <a href="https://aws.amazon.com/builders-library/avoiding-insurmountable-queue-backlogs/">this amazing article</a> from the <a href="https://aws.amazon.com/builders-library/">Amazon Builders’ Library</a>.</p>

<!--more-->


<h2>The trade-off</h2>

<p>Queues can be used to increase the system’s availability by accepting new messages even if our service is down. They help us decouple producers from consumers. When using systems like SQS, we also get a durability guarantee, because we know messages published won’t be lost if our system fails as they are persisted in the queue. Additionally, we get an increase in reliability since we can configure our system to retry the processing of a message in case of failure.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-06-07/Availability.png" title="‘Example of how queues can increase availability’" ></p>

<p>These advantages come at a cost. <strong>We get better reliability, availability, and durability at the price of increased latency</strong>. Meaning, messages can take longer to be processed compared to a synchronous system. This is because our system might have to go through a backlog of old messages before getting to the one just published. Furthermore, if the pace at which messages are put on the queue is faster than the speed at which our system can process them, the system might never be able to catch up!</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-06-07/Overflow.gif" title="‘Animation on how a slow consuming queue can overflow’" ></p>

<p>Let’s go over some of the things we can do to prevent or mitigate these risks.</p>

<h3>1. Wrapping your queues</h3>

<p>Instead of exposing the queues to clients, you can wrap them with an ordering API. This way, we maintain more control over what’s published in the queue. Wrapping queues have many benefits:</p>

<ol>
<li>We can run validations over the message payload and reject malformed messages with an appropriate error.</li>
<li>We can enrich the message payload with caller information.</li>
<li>We can authenticate callers to control access.</li>
<li>We can implement some of the patterns mentioned below to control fairness in a multi-tenant system and handle surges.</li>
</ol>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-06-07/WrapQueues.png" title="‘System diagram for wrapping queues’" ></p>

<p>The downside of wrapping the queues is that we turn an asynchronous call into synchronous. Now our system has to be up to process new messages. We’re trading the availability improvements for more control.</p>

<h3>2. Dealing with a backlog</h3>

<p>The price of increased availability is having to deal with the backlog of messages that occur in a surge or after a failure. One way to do so is by dropping old messages.  When consuming a new message, we can compare the current time with the time the message was published and discard the message if it is greater than some value. Of course, this only works if the systems can tolerate this type of message loss.</p>

<p>Another technique is to move the excess to a spillover queue to be processed later. The system will first work on the new messages on the main queue, and only tackle the ones on the spillover queue once resources are available. This way, we can approximate LIFO order, which might be more appropriate for systems dealing with real-time events.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-06-07/Spillover.png" title="‘Diagram of a system using spillover queue’" ></p>

<p>Finally, we can measure the size of the backlog and scale the number of consumers accordingly. Once the backlog is back to its normal size, we can scale down the consumer instances.</p>

<h3>3. Ensuring fairness</h3>

<p>One of the challenges of having multiple customers is having to guarantee fairness. That is, making sure one client is not exhausting all the available resources, creating significant latencies on other clients’ messages. This is especially true in multi-tenant environments where clients might not be aware they’re sharing resources with other people.</p>

<p>One possible solution is to have different customers publish to different queues, and have the system consume in a round-robin fashion. This is a simple solution, but it does not scale well. If we had thousands of customers, we’d have to manage and poll thousands of queues. Instead, we can have a fixed number of queues and hash each customer to a small number of them. Whenever we receive a message, we retrieve the queues assigned to that customer and put the message on the queue with the shortest backlog. That way, if a client is producing lots of messages on their queues, other workflows are automatically routed to less utilized queues. One caveat worth considering, is that message order is not preserved in this model.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-06-07/Sharding.gif" title="‘Animation of multi-tenant system using sharing’" ></p>

<p>Another solution is to set a rate for messages processed for each customer. Once the customer has gone over the specified rate, messages are put in a spillover queue to be deal with later. This pattern is similar to the one we applied for old messages in the previous section, only in this case we’re using it to prevent one client from exhausting all the processing power.</p>

<h3>3. Ensure enough capacity for surges</h3>

<p>It is crucial to reserve additional resources to be able to handle spikes in traffic. One smart idea is to measure the number of messages retrieved while polling. If the system is retrieving more messages on every poll attempt, it means we probably don’t have enough spare resources to handle a surge.</p>

<h3>4. Updating the visibility timeout</h3>

<p>The way Amazon SQS works is that whenever a consumer receives a message, the message remains on the queue hidden. Other consumers won’t be able to see the message for a period of time known as <em>visibilityTimeout</em>. Once the <em>visibilityTimeout</em> period is up, if the message has not been deleted from the queue, other consumers will be able to get it and process it.</p>

<p>If processing a message is taking too long, we run the risk of going over the <em>visibilityTimeout</em> period. If that happens, another client will receive the message and start churning away, spending more resources on it, even though the first consumer has a better chance of finishing first. To avoid this, when we realize processing is taking too long, we can heartbeat SQS to let it know we’re still working. We do this by updating the <em>visibilityTimeout</em> period for a particular message.</p>

<p>We can also use the ability to programmatically modify the <em>visibilityTimeout</em> for a message to speed up retries. Say our queue is configured with a <em>visibilityTimeout</em> of 10 minutes, and while processing a message, we face a transient error, we can set <em>visibilityTimeout</em> to zero to make it retry faster.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature8.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Whiteboard Interview Is Broken]]></title>
    <link href="http://jivimberg.github.io/blog/2020/05/09/the-whiteboard-interview-is-broken/"/>
    <updated>2020-05-09T17:48:02-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/05/09/the-whiteboard-interview-is-broken</id>
    <content type="html"><![CDATA[<p>We have deluded ourselves into thinking that being able to invert a binary tree on a whiteboard is the hallmark of great software engineering. It’s time we look for better ways of evaluating coding skills.</p>

<!--more-->




<blockquote class="twitter-tweet  tw-align-center"><p lang="en" dir="ltr">Hello, my name is David. I would fail to write bubble sort on a whiteboard. I look code up on the internet all the time. I don&#39;t do riddles.</p>&mdash; DHH (@dhh) <a href="https://twitter.com/dhh/status/834146806594433025?ref\_src=twsrc%5Etfw">February 21, 2017</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2>Why whiteboard coding doesn&rsquo;t work</h2>

<p>The whiteboard code interview is a poor predictor of candidate performance because it only focuses on a narrow subset of skills that are rarely used on the day-to-day job. Think about it, when was the last time you had to write a merge sort from scratch and without googling?</p>

<p><strong>Whiteboard coding imposes a set of arbitrary limitations that look nothing like the tasks the candidate will perform once it’s hired. </strong></p>

<p>We make candidates write code on a whiteboard where refactoring is virtually impossible. We don’t allow them to look stuff up on Google or bounce ideas off a teammate. They’re supposed to have all the knowledge required to solve the problem in their head and come up with a good solution on the spot. To make matters worse, they’re placed under an artificial time constraint with the added stress of being watched perform.</p>

<p>At their best whiteboard interviews can testify to a good level of puzzle-solving, some knowledge of data structures, and the ability to retain multiple indexes in your head to simulate a whiteboard code execution. All skills specifically <a href="https://jivimberg.io/blog/2019/01/10/how-to-prepare-for-the-silicon-valley-interview-part-2/">learned and practiced for the occasion</a>. A whole industry has spawned around helping engineers ace the whiteboard interview: <a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850">books</a>, <a href="https://leetcode.com/">platforms</a>, <a href="https://www.youtube.com/watch?v=8T7a09V1KZo">talks</a>. And don’t get me wrong, they really work!</p>

<p>But whiteboarding fails to test for things that more closely correlate to <em>good</em> software development. It says nothing about whether the candidate can write clean code. It doesn’t tell you if they can navigate a project and introduce changes. If they’re good at refactoring code and working at the right level of abstraction.  If they know how to design and evolve an API. If they’re proficient at troubleshooting and debugging issues. In essence, whiteboarding fails at telling us whether the candidate can write maintainable code that will last longer than the 40 minutes of the typical coding interview.</p>

<blockquote class="twitter-tweet  tw-align-center"><p lang="en" dir="ltr">Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.</p>&mdash; Max Howell (@mxcl) <a href="https://twitter.com/mxcl/status/608682016205344768?ref\_src=twsrc%5Etfw">June 10, 2015</a></blockquote>


<p> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<h2>Then why do we do it?</h2>

<p>Some would say the whiteboard interview is a rite of passage people need to go through before joining the company. <em>“I went through this experience and did well so the new candidate should do it too”</em>. For the most part, I don’t believe that’s the main reason. I think we just repeat what we’ve seen from other engineers/companies without stopping to think why we do it this way.</p>

<p>I don&rsquo;t know a single engineer that enjoys interviewing. I’d go as far as to say that some of us dread the task. So whenever we’re assigned with evaluating a candidate on their code skills we take the easy way out. We look up some clever interview questions, we study the answers and possible followups, and we roll with it. Thus perpetuating the tradition of whiteboard interviews. To make matters worse, most of the time we are neither trained nor evaluated on how we conduct the interview. And since the impact tends to be long-term and hard to measure people are not really motivated in investing time to improve the process.</p>

<h2>What should we do instead?</h2>

<p><strong>Simple: we should test people in problems and environments as close as possible to what they’ll be doing on the job. </strong></p>

<p>For example, <a href="https://blog.jonrshar.pe/2016/Dec/05/pivotal-interviews.html">Pivotal Labs</a> have the candidate spend a full day pair-programming with the interviewer. No tricky algorithmic puzzle, no whiteboard. A real task at hand and dev-to-dev collaboration.</p>

<p>Another option is to provide a take-home exercise. There’s no artificial time constraint, they can use any 3rd party library and Google whatever they need. Afterward, you can use the submitted code as a starting point for the on-site and ask the candidate to iterate on the solution, either by building a new feature, improving the performance, or working around some limitations.</p>

<p>Yet another option is to give the candidate some code and ask them to refactor it to introduce a new functionality.</p>

<p>One clever thing I&rsquo;ve seen one of my colleagues do at Netflix is to introduce a bug in one of the apps the team maintains, then tell the candidate what users are experiencing and ask them to find the bug and fix it. He assists the candidates with the context needed to understand how the system behaves and nudges them in the right direction if they start going into a rabbit hole.</p>

<p>The ideal scenario, of course, is to have the candidate work with the team for a couple of months before making a decision. That’s why it’s probably easier to hire people already contributing to Open Source projects your company maintains. Unfortunately most of the time this is not really feasible.</p>

<hr />

<p>Improving the coding interview takes time. But it’s hard to think of a better way investment than something that’ll help you hire great software engineers. Hopefully, with time we’ll see fewer and fewer whiteboard interviews.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature4.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Craft Effective Presentations]]></title>
    <link href="http://jivimberg.github.io/blog/2020/03/13/how-to-create-effective-presentations/"/>
    <updated>2020-03-13T15:17:29-07:00</updated>
    <id>http://jivimberg.github.io/blog/2020/03/13/how-to-create-effective-presentations</id>
    <content type="html"><![CDATA[<p>This is a compilation of all the things I learned for creating effective presentations.</p>

<!--more-->


<h2>The golden rule: <strong>NO BULLET POINTS </strong></h2>

<p>If you can only take one thing from this article let it be this: <em>DO NOT use bullet-points on your slides</em>.</p>

<p>There&rsquo;s a simple reason for this: Humans brains are really dumb. They can’t process spoken and written words at the same time. <strong>People will either read the slides or listen to you, but not both.</strong> And since you’re presenting my guess is you want them paying attention to you. So drop all that extra text so people can focus on what you’re saying.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/badExample.png" width="600" title="‘Slide with a lot of text’" ></p>

<p>The first step to a bullet-free slide is breaking your content into smaller chunks. <strong>Each slide should focus on a single idea that can be expressed in one or two sentences</strong> (no more than 20 words). Less is more. The rest of the content, the things that you’d normally put in the bullet points, can be spoken. There’s no limit to the number of slides you can use, just make sure you’re only adding the key points on text and speaking the rest.</p>

<p>You&rsquo;ll soon find out that doing this kind of breakdown is hard. Condensing each topic to a single line takes time. But I promise you, once you do this you’ll be halfway through to creating a great presentation.</p>

<p>Now that you have your central ideas, let&rsquo;s talk about styling. The main goal is to keep it simple so viewers are not distracted. Choose a sans-serif typeface (the ones without the ornaments) and make your text HUGE.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/serif-vs-sans-serif.jpg" width="400" title="‘Example of serif and sans serif fonts’" ></p>

<p>Big letters are important because everybody in the room should be able to read it, and it’ll help you stay under the 20 words limit. Pick contrasting colors for text and background. You can use <a href="https://colorhunt.co/">Color Hunt</a> to find a cool palette for your deck.  Finally, place the text in the upper left corner. You can add an image or graph if needed, but don’t put something just because you have the space. Make sure it’s meaningful. Keep it short, keep it simple.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/bigText.png" width="600" title="‘Big text is easier to read’" ></p>

<p style='text-align: center;'>
(Yes, this is the whole slide)
</p>


<h2>The handout</h2>

<p>You might be worried that, by removing text from the slides, people won’t get the full context when going through your deck after the presentation. The solution is to create 2 different artifacts: a presentation and a handout.</p>

<p>All you have to do is move the text from the slides to the presenter notes.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/presenterNotes.png" width="600" title="‘Handout example’" ></p>

<p>Then, to email your presentation just select <em>Print settings and preview</em> and choose <em>1 slide with notes</em>. Now you have a PDF handout to send after the presentation that includes all the context needed to understand each slide. As a bonus you also get notes you can use while presenting.</p>

<h2>Guiding the audience focus</h2>

<p>Now that we have trimmed the fat from the content it’s time to deal with other sources of distraction. Every single thing not contributing to the message is noise and should go.</p>

<p>First, avoid cluttered templates. They might look cute on page but they can distract the audience.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/clutteredTemplates.png" width="600" title="‘Example of a slide with a cluttered template’" ></p>

<p>Also, get rid of all the cheese transitions. The only animations you should need is <em>appear </em>and<em> disappear</em> to reveal content as you talk. You can also color and opacity on text or images to guide the audience attention. To achieve this you simply duplicate the slide and apply the appropriate changes.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/focus.gif" width="600" title="‘Example of using color and opacity to guide audience focus’" ></p>

<p>The only exception to the &ldquo;no animation rule&rdquo; is if your animation is needed to express the slide’s idea. For example, you might animate a pointer to represent the order of execution on a snippet of code, as I did here:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/animationExample2.gif" title="‘Example of a valid use of animation in a slide’" ></p>

<p style='text-align: center;'>
(I used Magic Move on  Keynote to create this)
</p>


<p>The same rule applies to all other elements of your slide: layout, image size and placement, color, etc. People will infer meaning from all these things, so make sure they’re reinforcing your message and not working against it. For example if you’re talking about three things that happened one after the other align them horizontally and sort them left to right. If you mention a big number make the text big. If you’re comparing two similar things make them the same size and place them side by side. Note how in the “elements of design” slide shown above, the text placement emphasizes the words’ meaning.</p>

<p>Finally, if you have gifs on you presentation, <strong>make sure to stop them after one or two repetitions</strong>. Anything, blinking or moving on the screen is competing with you for attention. <a href="https://davidwalsh.name/prevent-gif-loop">https://davidwalsh.name/prevent-gif-loop</a></p>

<h2>Start with a hook</h2>

<blockquote><p>Humans think in stories, and we try to make sense of the world by telling stories. <em>Yuval Noah Harari</em></p></blockquote>

<p>You know how most presentations start with: &ldquo;My name is Juan and I’m professional turtle trainer, today I’ll talk about depression in turtles“? People already showed up, so they either know who you are or care about the topic you’ll be presenting about, or both. So instead of opening with a boring introduction try using a hook.</p>

<p>Review Start your presentation with a story, a joke or an anecdote related to the topic. Grab the attention of the audience from your first line. Once they’re  hooked in and paying attention you can introduce yourself. You see this all the time on TED talks like this one:</p>

<div style="max-width:600px;margin:30px auto"><div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://embed.ted.com/talks/shawn_achor_the_happy_secret_to_better_work" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen></iframe></div></div>


<h2>Repeat, Repeat, Repeat</h2>

<p>If you want your message to stick <strong>say it multiple times</strong>. The trick to avoid boring your audience is to say the same thing in many different ways. Paraphrase, use an image, present an example or a counter-example, make a rethorical question, use a conversational style… Get creative!</p>

<p>This works because different people prefer different styles of communication. Some of us are more visually inclined, some like specific examples over generalizations, etc. Also, by repeating the mains ideas you’re signaling the audience what’s important. You’re separating the wheat from the chaff. Last but not least, it also works because people get distracted and they might have missed the point the first time.</p>

<p>When possible try to evoke some emotion. As the <a href="https://en.wikipedia.org/wiki/Head_First_(book_series)">Head First Series</a> taught us: <em>“brains are tuned to pay attention to the biochemistry of emotions”</em>. Share a personal anecdote, make them laugh with a joke or pique their curiosity with a controversial claim and you can guarantee they’ll be paying attention.</p>

<h2>The slides</h2>

<p>Let&rsquo;s go over some of the most common types of slides and how to improve them.</p>

<h3>The title slide</h3>

<p>Most of the time the title slide includes just the title of the talk. Instead, consider providing some context on what’s going to be covered in the presentation as a full sentence. If you’re opening with a hook you can have visuals on your title slide to get right into it.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/titleSlides.png" width="700" title="‘Example of title slides’" ></p>

<h3>The intro slide</h3>

<p>Consider using a blank screen for your introduction. This way you guarantee the attention will be on you and not your slides. Another option is to use a personal photo, related to the topic at hand. Either way, remember that it’s best to open with a hook instead of your introduction.</p>

<h3>The agenda slide</h3>

<p>Most of the time you don&rsquo;t really need an agenda slide. Just jump straight to the content. But if you do include one, make sure you use a small number of sections. Three or four is the sweet spot. You can use images and colors as visual representation of each section.</p>

<h3>The quote slide</h3>

<p>You should have the quote on your slide, only if you’re going to read it word by word. If what you’re saying doesn’t match the text on the screen people will get confused. Another option is to simply blank the screen while reading the quote (here you get to paraphrase if you want).</p>

<h3>The image slide</h3>

<p>When using images go big. Don&rsquo;t worry about breaking the template if you’re using one. Take an empty slide and set the image as background. Don’t put text on it unless you really need to. And if you do use contrasting colors, or place the text over a box with a transparent background to make it readable.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/imageSlides.png" width="700" title="‘Examples of image slides’" ></p>

<h3>The code slide</h3>

<p>Make sure to use syntax highlighting to make the code more readable. Copy and paste from your favorite IDE or use an online syntax highlighting tool to get a color palette that works with your background.</p>

<p><strong>Remove all boilerplate</strong>. If it’s obvious it can be omitted. For example, if you’re showing  a Java class remove all getters, setters and constructors. Don’t worry if the code on the slide doesn’t really compile. You can include the actual code in the handout or link to a public repo or gist.</p>

<p>If the code has multiple parts you&rsquo;ll be talking about, highlight only the section you’re focusing on and gray out all the rest.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-04-23/codeSlide.gif" width="600" title="‘Example of using color and opacity to guide audience focus’" ></p>

<p>Consider using pseudo code so people don&rsquo;t need to be familiar with your language of choice to understand the slide.</p>

<p>Finally, if you like living on the edge and want to do live coding on the stage, you can open your code in full screen on a different workspace and have a separator slide to transition to the editor. Some IDEs have a <a href="https://www.jetbrains.com/help/idea/ide-viewing-modes.html">presentation mode</a> you can use to make the font huge and remove all other distractions. Just make sure to have a plan B because demos always fail.</p>

<h3>The &ldquo;Thank You&rdquo; slide</h3>

<p>Many times this is the slide that stays on screen for the most time. Don’t just write “Thank you” or “Q &amp; A”. Use it to present a summary of the main ideas on your presentation. Make sure to include your social handles in case somebody from the audience wants to reach out to you.</p>

<h2>Bonus: Blanking out the screen</h2>

<p>In this article I mention using an empty slide or blanking out the screen for some sections like the introduction or the quote slide. Having nothing on the screen means all eyes are on you. There’s nothing competing for the audience attention. You’ll be surprised with how well this works.</p>

<p>To achieve this you can either user an empty slide with a black background, or use one of the <a href="https://support.google.com/docs/answer/1696717?co=GENIE.Platform=Desktop&amp;hl=en">keyboard shortcuts</a> in any part of your presentation.</p>

<hr />

<h2>Acknowledgements</h2>

<p>Some of these things I learned from <a href="https://zachholman.com/talks">Zach Holman writings</a> (check his website <a href="https://speaking.io/">speaking.io</a>). More recently I attended a course from <a href="http://christinehaasconsulting.com/services/">Christine Haas Consulting</a> which really helped me polish my presentation skills. The rest comes from years of watching great presenters and practicing. That’s the only way to improve, right?</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature3.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hexagonal Architecture on Spring Boot]]></title>
    <link href="http://jivimberg.github.io/blog/2020/02/01/hexagonal-architecture-on-spring-boot/"/>
    <updated>2020-02-01T20:51:59-08:00</updated>
    <id>http://jivimberg.github.io/blog/2020/02/01/hexagonal-architecture-on-spring-boot</id>
    <content type="html"><![CDATA[<p>In this article, I&rsquo;ll show how to implement a Spring Boot application using Hexagonal Architecture.</p>

<!--more-->


<p>We&rsquo;ll build a Bank Account simulation with <em>deposit</em> and <em>withdraw</em> operations exposed through REST endpoints.</p>

<h2>Hexagonal Architecture</h2>

<p>Hexagonal architecture is an architectural style that <strong>focuses on keeping the business logic decoupled from external concerns</strong>.</p>

<p>The business core interacts with other components through ports and adapters. This way, we can change the underlying technologies without having to modify the application core.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-02-01/HexagonalArchitecture-generic.png" width="700" title="‘Generic Hexagonal Architecture diagram’" ></p>

<h2>Application Core</h2>

<h3>Domain Model</h3>

<p>Let&rsquo;s start with the domain model. Its main responsibility is to model the business rules. It also verifies that the objects are always in a valid state:</p>

<figure class='code'><figcaption><span>BankAccount.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccount</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">balance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Constructor</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">withdraw</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">balance</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">amount</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The domain model should have no dependency on any specific technology. That&rsquo;s the reason why you&rsquo;ll find no Spring annotations here.</p>

<h3>Ports</h3>

<p>Now it&rsquo;s time to have our business logic interact with the outside world. To achieve this, we&rsquo;ll introduce some ports.</p>

<p>First, let&rsquo;s define 2 incoming ports. <strong>These are used by external components to call our application</strong>. In this case, we&rsquo;ll have one per use case. One for <em>Deposit</em>:</p>

<figure class='code'><figcaption><span>DepositUseCase.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DepositUseCase</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And one for <em>Withdraw</em>:</p>

<figure class='code'><figcaption><span>WithdrawUseCase.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">WithdrawUseCase</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="nf">withdraw</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, we&rsquo;ll also have 2 outgoing ports. <strong>These are for our application to interact with the database</strong>. Once again, we&rsquo;ll have one per use case. One for <em>Loading</em> the Account:</p>

<figure class='code'><figcaption><span>LoadAccountPort.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">LoadAccountPort</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Optional</span><span class="o">&lt;</span><span class="n">BankAccount</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And one for <em>Saving</em> it:</p>

<figure class='code'><figcaption><span>SaveAccountPort.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SaveAccountPort</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">BankAccount</span> <span class="n">bankAccount</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Service</h3>

<p>Next, we&rsquo;ll create a service to tie all the pieces together and drive the execution:</p>

<figure class='code'><figcaption><span>BankAccountService.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccountService</span> <span class="kd">implements</span> <span class="n">DepositUseCase</span><span class="o">,</span> <span class="n">WithdrawUseCase</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="n">LoadAccountPort</span> <span class="n">loadAccountPort</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">SaveAccountPort</span> <span class="n">saveAccountPort</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Constructor</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">BankAccount</span> <span class="n">account</span> <span class="o">=</span> <span class="n">loadAccountPort</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">NoSuchElementException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">saveAccountPort</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">account</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">withdraw</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">BankAccount</span> <span class="n">account</span> <span class="o">=</span> <span class="n">loadAccountPort</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">NoSuchElementException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">boolean</span> <span class="n">hasWithdrawn</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">hasWithdrawn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">saveAccountPort</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">account</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">hasWithdrawn</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how the service implements the incoming ports. On each method, it uses the <em>Load</em> port to fetch the account from the database. Then, it performs the changes on the domain model. And finally, it saves those changes through the <em>Save</em> port.</p>

<h2>Adapters</h2>

<h3>Web</h3>

<p>To complete our application, we need to provide implementations for the defined ports. We call these adapters.</p>

<p>For the incoming interactions, we&rsquo;ll create a REST controller:</p>

<figure class='code'><figcaption><span>BankAccountController.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/account&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccountController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">final</span> <span class="n">DepositUseCase</span> <span class="n">depositUseCase</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">final</span> <span class="n">WithdrawUseCase</span> <span class="n">withdrawUseCase</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Constructor</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/{id}/deposit/{amount}&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">depositUseCase</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/{id}/withdraw/{amount}&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">withdraw</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">withdrawUseCase</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">amount</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller uses the defined ports to make calls to the application core.</p>

<h3>Persistence</h3>

<p>For the persistence layer, we&rsquo;ll use Mongo DB through Spring Data:</p>

<figure class='code'><figcaption><span>SpringDataBankAccountRepository.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SpringDataBankAccountRepository</span> <span class="kd">extends</span> <span class="n">MongoRepository</span><span class="o">&lt;</span><span class="n">BankAccount</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, we&rsquo;ll create a <em>BankAccountRepository</em> class that connects the outgoing ports with the <em>SpringDataBankAccountRepository</em>:</p>

<figure class='code'><figcaption><span>BankAccountRepository.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccountRepository</span> <span class="kd">implements</span> <span class="n">LoadAccountPort</span><span class="o">,</span> <span class="n">SaveAccountPort</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">private</span> <span class="n">SpringDataBankAccountRepository</span> <span class="n">repository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Constructor</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">BankAccount</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(</span><span class="n">BankAccount</span> <span class="n">bankAccount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">bankAccount</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Infrastructure</h3>

<p>Finally, we need to tell Spring to expose the <em>BankAccountService</em> as a bean, so it can be injected in the controller:</p>

<figure class='code'><figcaption><span>BeanConfiguration.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackageClasses</span> <span class="o">=</span> <span class="n">HexagonalApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeanConfiguration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Bean</span>
</span><span class='line'>      <span class="n">BankAccountService</span> <span class="nf">bankAccountService</span><span class="o">(</span><span class="n">BankAccountRepository</span> <span class="n">repository</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="nf">BankAccountService</span><span class="o">(</span><span class="n">repository</span><span class="o">,</span> <span class="n">repository</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Defining the beans in the Adapters layer helps us maintain the infrastructure code decoupled from the business logic.</p>

<h2>Conclusion</h2>

<p>In this article, we&rsquo;ve seen how to implement an application using Hexagonal Architecture and Spring Boot. This is what the system ends up looking like:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2020-02-01/HexagonalArchitecture-impl.png" width="700" title="‘Generic Hexagonal Architecture Spring Boot example’" ></p>

<p>The code for this example is <a href="https://github.com/jivimberg/hexagonal-architecture">available on Github</a>.</p>

<hr />

<p>This article is based on the <em>highly recommendable</em> <a href="https://leanpub.com/get-your-hands-dirty-on-clean-architecture">&ldquo;Get Your Hands Dirty on Clean Architecture</a> by <a href="https://twitter.com/TomHombergs">Tom Hombergs</a>, and <a href="https://www.baeldung.com/hexagonal-architecture-ddd-spring">this Baeldung article</a> by <a href="https://www.baeldung.com/author/lukasz-rys/">Łukasz Ryś</a>.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature9.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Shape Up]]></title>
    <link href="http://jivimberg.github.io/blog/2019/09/15/book-recommendations-shape-up/"/>
    <updated>2019-09-15T10:51:31-07:00</updated>
    <id>http://jivimberg.github.io/blog/2019/09/15/book-recommendations-shape-up</id>
    <content type="html"><![CDATA[<p>I love reading about how people do creative work. Be it <a href="https://en.wikipedia.org/wiki/On_Writing:_A_Memoir_of_the_Craft">writing books</a> or <a href="http://the-witness.net/news/">designing video games</a>, there’s something magical about peeking behind the curtain and learning how the pros do their thing.</p>

<p>Today I’m reviewing <a href="https://basecamp.com/shapeup">Shape Up</a>, a book about the process of writing software at Basecamp.</p>

<!--more-->


<p><a href="https://basecamp.com/shapeup"><img class="center" src="http://jivimberg.github.io/images/posts/2019-09-29/shapeUpCover.png" width="700" title="‘Book cover’" ></a></p>

<p>(<em>I promise those potato shapes ☝️ will make sense by the time you finish the book</em>)</p>

<h1>What is it?</h1>

<p>Shape Up is a book by <a href="https://twitter.com/rjs">Ryan Singer</a> about how <a href="https://basecamp.com/about">Basecamp</a> (the company) writes <a href="https://basecamp.com/">Basecamp</a> (the app). It goes through the development process, from the moment a new idea comes up, ‘till it shows up in production as a fully implemented feature.</p>

<h1>Why does it matter?</h1>

<p><strong>Because it’s fresh!</strong> This is not your run-of-the-mill <em>“How we do Agile”</em> kind of book. There are no Kickoff meetings, no Kanban boards, no Daily Standup. They don’t even keep a backlog!</p>

<p>Coming from the people that wrote <a href="https://basecamp.com/books/remote">Remote</a> and <a href="https://basecamp.com/books/calm">It doesn’t have to be crazy at work</a>, you know this is a company that’s not afraid to innovate.</p>

<blockquote><p>Now that our process is fully formed, documented, and ready to go, we’re here to share it with all those curious enough to listen to a new way of doing things. Explorers, pioneers, those who don’t care what everyone else is doing. Those who want to work better than the rest.</p><footer><strong>Jason Fried</strong> <cite>Basecamp CEO</cite></footer></blockquote>


<p>Also, it doesn’t hurt that it is short, well-written, and has real-life examples and stick-figure drawings. <strong>Oh! and it’s free!! 💸</strong></p>

<h1>So, what did you learn?</h1>

<p>A bunch of things! I’m not going to cover everything because I wouldn’t be able to do it justice. Instead, I’ll focus on a couple of nuggets of wisdom. If you find them interesting, go check the book! Getting a better sense of how the whole process is structured shines a new light on the bits you’ll find described here.</p>

<h2>The shape of your task</h2>

<p>A big part of the book is about what happens before the developer starts coding. It is about choosing and defining what’s going to be built. This is what Basecamp calls <a href="https://basecamp.com/shapeup/1.1-chapter-02"><em>”Shaping”</em></a>, and it is so integral to their process that it’s right there on the book’s title. I found this refreshing since, more often than not, books will focus on the execution of tasks instead of how to come up with them.</p>

<p>Basecamp uses cycles of six weeks.  While the developers are busy delivering features, a group of senior staff members<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> works on defining what’s going to come next. If the project is approved (more on this later), a team of developers will use this spec to make it happen on the next cycle.</p>

<p>The key to Shaping is that it has to happen at <strong>the proper level of abstraction</strong>. Go too abstract, and the dev team might end up building the wrong thing. Go too concrete, and they have no wiggle room to work around a technical pitfall or revise a design choice.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2019-09-29/knob.png" width="400" title="‘Abstraction knob’" ></p>

<p>For example, they’d use fat marker drawings instead of wireframes, to avoid delving too deep into the UI design details.</p>

<p>You want to end up with a good definition of the problem and a rough sketch of the solution. A clear sense of what’s part of the solution and what’s out of scope. A set of elements and how they connect to each other, but no comprehensive list of tasks or high-res mockups. Those things will come later when the dev team takes over and starts exploring the solution.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2019-09-29/fatMarker.png" width="150" title="‘Fat marker sketch’" ></p>

<p>Only once shaping is complete, they’d take it to the <a href="https://basecamp.com/shapeup/2.2-chapter-08#the-betting-table"><em>“betting table“</em></a> where they decide if this is something they want to bet the next six weeks on. If the pitch is , it goes into the next cycle. If it’s not, then nothing happens. There’s no centralized backlog or list of rejected ideas. If somebody considers it important or thinks that a better solution can be found, they’ll lobby for it again six weeks later.</p>

<h2>Evaluating new ideas and user requests</h2>

<p>Every single new idea and feature request gets the same answer:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-09-29/interesting.png" width="400" title="‘Interesting! Maybe some time’" ></p>

<p>Basecamp believes an idea needs to go through the shaping process detailed above before they’re ready to bet on it.  When a new request comes in, they’d first try to identify what’s the user need (which sometimes might be quite different from what the user is asking for). Then, they see how they can solve the requirement with a minimal amount of effort. They acknowledge there’s always a better, more complete solution if you have infinite time at your disposal. The trick here is to find a good solution that works under the given constraints (in their case, that it can be built by a small team of engineers and designers in no more than six weeks)</p>

<p>If they’re not able to narrow down the problem and it’s not critical, they simply let it rest and wait to see if the same problem shows up again, so they can get a better sense of what they’re solving for. <strong>Grab-bags such as: “Redesign profile page” or “Refactor engine” are a no-go</strong>. The scope has to be well-defined before they’re ready to bet on an idea.</p>

<h2>Showing progress</h2>

<p>This is how we track progress in our industry:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-09-29/scrum.jpg" width="700" title="‘Wall full of post-it notes’" ></p>

<p>The problem with this approach is that it only works if all required tasks are known up-front. And let’s face, 99% of the time, that’s not the case. Most of the time, you’d start coding the first task only to discover that a new component needs to be added, and you’ll have to fix a few connections this change will introduce.</p>

<p>The book acknowledges this exploration phase as an inherent part of the developers' work. It makes the distinction between 2 different types of tasks:</p>

<ul>
<li><strong>Imagined tasks</strong>: Those thought about before you start coding</li>
<li><strong>Discovered tasks</strong>: Those you discover as you go.</li>
</ul>


<p>The tool they came up with to communicate progress are <a href="https://basecamp.com/features/hill-charts">Hill Charts</a>, and they look like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-09-29/hillChart1.png" width="600" title="‘Hill Chart’" ></p>

<p>As you can tell, it’s not (only) a function of pending tasks, but also of confidence in that all remaining tasks have been discovered.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-09-29/hillChart2.png" width="600" title="‘Hill Chart 2’" ></p>

<p>A good way of gaining confidence at the start of a project is to begin with the pieces that present the most uncertainty, and move them to the top of the hill first. Doing this before finishing the downhill stuff reduces the chances the project will be late.</p>

<hr />

<p>That’s all…</p>

<p>If you enjoyed the review, you’ll love the book. <a href="https://basecamp.com/shapeup">Go check it out!!</a></p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature5.png" width="200" title="‘My signature’" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Not sure why they’re not referred to as PMs in the book<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: The Advantage]]></title>
    <link href="http://jivimberg.github.io/blog/2019/08/11/book-recommendations-the-advantage/"/>
    <updated>2019-08-11T20:09:32-07:00</updated>
    <id>http://jivimberg.github.io/blog/2019/08/11/book-recommendations-the-advantage</id>
    <content type="html"><![CDATA[<p>Today I’m reviewing <a href="https://read.amazon.com/kp/embed?asin=B006ORWT3Y&amp;preview=newtab&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_CFpuDbJQRH32R">The Advantage</a> by <a href="https://twitter.com/patricklencioni">Patrick Lencioni</a>. A book written for leaders looking to build a healthy organization.</p>

<!--more-->




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%"  src="https://read.amazon.com/kp/card?asin=B006ORWT3Y&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_CFpuDbJQRH32R" ></iframe>


<h1>Intro</h1>

<p>The book opens explaining why organizational health is so important. This is <em>The Advantage</em> referenced by the title. If you&rsquo;re not sold on the idea that culture is a big business advantage by the end of the chapter, you&rsquo;re probably better off reading something else…</p>

<h1>The 6 questions</h1>

<p>Next, the author goes on to describe <em>The Four Disciplines Model</em> ™. In a nutshell:</p>

<h2>1. Build a Cohesive Leadership Team</h2>

<p>Keep the team small. Make sure every leader understands that playing for the leadership team is more important than favoring their specific departments. Foster conflict, but achieve commitment (<a href="https://en.wikipedia.org/wiki/Disagree_and_commit">&ldquo;Disagree and commit&rdquo;</a>). Once you reach commitment, keep people accountable. Finally, <strong>embrace feedback</strong>, you have to be willing to be vulnerable with your team-mates. It is ok to admit when you fuck up<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h2>2. Create Clarity</h2>

<p>Once you have a good leadership team, make sure you&rsquo;re aligned on the important topics. To achieve this, the leadership team should answer 6 questions:</p>

<ol>
<li>Why do we exist?</li>
<li>How do we behave?</li>
<li>What do we do?</li>
<li>How will we succeed?</li>
<li>What is most important, right now?</li>
<li>Who must do what?</li>
</ol>


<p>The answers to these questions will become the kernel of every decision taken. So, don&rsquo;t fall for generic marketing 💩. Be really specific on what your key differentiator is, and drop everything else. If you&rsquo;re not willing to center all your business in, say, <em>customer satisfaction</em> just don&rsquo;t mention it.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-08-11/dunder-mifflin.jpg" title="‘Dunder Mifflin mission statement’" ></p>

<p>Bottomline, if your answers sound like <a href="https://dundermifflinpaper.com/">Dunder Mifflin</a>&rsquo;s mission statement you&rsquo;re doing it wrong.</p>

<p>As soon as there&rsquo;s agreement and commitment on these answers the leadership team needs to communicate them to the rest of the organization.</p>

<h2>3. Over-communicate Clarity</h2>

<p>The book advocates for 2 communication strategies:</p>

<ul>
<li>Cascading communication: <strong>the same message</strong> should be relayed down the ranks, organically. That is, don&rsquo;t just learn a script and repeat it like a robot, understand the message and pass it through face to face. Give people the chance to ask questions to clarify meaning.</li>
<li>Over-communication: <strong>Repeat</strong> the message until it sticks. Say it again, and again, and again&hellip; Only after hearing the same thing from multiple source people will believe it.</li>
</ul>


<h2>4. Reinforce clarity</h2>

<p>Finally, make sure <strong>all</strong> actions are aligned with the answers agreed upon by the leadership team. Actions speak louder than words. Lead by example.</p>

<p>All company processes should reinforce these values. When hiring don&rsquo;t just look for technical ability, check for cultural fit first. The first few days of a new hire in the company are key to instruct new employees on the company values. Don&rsquo;t waste them with trivial stuff like setting up the email account, they&rsquo;ll have time for that. Similarly, every benefit, promotion and reward should be designed to remind employees what&rsquo;s important.</p>

<h1>Meetings</h1>

<p>The last part of the book focuses on how to have meaningful meetings. It proposes a framework of 4 different type of meetings:</p>

<ul>
<li><strong>Daily checkins:</strong> aka <a href="https://en.wikipedia.org/wiki/Stand-up_meeting">Standup Meetings</a>.</li>
<li><strong>Weekly staff meetings:</strong> in which the author proposes setting no agenda beforehand and instead using the first 15 minutes to align on what topics should be discussed.</li>
<li><strong>Adhoc topical meetings:</strong>  2 to 4 hours meetings focused on a single topic.</li>
<li><strong>Quarterly off-site</strong> 1 or 2 days offsite to revisit and reiterate on the 6 questions.</li>
</ul>


<p>To be honest I didn&rsquo;t find much <em>new</em> knowledge on the meetings topic. But maybe that&rsquo;s only because I was familiar with the author&rsquo;s book on the subject: <a href="https://www.amazon.com/Death-Meeting-Leadership-Solving-Business/dp/0787968056">Death by meetings</a>.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature11.png" width="200" title="‘My signature’" ></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>More on this in <a href="https://jivimberg.io/blog/2018/09/30/book-recommendations-radical-candor/">Radical Candor</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphic Design Tools for Backend Engineers]]></title>
    <link href="http://jivimberg.github.io/blog/2019/06/07/graphic-design-tools-for-backend-engineers/"/>
    <updated>2019-06-07T22:14:38-07:00</updated>
    <id>http://jivimberg.github.io/blog/2019/06/07/graphic-design-tools-for-backend-engineers</id>
    <content type="html"><![CDATA[<p>You might think that being a backend engineer means you’ll never have to draw anything more complex than a bunch of boxes connected with arrows (or hexagons if are going all cloud native). This is simply not true, and that’s why you’re here.</p>

<p>At some point you’ll find yourself producing system diagrams, flow-charts, slides, mockups, maybe even icons! So, let me show you some tools and tricks I picked up over the years to fake it at design.</p>

<!--more-->


<h2>Hand-draw images</h2>

<p>Maybe you noticed that some of the drawings that I use on this website look like they where done by a 5 year old. Like this one:</p>

<p><a href="https://jivimberg.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines/"><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/consumerDiagram.png" width="800" title="‘A hand drawing’" ></a></p>

<p>I create these using <a href="https://products.office.com/en-us/onenote/digital-note-taking-app">Microsoft’s OneNote</a> on my wife’s <a href="https://www.microsoft.com/en-us/p/surface-pro-5th-gen/8nkt9wttrbjk?activetab=pivot:overviewtab">Surface Pro</a>. The app it’s somewhat basic, but it does one key thing: it lets you select your traces, move them around and scale them with simple gestures. And that’s really alI you need.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/surfacePro.jpg" width="600" title="‘Drawing on a SurfacePro’" ></p>

<p>Also you can drop any kind of file to OneDrop and draw on top of it.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/meFramed.png" width="200" title="‘A doodle on my face’" ></p>

<p>But, as I said, the Surface Pro is not mine, so I don’t get to take it to work. At the office I use a low-tech alternative: a <strong><a href="https://getrocketbook.com/">Rocketbook</a></strong>. It’s a notebook you can erase with water.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/rocketbook.gif" title="‘Rocketbook animation’" ></p>

<p>The pages are from a plasticky material, but it feels pretty close to drawing on actual paper. And you get karma points for not needing dead trees to do your half-ass doodles.</p>

<p>The best thing is that it comes with an app that allows you to scan your drawings and configure an action based on an icon you mark on the page. This helps me digitalize all my notes in a breeze. I can sketch something quickly, take out my phone and share it in Slack in 2 seconds, and without having to shell out $1k for an iPad.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/slack.png" title="‘Slack conversation with drawing’" ></p>

<p>My only complain is that you have to wait a couple of minutes for the pages to dry when you’re cleaning it. So cleaning the whole book might take you 15 or 20 minutes. But I only do this once a month so it’s not that big of a deal for me.</p>

<h2>System diagrams and Flowcharts</h2>

<p>Let’s face it, most of your diagrams will still be boxes, cylinders and stick-figures. You don’t want your wiki page or slides including an image like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/ugly-whiteboard.png" width="400" title="‘Whiteboard image that looks ugly’" ></p>

<p>Why not do it with style? Meet <strong><a href="https://whimsical.com">Whimsical</a></strong>. With this tool you’ll be able to spit beautiful diagrams in seconds. It’s deceptively simple. It has smart snap to grip and auto-grouping that at times feels like it’s reading your mind.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/whimsical.gif" width="800" title="‘Whimsical demo’" ></p>

<p>It can do flowcharts, mind maps, wireframes and sticky notes. The catch is you only get 4 <em>“boards”</em> for free. After that it’s $10 a month💰</p>

<p>If you don’t feel like paying you can always use <a href="https://www.draw.io/">draw.io</a>. It has Google Drive integration, and a wide variety of shapes for different types of diagrams (Flow-chars, UML, BPMN, etc).</p>

<p>Use the comic style to get your diagrams to look like this:</p>

<p><a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/"><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/drawio.png" title="‘Draw.io example’" > </a></p>

<p><em>(This diagram is from my <a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">“Writing Githooks in Kotlin”</a> post)</em></p>

<p>If all you’re trying to create is a UML of your existing code then you should check <a href="https://www.jetbrains.com/help/idea/class-diagram.html">this Intellij feature</a> that gives you just that in a couple clicks.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/intellijUML.png" width="600" title="‘UML diagram from Intellij’" ></p>

<p>Similarly if you’re using Spring you can <a href="https://www.jetbrains.com/help/idea/spring-support.html">get a beans dependencies diagram</a> just as easily.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/beans-dependencies.png" width="600" title="‘Beans dependencies diagram on Intellij’" ></p>

<h2>Sharing snippets of code</h2>

<p>If you need to share a snippet of code you can create a Gist like this one: <a href="https://gist.github.com/jivimberg/8cae46cdb5b98c0d19176efcde2eadd9">sendForm.gs</a>. And you can easily embed them in a page:</p>

<div><script src='https://gist.github.com/8cae46cdb5b98c0d19176efcde2eadd9.js'></script>
<noscript><pre><code>function sendFormEmail() {
    var toEmailAddress = &quot;someone@gmail.com&quot;;
    var htmlMessage = HtmlService.createHtmlOutputFromFile(&quot;Name-of-your-HTML-file.html&quot;).getContent();
    var subject = &quot;Subject&quot;;
    var message = &quot;Some message&quot;;
    MailApp.sendEmail(toEmailAddress, subject, message, {
      htmlBody: htmlMessage
    });
}

function createTimeDrivenTriggers() {
    // Trigger every day at 6 pm.
    ScriptApp.newTrigger(&#39;sendFormEmail&#39;)
    .timeBased()
    .atHour(18)
    .everyDays(1) // Frequency is required if you are using atHour() or nearMinute()
    .create();
}</code></pre></noscript></div>


<p>Gist are great because they have version history, can be commented, forked and starred and you can group multiple files in a single Gist.</p>

<p>If you happen to be working with Kotlin you can also use <a href="https://play.kotlinlang.org/">Kotlin Playground</a>, this way you also get the ability to execute the code. Here is <a href="https://pl.kotl.in/_h-DbUrtj">an example</a>. You can also embed them as well, or better yet, <a href="https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/">include Kotlin playground as a script in your page</a> and have all your code blocks converted to runnable snippets.</p>

<xmp class="kotlin-code" theme="darcula">
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.FlowPreview
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.consumeEach
import kotlinx.coroutines.channels.produce
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.asFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.launch
import kotlin.system.measureTimeMillis

//sampleStart
@ExperimentalCoroutinesApi
@UseExperimental(FlowPreview::class)
suspend fun main() {
    val time = measureTimeMillis {
        (1..10).asFlow()
            .parallelMap(3, 3) { delay(100); it * 2 }
            .collect { print("$it ") }
    }
    println()
    println("Execution time in millis: $time")
}
//sampleEnd

@kotlinx.coroutines.FlowPreview
@kotlinx.coroutines.ExperimentalCoroutinesApi
fun <T, R> Flow<T>.parallelMap(
    bufferSize: Int,
    concurrency: Int,
    transform: suspend (value: T) -> R
): Flow<R> {
    require(bufferSize >= 0) { "Expected non-negative buffer size, but had $bufferSize" }
    require(concurrency > 0) { "Expected concurrency level greater than 0, but had $concurrency" }

    return flow {
        coroutineScope {
            val inputChannel = produce {
                collect { send(it) }
                close()
            }

            val outputChannel = Channel<R>(capacity = bufferSize)

            // Launch $concurrency workers that consume from
            // input channel (fan-out) and publish to output channel (fan-in)
            val workers = (1..concurrency).map {
                launch {
                    for (item in inputChannel) {
                        outputChannel.send(transform(item))
                    }
                }
            }

            // Wait for all workers to finish and close the output channel
            launch {
                workers.forEach { it.join() }
                outputChannel.close()
            }

            // consume from output channel and emit
            outputChannel.consumeEach { emit(it) }
        }
    }
}
</xmp>


<p>Finally, if all you want is to show some highlighted code you can use <a href="https://carbon.now.sh">carbon.sh</a> to get a beautiful image of your source code, like this one:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/carbon.png" title="‘Carbon.sh demo’" ></p>

<h2>Presentations</h2>

<p>I’ve used a lot of <a href="https://prezi.com"><strong>Prezis</strong></a> in the past. If you’ve never seen a Prezi think a giant canvas where you drop stuff, and each slide is basically zooming to a different portion of the canvas. Here’s an example of a Prezi I did about the things I learned from <a href="https://www.coursera.org/learn/gamification">Coursera’s gamification course</a> by <a href="https://www.coursera.org/instructor/~226710">Kevin Werbach</a>.</p>

<iframe id="iframe_container" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" allow="autoplay; fullscreen" width="550" height="400" src="https://prezi.com/embed/uyg0exmhwbrn/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;landing_data=bHVZZmNaNDBIWnNjdEVENDRhZDFNZGNIUE43MHdLNWpsdFJLb2ZHanI5dkNTakxDRmJwb3czakswMFhxZHJkNGtRPT0&amp;landing_sign=YH6jqN1LpGyTSh-ze0MNsqdGvDrfivc-HRxIPrpG7H8"></iframe>


<p>It’s an awesome tool that adds a world of possibilities to your presentations. But, with time I understood that just throwing cool transitions doesn’t make your presentation that much better. As any good designer knows, <a href="https://material.io/design/motion/#principles">animations need to serve a purpose</a>. Prezi works best when you use its zooming effects to reinforce the ideas you’re trying to communicate, or to use the canvas layout so that viewers get a good sense on how the content is organized. If you combine this tools in a meaningful way you can create amazing presentations <a href="https://prezi.com/mgujrvianlqb/virtual-tour-ceva-logistics/">like this one</a>.</p>

<p>This days, though, if I need to throw a deck together quickly, I hit <a href="https://www.slidescarnival.com/"><strong>Slides Carnivals</strong></a>. I pick a template that matches the topic I’m covering, import it in Google Slides and start working on it. Only if I need some fancy animations I’d use Keynote (see next topic).</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/slidesCarnival.png" width="800" title="‘Slides carnival’" ></p>

<p>Finally,  it doesn’t really matter which tools you use if you’re just going to cramp 3 paragraphs of text in a slide. And no, having bullet points doesn’t make it any better.  You need to <a href="https://zachholman.com/posts/slide-design-for-developers/">give your deck some ❤️</a>. But  that’s a topic for another day.</p>

<h2>Animations</h2>

<p>Animations can be super useful to visualize complex concepts. Specially on the backend world where much of our work consists of translating the mental model we have of the system into code. Creating visual cues, like animations, helps us communicate our intent in an unambiguous way.</p>

<p>Don’t believe me? Try explaining how the <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/index.html">different kinds of Kotlin channels</a> behave using just words. Then check this animation:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-04-18/Channels.gif" width="600" title="‘Channels animation’" ></p>

<p>You can create simple animations like this one 👆 on <strong><a href="https://www.apple.com/keynote/">Keynote</a></strong>. Using <em>Magic move</em> and playing around with the order you can create all kind of choreographed animations. When you’re satisfied with the result, <a href="https://support.apple.com/kb/PH28038?locale=en_US&amp;viewlocale=en_US">you can export your creation as a gif</a> and share it with the world.</p>

<h2>UI Mocks</h2>

<p>If you ever worked with non-tech people you know the importance of showing something. Just telling them about what a system will do or how it would look it’s not enough. They have to see it 👀. That’s why low-res mockups are so powerful. You can use a tool like <a href="https://balsamiq.com/">Balsamiq</a> to create something like this in minutes. And you can even make them interactive to show how different screens would connect to each other.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/balsamiq.png" width="600" title="‘balsamic example’" ></p>

<p>Whimsical also has wire-framing capabilities:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/whimsical-wireframe.png" title="‘Whimsical wireframe’" ></p>

<p>If you’re looking for something more high-res checkout <a href="https://www.invisionapp.com">InVision</a>, that’s what all the cool kids are using this days.</p>

<h2>Logos, banners and more</h2>

<p><strong><a href="https://www.canva.com">Canva</a></strong> is probably the <strong>best design tools for non-designers</strong> you’ll find online, hands down.  I’ve used it for all kind of things. I’ve used it to create logos:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/Kassette.png" width="250" title="‘Logo created in Canva’" ></p>

<p>Presentations:</p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/"><img class="left" src="http://jivimberg.github.io/images/posts/2019-06-18/Stability.jpg" width="225" title="'Stability'" > </a></p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/"><img class="left" src="http://jivimberg.github.io/images/posts/2019-06-18/MinimizeAccessibility.jpg" width="225" title="'Minimize Accessibility'" >  </a></p>

<p><a href="https://jivimberg.io/blog/2014/10/12/notes-on-api-design/"><img src="http://jivimberg.github.io/images/posts/2019-06-18/ImplVsInterface.jpg" width="225" title="'Implementation Vs Interface'" > </a></p>

<p>My resume:</p>

<p><a href="https://drive.google.com/file/d/12FKryxTfewr_QtvQtTDMJf-NwmuySY2k/view"><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/resume-1.png" width="500" title="‘My Resume’" ></a></p>

<p>Banners for <a href="https://play.google.com/store/apps/details?id=com.eightblocksaway.android.practicepronunciation&amp;hl=en_US">an Android app I wrote</a>:</p>

<p><a href="https://play.google.com/store/apps/details?id=com.eightblocksaway.android.practicepronunciation&amp;hl=en_US"><img class="center" src="http://jivimberg.github.io/images/posts/2019-06-18/PracticePronunciation.png" width="400" title="‘Practice pronunciation banner’" ></a></p>

<p>And much, much more… Seriously, if you’ve never used it just go and check it out because it’s amazing, and super simple to use.</p>

<h2>Icons</h2>

<p>Check out the <a href="https://romannurik.github.io/AndroidAssetStudio/icons-generic.html">Icon generator</a>, part of the <a href="https://romannurik.github.io/AndroidAssetStudio/index.html">Android Asset Studio</a> tools put together by <a href="https://roman.nurik.net/">@Romanurik</a>. Specially if you’re doing something on Android.</p>

<h2>Bonus tips</h2>

<p><strong>Tip 1:</strong> Searching Google Images for some fancy image to drop into your diagram? Add <code>filetype:png</code> to your search to filter for PNG images. Also, make use the search tools to filter by color, size and license type!</p>

<p><strong>Tip 2:</strong> <strong><code>⌘ + Shift + 5</code></strong>. Screenshot everything. Screenshot your code in the IDE, screenshot multiple frames from a video and turn it into a gif, screenshot your drawings when the app you’re using doesn’t export to image (<a href="https://answers.microsoft.com/en-us/office/forum/office_2013_release-onenote/how-do-i-export-a-onenote-2013-page-as-an-image/825a08e3-f6c4-4d14-9e3e-c1ec54eb7b99?auth=1">I’m looking at you OneNote</a>). For example, for this post I wanted to create the photo border effect on my picture up there 👆. I knew Keynote had such effect but it’s not meant for image editing. So what did I do? I created a new slide with white background, drop my image, added the desired effect, <em>⌘ + Shift + 5 </em>, and voila! I know it’s hacky, but it gets the work done!</p>

<p><strong>Tip 3:</strong> Befriend graphic designers. Ask them what tools they use. Watch them work. Take note on how they dress.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature2.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockk All the Things]]></title>
    <link href="http://jivimberg.github.io/blog/2019/05/09/mockk-features-rundown/"/>
    <updated>2019-05-09T07:57:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2019/05/09/mockk-features-rundown</id>
    <content type="html"><![CDATA[<p>Over the last few years Mockk has been gaining ground as the go-to mocking library in KotlinWorld ™. Just recently, it was listed as <em>“adopt”</em> in the <a href="https://www.thoughtworks.com/radar/languages-and-frameworks/mockk">ThoughtWorks technology Radar</a>. Want to know what all the fuss is about?</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-05-18/mockkAllTheThings.gif" title="‘Channels animation’" ></p>

<h2>Regular mocking</h2>

<p>Let’s start with the basics. You can <em>mock</em>, <em>spy</em> and <em>verify</em> using this <a href="https://mockk.io/#dsl-tables">cute little DSL</a></p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
import io.mockk.every
import io.mockk.mockk
import io.mockk.spyk
import io.mockk.verify
import org.junit.jupiter.api.Test

class ClockTest {

//sampleStart
    @Test
    fun `regular mock`() {
        val clock = mockk<Clock>()
        every { clock.currentTime() } returns "7:20"
    
        clock.currentTime()
    
        verify { clock.currentTime() }
    }
    
    @Test
    fun `regular spy`() {
        val clock = spyk<Clock>()
    
        clock.currentTime()
    
        verify { clock.currentTime() }
    }
    //sampleEnd
}
</xmp>


<h2>Mocks with behavior</h2>

<p>No need to settle for just one fixed return value. You can add complex behavior to your mocks like this:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mock with complex behavior`() {
        val clock = mockk<Clock>()
        every { clock.currentTime() } answers { dateFormat.format(Calendar.getInstance()) }
    
        // ...
    }
    
    companion object {
        val dateFormat = SimpleDateFormat("HH:mm")
    }
    //sampleEnd
}
</xmp>


<p>There are a bunch of utility functions and properties you can use inside the <code>answers</code> lambda to do things like calculate the response based on the function arguments. Full list <a href="http://mockk.io/#answer-scope">here</a>.</p>

<h2>Mock chained calls</h2>

<p>You can easily mock a chain of calls</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking chained calls`() {
        val oven = mockk<Oven>()
        every { oven.clock.currentTime() } returns "7:20"
    
        //...
    }
    //sampleEnd
}
</xmp>


<h2>Mock hierarchies</h2>

<p>You can achieve the same result using hierarchical mocking</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `hierarchical mocking`() {
        val oven = mockk<Oven>()
        every { oven.clock } returns mockk {
            every { currentTime() } returns "7:20"
        }
    
        //...
    }
    //sampleEnd
}
</xmp>


<p>This is especially useful when mocking complex structures and to return collections of mocking objects, like in <a href="https://mockk.io/#hierarchical-mocking">this example</a>.</p>

<h2>Mock objects</h2>

<p>You can mock Objects as easily as you mock regular classes</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `object mocking`() {
        mockkObject(UrlHelper)
        every { UrlHelper.getBaseUrl() } returns URL("http://mockUrl.com")
    
        //...
    }
    //sampleEnd
}
</xmp>


<h2>Mock Unit</h2>

<p>You can mock functions that return <code>Unit</code> using <code>just Runs</code></p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking functions that return Unit`() {
        val clock = mockk<Clock>()
        every { clock.changeBatteries() } just Runs
    
        //...
    }
    //sampleEnd
}
</xmp>


<h2>Mock Nothing</h2>

<p>Or functions that return Nothing. In which case you have to throw an exception as behavior (because a function that returns <code>Nothing</code> <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-nothing.html">never returns</a> and can only end by throwing an exception, remember?)</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking functions that return Nothing`() {
        val clock = mockk<Clock>()
        every { clock.runForever() } throws Exception("called runForever")
    
        //...
    }
    //sampleEnd
}
</xmp>


<h2>Mock extensions functions</h2>

<p>You can mock extensions functions as well:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking functions extension functions`() {
        with(mockk<Clock>()) {
            every { Duration.ofMinutes(5).startTimer() } returns true
    
            //...
        }
    }
    //sampleEnd
}
</xmp>


<p>This works If the extension functions is defined on a class or an object. If it’s defined as a top level function instead, you can still mock it by following the advise in the next point 👇</p>

<h2>Mocking top level functions</h2>

<p>Got a top level function to mock? We’ve got you covered.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
   class ClockTest {
   //sampleStart
    @Test
    fun `mocking top level functions`() {
        mockkStatic("mockk.ModelsKt")
        every { resolve(any()) } returns URL("http://mockk.com/users/1")
    
        //...
    }
    //sampleEnd
}
</xmp>


<p>Ok, you might need to check your classes to know exactly what to use as argument for <code>mockkStatic</code>, but it’s no big deal.</p>

<h2>Mock private functions</h2>

<p>Yep, you can mock private functions by name.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking private functions`() {
        val oven = mockk<Oven>()
        every { oven["lockDoor"]() } returns true
        
        //...
    }
    //sampleEnd
}
</xmp>


<p>You can even verify calls to private function by using <code>recordPrivateCalls = true</code></p>

<h2>Mock varargs</h2>

<p>There’s also support for mocking functions that use varargs:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class VarargsTest {
    //sampleStart
    interface Calculator {
        fun sumEverything(vararg num: Int): Int
    }

    @Test
    fun `mocking varargs`() {
        val calculator = mockk<Calculator>()
        every { calculator.sumEverything(1, 2, 4) } returns 7

        //...

        every { calculator.sumEverything(1, *anyIntVararg(), 4) } returns 12

        //...

        every { calculator.sumEverything(1, *varargAllInt { it < 5 }) } returns 10

        //...
    }
    //sampleEnd
}
</xmp>


<p>And it’s not only the basics either. As you can see in the example you can do all kind of complex matchings.</p>

<h2>Mock constructor</h2>

<p>You can mock constructors. Useful for those times when you don’t actually control the object creation, but want to still be able to mock it.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking constructor`() {
        mockkConstructor(Clock::class)

        every { anyConstructed<Clock>().currentTime() } returns "7:40"

        assertEquals("7:40", Clock().currentTime())
    }
    //sampleEnd
}
</xmp>


<h2>Mock coroutines</h2>

<p>If you’re working with coroutines and want to mock a suspending function you simply use <code>coEvery</code>. In this example <code>startTimer</code> is a suspending function:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
class ClockTest {
    //sampleStart
    @Test
    fun `mocking suspending functions`() {
        val clock = mockk<Clock>()
        coEvery { clock.startTimer() } returns RUNNING

        // ...
    }
    //sampleEnd
}
</xmp>


<p>Along with <code>coEvery</code> there’s a whole family of <code>co...</code> functions (<code>coAnswers</code>, <code>coVerify</code>, <code>coAssert</code>, etc.) for working with coroutines.</p>

<hr />

<p>This is by no means a comprehensive guide. My intention was just to showcase same of the things that Mockk can do for you. For an in-depth introduction I recommend checking the <a href="https://blog.kotlin-academy.com/search?q=mockk"><em>“Mocking is not rocket science”</em> series in Kotlin Academy</a>.</p>

<p> <img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature10.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Kinds of Channels in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2019/04/18/different-kinds-of-channels-in-kotlin/"/>
    <updated>2019-04-18T07:59:14-07:00</updated>
    <id>http://jivimberg.github.io/blog/2019/04/18/different-kinds-of-channels-in-kotlin</id>
    <content type="html"><![CDATA[<p>Overview of the different kinds of Kotlin channels and their behaviors.</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-04-18/Channels.gif" width="600" title="‘Channels animation’" ></p>

<h2>Rendezvous</h2>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2019-04-18/baton.jpg" width="250" title="‘Passing the baton’" ></p>

<p>In Rendezvous channels capacity is 0. Which means the channel has no buffer at all. Elements are transferred only when sender and receiver meet. Which is literally what <em>Rendezvous</em> means. I like to picture it as a <a href="https://en.wikipedia.org/wiki/Relay_race">relay race</a> where the runners need to meet at one point to pass the baton.</p>

<p>In technical terms this means that <code>send</code> <em>suspends</em> until another coroutine invokes <code>receive</code>, and <code>receive</code> <em>suspends</em> until another coroutine invokes <code>send</code>.</p>

<h2>Buffered</h2>

<p>Buffered channels have a positive capacity but are not <code>Unlimited</code>. Calling <code>send</code> <em>suspends</em> only if the buffer is full. And calling <code>receive</code> <em>suspends</em> only if buffer is empty (i.e. there are no more messages in the channel).</p>

<h2>Unlimited</h2>

<p>You guessed it. Unlimited buffer. Sender will never <em>suspend</em> on <code>send</code>.</p>

<p>But there’s no such thing as <em>Unlimited</em>, right? The implementation uses a linked-list buffer so your only constraint is memory.</p>

<h2>Conflated</h2>

<p>This is the oddball. The sender never <em>suspends</em>, but the channel offers at most one element at any given time. When a new element comes, the previous element in the channel (if any) is discarded. The receiver only gets the most recent element sent. Previous elements are lost.</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature7.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQS Consumer Using Kotlin Coroutines]]></title>
    <link href="http://jivimberg.github.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines/"/>
    <updated>2019-02-23T16:52:48-03:00</updated>
    <id>http://jivimberg.github.io/blog/2019/02/23/sqs-consumer-using-kotlin-coroutines</id>
    <content type="html"><![CDATA[<p>Today we’ll see how to write a SQS consumer that processes messages in a parallel, non-blocking way, using Kotlin coroutines.</p>

<!--more-->


<h2>The pool of workers pattern</h2>

<p>After some experimentation I’ve opted for using a <em>pool of workers</em> for writing the consumer. For an introduction on the pattern and how to implement it in Kotlin I strongly suggested watching Roman’s talk from 2018 Kotlin Conf.</p>

<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/a3agLJQ6vt8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>


<p>For our particular solution we’ll need:</p>

<ol>
<li>One coroutine that periodically retrieves the messages (<strong>MsgReceiver</strong>).</li>
<li>Multiple <strong>workers</strong> that process the receiving messages in parallel without blocking.</li>
<li>A <strong>channel</strong> to communicate between the <em>MsgReceiver</em> coroutine and the <em>Workers</em>.</li>
</ol>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-03-10/consumerDiagram.png" width="800" title="‘SQS consumer diagram’" ></p>

<h3><em>fun start()</em></h3>

<p>Let’s start by creating the elements we mentioned in the previous section. We’ll do this in the <code>start()</code> method.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
fun start() = launch {
        val messageChannel = Channel<Message>()
        repeat(N_WORKERS) { launchWorker(messageChannel) }
        launchMsgReceiver(messageChannel)
    }
</xmp>


<p>This function launches a coroutine that creates: the channel, <em>N</em> <em>workers</em> and the <em>MsgReceiver</em>.</p>

<p>Don’t worry too much about how we’re able to call <code>launch</code> here. I’ll go back to this later.</p>

<h3>Message receiver</h3>

<p>Now it’s time to write the code for the message receiver:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private fun CoroutineScope.launchMsgReceiver(channel: SendChannel<Message>) = launch {
        repeatUntilCancelled {
            val receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(SQS_URL)
                    .waitTimeSeconds(20)
                    .maxNumberOfMessages(10)
                    .build()
    
            val messages = sqs.receiveMessage(receiveRequest).await().messages()
            println("${Thread.currentThread().name} Retrieved ${messages.size} messages")
    
            messages.forEach {
                channel.send(it)
            }
        }
    }
</xmp>


<p>This function takes a <code>SendChannel</code> that it’ll use to communicate with the <em>worker</em> coroutines.</p>

<p>It is written as a <code>CoroutineScope</code> to denote that it creates a new coroutine and does not wait for it to complete.</p>

<p>Next thing you’ll notice is that all the code is wrapped with a <code>repeatUntilCancelled</code>. This is a helper function that will repeat our block infinitely, and make sure it keeps running even in the face of exceptions. It will only stop when the coroutine is cancelled. We’ll use this little trick on our <em>Worker</em> code too. Here’s the code, courtesy of <a href="https://twitter.com/_fletchr">@_fletchr</a>:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
import kotlinx.coroutines.CancellationException
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.isActive
import kotlinx.coroutines.yield
import java.lang.Thread.currentThread

//sampleStart
suspend fun CoroutineScope.repeatUntilCancelled(block: suspend () -> Unit) {
    while (isActive) {
        try {
            block()
            yield()
        } catch (ex: CancellationException) {
            println("coroutine on ${currentThread().name} cancelled")
        } catch (ex: Exception) {
            println("${currentThread().name} failed with {$ex}. Retrying...")
            ex.printStackTrace()
        }
    }
    
    println("coroutine on ${currentThread().name} exiting")
}
//sampleEnd
</xmp>


<p>We have while loop on the <code>isActive</code> property from the CoroutineScope that will guarantee we keep repeating the block until the coroutine is no longer active (i.e. it has been cancelled). We have access to this property because <code>repeatUntilCancelled</code> is an extension function on CoroutineScope.</p>

<p>Having the <em>try/catch</em> guarantees the coroutine will keep looping even if the block throws an exception (like a connection timeout reading messages from the queue, for example). <code>CancellationException</code> is the exception used by the coroutines machinery to signal the cancellation of the coroutine. We handle it as a special case because we don&rsquo;t want to print a message saying <em>&ldquo;Retrying&hellip;&rdquo;</em>, because the while loop is about to break.</p>

<p>The call to <code>yield()</code> is needed to avoid the case where all threads are busy with CPU intensive coroutines that do not suspend, and thus there&rsquo;s no chance for other coroutines to execute.</p>

<p>Ok, back to our <code>launchMsgReceiver</code> function!  The next part is the actual polling for messages. You’ll notice that I’m maxing out the <code>waitTimeSeconds</code>  so the call waits up to <em>20 seconds</em>, for at least one message to be available before returning empty. I’m also picking the biggest value for the number of messages being retrieved at once (10), because the whole point of my consumer is to be able to process as many of them in parallel, as possible.</p>

<p>Next line is the <code>receiveMessage</code> call on the SQS client. One extremely important detail is that <strong>I’m using the <code>SqsAsyncClient</code> from <a href="https://github.com/aws/aws-sdk-java-v2">AWS Java SDK v2</a></strong>. Why? Because I don’t want my thread to be blocked waiting for messages to appear. And the <code>SqsAsyncClient</code> of Java SKD v1 returns only a <code>Future</code> (because it needs to be compatible with Java 1.6) making it harder to integrate with the coroutines world. Instead, the new version returns <code>CompletableFuture</code>, which lets us call <code>await()</code> (from <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-jdk8/">Kotlinx Coroutines JDK8</a>) to suspend our coroutine until the result is ready <strong>without blocking the thread</strong>.</p>

<p>Finally we iterate over the messages and send them through the channel using  <code>channel.send(it)</code> . Because of the way <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html">unbuffered channels</a> work the <code>send</code> call will suspend if there is no worker available to receive the message. This is a very nice property because it means <strong>we get <a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7"><em>backpressure</em></a> for free</strong>. If at some point our workers are not able to process the messages fast enough, the <em>MsgReceiver</em> will just wait (suspend) until some worker becomes available, instead of fetching even more messages, drowning the workers.</p>

<h3>Worker</h3>

<p>Now let’s take a look at the worker that will process the messages:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
 private fun CoroutineScope.launchWorker(channel: ReceiveChannel<Message>) = launch {
        repeatUntilCancelled {
            for (msg in channel) {
                try {
                    processMsg(msg)
                    deleteMessage(msg)
                } catch (ex: Exception) {
                    println("${Thread.currentThread().name} exception trying to process message ${msg.body()}")
                    ex.printStackTrace()
                    changeVisibility(msg)
                }
            }
        }
    }
</xmp>


<p>The first lines are pretty similar to the <em>MsgReceiver</em>. We’re again launching a coroutine and not waiting for it to complete, and thus we have the <code>launch</code> call and our function is an extension of <code>CoroutineScope</code>. We’re also wrapping everything in a <code>repeatUntilCancelled</code> for the same reasons we used it before. The only difference you might notice is that it takes a <code>ReceiveChannel</code> instead of <code>SendChannel</code>, because this is the receiving end of the communication.</p>

<p>Next we use a <code>for</code> loop to consume messages from the channel. It will suspend the coroutine if there are no new messages in the channel. The use of <code>for</code> is important because we’re doing <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html#fan-out">fan-out</a>, we have multiple coroutines consuming from the same channel. Consuming with <code>for</code> guarantees us that if one coroutine fails it won’t cancel the underlying channel, which is what would happen if we had used <code>consumeEach</code> to go through the messages, instead.</p>

<p>Also channels have the nice property of <a href="https://kotlinlang.org/docs/reference/coroutines/channels.html#channels-are-fair">being fair</a>. Meaning that the first coroutine that invoke <code>receive</code> gets the message. FIFO style.</p>

<p>If something fails while processing the message we (try to) <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">change the visibility timeout</a> so that the message will show up in the queue again sooner, and picked up for re-processing.</p>

<p>Let’s now take a look at <em>processMessage(msg)</em> implementation:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun processMsg(message: Message) {
        println("${Thread.currentThread().name} Started processing message: ${message.body()}")
        delay((1000L..2000L).random())
        println("${Thread.currentThread().name} Finished processing of message: ${message.body()}")
    }
</xmp>


<p>As you can tell, this is a mock implementation. There’s nothing interesting happening here. We just <code>delay</code> for a few seconds and then continue saying that message has been processed. This is where you’d put your actual logic. Or better yet, if you plan to reuse your SQS consumer implementation <strong>you might want to turn this into a Lambda expression that can be passed as a parameter</strong>.</p>

<p>Finally let’s see <em>deleteMsg(msg)</em> and <em>changeVisibility(msg)</em>:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun deleteMessage(message: Message) {
        sqs.deleteMessage { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
        }.await()
        println("${Thread.currentThread().name} Message deleted: ${message.body()}")
    }
    
    private suspend fun changeVisibility(message: Message) {
        sqs.changeMessageVisibility { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
            req.visibilityTimeout(10)
        }.await()
        println("${Thread.currentThread().name} Changed visibility of message: ${message.body()}")
    }
</xmp>


<p>This 2 methods follow the same pattern: call the <code>SQSAsyncClient</code> corresponding method then <code>await()</code>, finally log.</p>

<h3>Contexts, dispatchers and supervisors</h3>

<p>Now that we have a good grasp on the different parts of our solution, let’s pay closer attention to how the coroutines are created and dispatched.</p>

<p>One of the central tenets of Kotlin coroutines is <em><a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#structured-concurrency">structured concurrency</a></em>. <em>Structured concurrency</em> helps us write code that properly cleans up active coroutines in case of exceptions. If you think you’re a hardcore developer and instead launch your coroutines using <code>GlobalScope.launch { ... }</code>, then you risk leaking coroutines when something fails (check <a href="https://twitter.com/relizarov">@relizarov</a>’s <a href="https://medium.com/@elizarov/structured-concurrency-722d765aa952">article</a> to see an example of this). So, how’s are our coroutines structured?</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-03-10/coroutinesScope.png" width="400" title="‘coroutines structure’" ></p>

<p>To mark the lifecycle of our coroutines we extend our class with <code>CoroutineScope</code> and provide a context by overriding <code>corroutinesContext: CorroutineContext</code>. This is the context that’ll be used by our root coroutine, the one started by the <code>launch</code> call on the <code>start()</code> function, at the beginning of this post. Since we want our coroutines to match the lifecycle of our class we’ve added a <code>close()</code> method that clients can call to cancel all the coroutines in the consumer. If you’re using some kind of framework you might want to tie this function the lifecycle of the class in some other way.</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
package com.jivimberg.sqs

import kotlinx.coroutines.\*
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.channels.ReceiveChannel
import kotlinx.coroutines.channels.SendChannel
import kotlinx.coroutines.future.await
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.sqs.SqsAsyncClient
import software.amazon.awssdk.services.sqs.model.Message
import software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest
import kotlin.coroutines.CoroutineContext

//sampleStart

class SqsSampleConsumerChannels(
        private val sqs: SqsAsyncClient
) : CoroutineScope {

    private val supervisorJob = SupervisorJob()
    override val coroutineContext: CoroutineContext
        get() = Dispatchers.IO + supervisorJob
    
    fun start() = launch {
        val messageChannel = Channel<Message>()
        repeat(N_WORKERS) { launchWorker(messageChannel) }
        launchMsgReceiver(messageChannel)
    }
    
    fun stop() {
        supervisorJob.cancel()
    }

//sampleEnd

    private fun CoroutineScope.launchMsgReceiver(channel: SendChannel<Message>) = launch {
        repeatUntilCancelled {
            val receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(SQS_URL)
                    .waitTimeSeconds(20)
                    .maxNumberOfMessages(10)
                    .build()
    
            val messages = sqs.receiveMessage(receiveRequest).await().messages()
            println("${Thread.currentThread().name} Retrieved ${messages.size} messages")
    
            messages.forEach {
                channel.send(it)
            }
        }
    }
    
    private fun CoroutineScope.launchWorker(channel: ReceiveChannel<Message>) = launch {
        repeatUntilCancelled {
            for (msg in channel) {
                try {
                    processMsg(msg)
                    deleteMessage(msg)
                } catch (ex: Exception) {
                    println("${Thread.currentThread().name} exception trying to process message ${msg.body()}")
                    ex.printStackTrace()
                    changeVisibility(msg)
                }
            }
        }
    }
    
    private suspend fun processMsg(message: Message) {
        println("${Thread.currentThread().name} Started processing message: ${message.body()}")
        delay((1000L..2000L).random())
        println("${Thread.currentThread().name} Finished processing of message: ${message.body()}")
    }
    
    private suspend fun deleteMessage(message: Message) {
        sqs.deleteMessage { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
        }.await()
        println("${Thread.currentThread().name} Message deleted: ${message.body()}")
    }
    
    private suspend fun changeVisibility(message: Message) {
        sqs.changeMessageVisibility { req ->
            req.queueUrl(SQS_URL)
            req.receiptHandle(message.receiptHandle())
            req.visibilityTimeout(10)
        }.await()
        println("${Thread.currentThread().name} Changed visibility of message: ${message.body()}")
    }
}

fun main() = runBlocking {
    println("${Thread.currentThread().name} Starting program")
    val sqs = SqsAsyncClient.builder()
            .region(Region.US_EAST_1)
            .build()
    val consumer = SqsSampleConsumerChannels(sqs)
    consumer.start()
    delay(30000)
    consumer.stop()
}

private const val N\_WORKERS = 4
</xmp>


<p>Our <code>coroutineContext</code> has 2 elements: the <code>Dispatcher</code> and the <code>supervisorJob</code> (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/-coroutine-context/plus.html">the <code>+</code> operation</a> concatenates both elements in a new <code>CoroutineContext</code> ).</p>

<p>The <em>Dispatcher</em> marks which thread our coroutine will run on. In our case I used <code>Dispatchers.IO</code> that uses a shared pool of threads for doing IO (more details <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html">here</a>). This is because most of the time my coroutines are doing IO operations for: receiving messages, deleting them, changing visibility, etc. If, in your case, processing a message requires a CPU intensive calculation you’d use <code>Dispatchers.Default</code> through the <code>withContext</code> function like this:</p>

<xmp class="kotlin-code" data-highlight-only theme="darcula">
private suspend fun processMsg(message: Message) = withContext(Dispatchers.Default) {
        // Your code here
    }
</xmp>


<h2>In case of exception</h2>

<p>Because we’re responsible developers, let’s see what would happen if something were to fail.</p>

<p>As a first line of defense we know both our <em>Workers</em> and the <em>MsgReceiver</em> are running in <code>repeatUntilCancelled</code> loops, so any exception should be logged and ignored. This is ok for us because once the visibility timeout is over, the message will re-appear in the queue for another worker to consume. Still, to be extra careful, let’s consider what would happen with our coroutines in case of exception if we didn’t have <code>repeatUntilCancelled</code>s.</p>

<p>The whole premise of <a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#structured-concurrency">structured concurrency</a> is to avoid leaking coroutines in case of failure. That’s why, by default, <strong>whenever a child coroutine terminates with exception its parent and siblings are cancelled too</strong>. This is a nice property, but not quite what we want in this case. We don’t want all workers to be cancelled because one worker threw an exception. That’s why we use <code>supervisorJob</code> as part of our <code>coroutineContext</code>. <a href="https://kotlinlang.org/docs/reference/coroutines/exception-handling.html#supervision-job">SupervisorJob</a> is like a regular job, with the exception that cancellation is propagated only downwards.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-03-10/Supervisor.png" width="600" title="‘Regular Job vs. Supervisor Job’" ></p>

<p>Finally, don’t forget to configure a <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">dead letter queue</a> for those messages that can’t be processed even after multiple retries.</p>

<hr />

<p>That’s all! You can find all the code from this post in <a href="https://gist.github.com/jivimberg/b0f4f94871c6f3e7d17fae1106c28047">this gist</a>. If you have any improvement to suggest, I’d ❤️ to hear about it. Leave me a comment down there.</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature11.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice at a Glance]]></title>
    <link href="http://jivimberg.github.io/blog/2019/02/08/guice-at-a-glance/"/>
    <updated>2019-02-08T15:12:32-08:00</updated>
    <id>http://jivimberg.github.io/blog/2019/02/08/guice-at-a-glance</id>
    <content type="html"><![CDATA[<p>A visual overview of <a href="https://github.com/google/guice">Google’s Guice</a> model.</p>

<!--more-->


<p>A couple of weeks ago I started learning Guice. This cheat-sheet is a visual guide of how the different pieces that conform the framework fit together. I created it in the hope it helps beginners (like me) build a <a href="https://en.wikipedia.org/wiki/Mental_model">mental model</a> of how the framework works.</p>

<p><a href="http://jivimberg.github.io/images/posts/2019-02-08/guice.png"><img class="center" src="http://jivimberg.github.io/images/posts/2019-02-08/guice.png" width="800" title="‘Guice cheat-sheet’" ></a></p>

<p><a href="http://jivimberg.github.io/images/posts/2019-02-08/guice.png"><em>(click for full size image)</em></a></p>

<p>If you want to learn more about how <a href="https://github.com/google/guice">Guice</a> works head to their <a href="https://github.com/google/guice/wiki">oficial documentation</a>.</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature2.png" width="200" title="‘My signature’" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Prepare for the Silicon Valley Interview - Part 3]]></title>
    <link href="http://jivimberg.github.io/blog/2019/01/23/how-to-prepare-for-the-silicon-valley-interview-part-3/"/>
    <updated>2019-01-23T20:07:04-08:00</updated>
    <id>http://jivimberg.github.io/blog/2019/01/23/how-to-prepare-for-the-silicon-valley-interview-part-3</id>
    <content type="html"><![CDATA[<p>This is the third and final post of the <a href="https://jivimberg.io/blog/categories/interview-series/">Interviewing in Silicon Valley series</a>. In this last piece I talk about how to make the most of your on-site, how to handle rejection and how to compare competing offers.</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-23/interviewProcess3.png" width="750" title="‘The on-site routine’" ></p>

<h1>Low-risk interviews</h1>

<p>I have to confess; at first I was terrified about doing interviews. It had been almost 5 years since the last time I was interviewed back in Argentina. Fortunately, my friend <a href="https://www.lucasapa.com/">Luketua</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> was there to give me a great piece of advice: <em>”just commit to one and do it, what do you have to loose?”</em>. And it worked!  I discovered that <strong>one of the fastest ways of overcoming fear is facing it head on</strong> (the second ride on a rollercoaster is not as scary as the first one, right?).</p>

<p>So, take that first step! Pick a company you find interesting, but <em>it&rsquo;s not your first choice</em> and schedule an interview. Even if you completely screw it up, you will at least have the experience of having gone through it, so the next time won&rsquo;t be as bad. As a bonus, you’ll get a sense of which topics you need to focus your practice on. Just close your eyes and take the leap, you&rsquo;ve got nothing to lose.</p>

<h1>Scheduling the on-sites</h1>

<p>On-sites take time, they last from 4 to 6 hours. And you end up exhausted after one so forget about catching up on any work you were supposed to be doing in that time. That’s why, more often than not, you’ll need to get the day off (or at least half-day off) for the on-site.</p>

<p>You’ll want to schedule your <em>“first-choice”</em> round of on-sites close in time for 3 reason:</p>

<ol>
<li>You have a hard deadline for when to finish your practice.</li>
<li>You might get rejected in some of your options. Having to start the process from the beginning in another company by then could mean waiting a whole month until the next on-site.</li>
<li>Having competing offers will help you in the compensation negotiations.</li>
</ol>


<p>I’ve heard some people schedule all the on-sites for one week and then take the whole week off. I didn’t do it this way but it sounds like a solid approach. Specially if you know that the process timeline is similar in all the companies you’re interviewing for.</p>

<p>Final piece of advice:  In my experience, it’s better to be transparent with the recruiters and let them know you’re interviewing for other roles. They can help you accommodate your schedule and manage the hiring manager expectations.</p>

<h1>The on-site routine</h1>

<p>The day of the on-site you’ll probably have a lot on your mind, so it’s better if you just follow the same simple routine. This is what I came up with after many on-sites:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-23/on-siteRoutine.png" width="750" title="‘The on-site routine’" ></p>

<p>Mindfulness is something I’ve just recently discovered. I was introduced to it through the book <a href="https://www.amazon.com/Waking-Up-Spirituality-Without-Religion/dp/1451636024">Waking Up</a> and have started practicing meditation using the <a href="https://www.headspace.com/">Headspace</a> app. I usually did a <strong>15/20 minutes meditation before the on-site</strong> and found that it helped me relax before going in.</p>

<h1>Your perception is <strong>not</strong> predictive of performance</h1>

<p>This is something I heard first at this <a href="https://www.youtube.com/watch?v=8T7a09V1KZo">Silicon Valley Code Camp talk</a>. If you start to feel the interview is going south, don&rsquo;t panic! <strong>Just keep going.</strong> It might be that you were given a hard question, in which case you might not be expected to arrive at an optimal solution in the given time (and in any case, all other candidates will probably struggle through the same question). Or maybe you sense your interviewer is impatient or annoyed. Don&rsquo;t assume it&rsquo;s because of your performance, maybe he&rsquo;s having a bad day, or that&rsquo;s just his personality. The point is, <strong>you just don&rsquo;t know</strong>. Here it is in Gayle&rsquo;s own words (the whole talk is really worth it):</p>

<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/8T7a09V1KZo?start=3454" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>


<p>Of course, I learned this <em>the hard way</em>. On one of my on-sites I was struggling with an exercise that looked trivial to me. I ended up arriving at a solution with some help from the interviewer, only to give the wrong answer when asked about the time complexity. To make things worst I was not able to come up with any good improvements to my solution. I was sweating bullets and had to fight the urge of escaping from the interview. Imagine my surprise when, on my way home, I received an email saying that I made it to the next step of the process. <strong>Bottomline: You don&rsquo;t know how you&rsquo;re doing. Just keep going.</strong></p>

<h1>Interviews are a two-way street</h1>

<p>One of the best things I learned about interviews is this: <strong>interviews are a two-way street, you&rsquo;re evaluating the company as much as they&rsquo;re evaluating you</strong>. Interviews are your best chance to learn about <em>the company</em>, <em>the role</em>, <em>the culture</em> and <em>your future teammates</em>, so don&rsquo;t squander it!</p>

<p>By the end of the interview you’ll be ask if you have any questions. I <strong>always</strong> say yes, and follow with one of this:</p>

<ul>
<li>How do you prioritize tasks? How do you make decisions? How do you handle interruptions? (Ask about hot bugs, devops, CI/CD, etc.)</li>
<li>What do you like the most about working for this company?</li>
<li>What&rsquo;s one thing the team should improve on?</li>
<li>What&rsquo;s on the roadmap for the team?</li>
<li>What are some of the challenges I’ll be facing in this role?</li>
</ul>


<p>One more thing: don’t play it safe. <strong>If there&rsquo;s something that is a deal-breaker for your just be direct and ask about it</strong>. After all, you&rsquo;re better off knowing things in advance, and you give the interviewer a chance to clarify on the issue. For example I asked one company why they were using an <em>outdated stack</em> and another one about the recent articles regarding its <em>toxic culture</em>. As long as you&rsquo;re polite about it nobody is going to get pissed off. If anything it will show that you really care and you are comfortable speaking your mind.</p>

<h1>Rejections</h1>

<p>You will get rejected. Everyone is at some point. Rejections are just part of the interview process. If you&rsquo;re not being rejected, you&rsquo;re probably <em>not interviewing enough</em>.</p>

<p>The golden rule to handle rejections is: <strong>don&rsquo;t take it personally</strong>. Doing bad in an interview says little about your abilities as a software developer. Maybe there was a candidate that was a better fit. Maybe you had a bad day. Maybe you should practice more graph related questions. The first 2 you can do nothing about, but the third one you can. Which leads to the second rule of rejections:<strong>Always ask for feedback</strong>.  The best thing you can do is learn from your mistakes.</p>

<p>Once I was applying for this startup that made me do a take-home exercise. I spent the best part of my weekend working on it. First I <em>solved</em> the problem, then I <em>tested</em> the code, then I <em>refactored</em> everything nicely into easy to read functions, then I added some more tests and even <em>documented</em> them using <a href="http://stable.ascii-flow.appspot.com/#Draw">ASCII graphs</a> (for real). When I sent my submission on Sunday I was honestly hoping the company would be so impressed they would realize there was no need for an on-site. Two days later I got an email: <em>&ldquo;&hellip;we have decided to move forward with another candidate&hellip;&rdquo;</em> 😢. So, with my ego hurt, I decided to answer back asking what I did wrong, and they nicely enough responded back pointing out my mistakes. Turns out my code performance sucked! In an effort to make the code super readable I had utterly destroyed performance. Needless to say I never made the same mistake again.</p>

<h1>The follow-up</h1>

<p>The obvious thing to do after an interview is to follow-up with a thank you email. Now, <strong>the <em>smart</em> thing to do is to follow-up with questions</strong>. During the interview you&rsquo;ll get a glimpse of what the company is working on, you&rsquo;ll learn about what technologies they use, and how their systems are designed. Naturally, you&rsquo;ll have lots of questions that you didn&rsquo;t get to ask during the interview, either because of time constraints or because they didn&rsquo;t occur to you at the time (if you don’t, then <em>maybe you&rsquo;re not really that interested in what the company is doing</em>). Now is the time to ask! Make sure to include them in your follow-up email along with any other comment that comes to mind.</p>

<p><strong>Pro-tip:</strong> Use <a href="https://www.google.com/alerts">Google alerts</a> to set notifications for new content about the company, so you&rsquo;ll always know what they&rsquo;re up to. This way I learned that the CEO of one of the companies I was applying for, was a guest in a podcast and got to ask him about some of the topics he talked about afterward.</p>

<h1>The offer</h1>

<p>This is how an offer might be structured:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-23/compensation1.png" width="750" title="‘The on-site routine’" ></p>

<p>To compare competing offers you&rsquo;ll want to get the yearly compensation so:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-23/compensation2.png" width="750" title="‘The on-site routine’" ></p>

<p>If you want to be thorough (and you should be), you should also consider the <strong>vesting period</strong> (4 years with a one year cliff seems the most common) as well as financial benefits such as <strong>matching 401k</strong> and <strong>employee stock option plans</strong>.</p>

<p>Startup offers are trickier to evaluate because of the <em>risk factor</em> involved. If you&rsquo;re applying for a startup, and your offer includes equity I strongly suggest you read <a href="https://github.com/jlevy/og-equity-compensation">this guide</a> to learn how to understand and compare equity compensation.</p>

<p>Finally, there are a number of things you should consider, other than compensation, when evaluating an offer. I’d say that some of this things are equally or more important that compensation.</p>

<ul>
<li>Who are you going to be working with?</li>
<li>Do you find the problems challenging and exciting?</li>
<li>What kind of things you&rsquo;ll learn at this role?</li>
<li>What&rsquo;s the company&rsquo;s culture?</li>
<li>How is the company doing and what&rsquo;s its growth projection?</li>
<li>How this role will look on your resume?</li>
<li>How are the offices? And how long is the commute?</li>
<li>What kind of benefits and perks does the company offer?</li>
</ul>


<hr />

<h1>Bonus track: Advice potpourri</h1>

<p>Before you go a snack size list of random advice</p>

<ul>
<li><strong>Smile!</strong></li>
<li>Keep a playful attitude. Approach the interview as a game or challenge. Try to enjoy the process (I swear it’s possible, specially the times you’re killing it).</li>
<li>The interview is not over until the interviewer says so. Until then, keep solving, improving and testing your solution.</li>
<li>You don&rsquo;t have to answer how much you&rsquo;re making in your current job. In some states (CA included) <a href="https://www.businessinsider.com/places-where-salary-question-banned-us-2017-10">it&rsquo;s even illegal to ask</a>.</li>
<li><strong>Don&rsquo;t give up!</strong> Companies always let you re-apply after some time. I know a guy that got accepted at Google on his 4th attempt.</li>
</ul>


<hr />

<p>Ok, I guess that’s the end of the <a href="">Interviewing Series</a>. If you made it here you deserve a cookie 🍪. Hope you found something useful, and thanks for reading!</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature6.png" width="200" title="‘My signature’" ></p>

<p><em>Special thanks to: <a href="https://twitter.com/rcruzjo">@rcruzjo</a>, <a href="https://twitter.com/patriciob">@patriciob</a>, <a href="https://twitter.com/pgveiga">@pgveiga</a> and <a href="https://www.instagram.com/luketua">@luketua</a> for helping me edit and improve this series.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Check his blog: [Codex Transforma][3]<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Prepare for the Silicon Valley Interview - Part 2]]></title>
    <link href="http://jivimberg.github.io/blog/2019/01/10/how-to-prepare-for-the-silicon-valley-interview-part-2/"/>
    <updated>2019-01-10T22:42:31-08:00</updated>
    <id>http://jivimberg.github.io/blog/2019/01/10/how-to-prepare-for-the-silicon-valley-interview-part-2</id>
    <content type="html"><![CDATA[<p>Welcome to the second part of the <a href="https://jivimberg.io/blog/categories/interview-series/">Interviewing Series</a>! It’s time to cover the thing that terrifies most candidates<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>: <strong>the technical questions</strong>. We’ll see what different types of questions there are, and how we can prepare for them. We have a lot of ground to cover so let’s jump right into it.</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-10/processFocus2.png" width="750" title="‘Process timeline focus part 1’" ></p>

<h1>Programming questions</h1>

<p>Programming questions are the heart of the technical interview and thus what you’ll spend more time preparing.</p>

<p>Some people believe that <a href="https://www.stilldrinking.org/interviewing-is-broken"><em>the technical interview model is completely broken</em></a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. I don’t really know if technical interviews work or not, I just know that <strong>they&rsquo;re part of the game, so you&rsquo;d better prepare for it</strong>. Having said that, if you are really against <em>&ldquo;whiteboard interviews&rdquo;</em> <a href="https://github.com/poteto/hiring-without-whiteboards">check this list</a> of companies that don’t rely on these kind of questions. Just keep in mind that <em>you might be limiting your options</em>.</p>

<p>Regardless the type of interview, one thing is certain: you’re better off preparing for it in advance. So let’s start by talking about some of the resources I used to practice.</p>

<h2>Cracking the coding interview (6th edition)</h2>

<p>I’ve mentioned this book in <a href="https://jivimberg.io/blog/2019/01/06/how-to-prepare-for-the-silicon-valley-interview-part-1/">my previous article</a>. <a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850">Cracking the coding interview 6th edition</a> (CTCI from now onwards) by <em><a href="http://www.gayle.com/">Gayle Laakmann McDowell</a></em> is the <strong>holy bible of interviewing</strong>.</p>

<p><a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850"><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-10/ctci-cover.jpg" width="300" title="‘Cracking the coding interview 6th edition’" ></a></p>

<p>I like it because <strong>it’s remarkably complete</strong>. It includes a description of the different interview processes at some of the big companies (Apple, Google, Facebook, etc.), it provides tips on how to set up a good resume, it covers the basics on Big O notation and <em><a href="http://www.crackingthecodinginterview.com/contents.html">much, much more…</a></em></p>

<p>The technical exercises are organized by topic. Each chapter includes a <em>brief introduction</em> of the topic at hand (around 3 pages) and a <em>list of problems </em>sorted from easy to hard. This organization is nice because if you don’t have much time or don’t want to focus on a particular area you can simply skip that chapter altogether. I, for example, glossed over the <em>”Java”</em> and <em>”Databases”</em> chapters (Chapters 13 and 14 respectively) and skipped the <em>“C and C++”</em> chapter (Chapter 12).</p>

<p>One of the best things about this book is that <strong>each exercise comes with a series of hints in case you get stuck</strong>. I love this because it mimics what would happen in a real interview, where the interviewer nudges you in the right direction to unblock you. Also in some of the more complex problems <strong>the book presents multiple solutions and compares the different approaches</strong>. Again, something that would probably come up in a real interview.</p>

<p><strong>Pro-tip:</strong> If you live in the Bay Area your local library might have <a href="https://smcl.bibliocommons.com/item/show/2387102076">a copy of the CTCI</a>. Having said that, if you have the money this is one of the best investments you can make for your career.</p>

<h2>LeetCode</h2>

<p>The other thing I used to practice daily was <strong><a href="https://leetcode.com/">LeetCode</a></strong>. There are a number of sites you can use to practice (here’s a <a href="https://www.youtube.com/watch?v=J267bz_G7xE">video comparing the most well-known</a>); I went with LeetCode because it was <strong>explicitly designed for technical interviews</strong> and it has support for <a href="https://kotlinlang.org/">Kotlin</a>.</p>

<p>One thing I like about LeetCode is that it <em>provides tests results after submission</em> so you can figure out what you did wrong. Another useful feature is that it ranks your submission based on performance so you can see how well you did, compared to other solutions.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-10/leetcode-submission.png" width="750" title="‘Leetcode submission comparison’" ></p>

<p>Where it falls short is in the solution explanation. <strong>Only a small fraction of the problems have <a href="https://leetcode.com/articles/remove-duplicates-from-sorted-list/">official articles covering the solution</a> and the different alternative implementations.</strong> For the rest of them, you’ll have to resort to the discussion forum, in the hopes that somebody there posted his/her answer, and the code is readable.</p>

<p>I didn’t pay for the premium account and didn’t try the <em>System Design</em> questions, so can’t comment on that.</p>

<h2>Practice tips</h2>

<h3>Use a whiteboard</h3>

<p>You want your practice to be as close to the real thing as possible. That means you’ll have to resist the temptation of using your favorite IDE and go full whiteboard. It will be weird at first. Everything will take more time, you’ll run out of space and <em>end up using * and arrows all over the place to add extra variables</em>. But guess what? <strong>That&rsquo;s going to happen in the real interview too</strong>. So you&rsquo;d better get some practice on whiteboard coding before going in.</p>

<p>Don’t worry, nobody expects you to memorize all <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html">Java Collectors</a>. It’s OK to ask the interviewer for the details of a particular method signature.</p>

<p>Having no IDE also <strong>prevents you from writing automated tests for your problems</strong>. Which (<em>for once</em>) is a good thing! You won’t have the luxury of unit testing your code during the interview either. Having said that you should still THINK about the tests you’d write, and even <em>whiteboard-debug</em>  some of them (see below 👇).</p>

<h3>Build the habit</h3>

<p>Sometimes you’ll find it hard to sit down and practice. Here are some things that helped me:</p>

<ol>
<li><strong>Find a time of the day that works for you and stick to it</strong>. For example, I’m a morning person. I’d <em>wake up one hour earlier</em> each day and practice before breakfast.</li>
<li><strong>Avoid distractions</strong>. Apart from waking up before everyone else <em>I made sure my phone stayed in airplane mode</em> at least until I&rsquo;d finished one full problem.</li>
<li><strong>Prepare things beforehand</strong>. Before going to bed <em>I’d set things up so that everything was ready in the morning</em>. Waking up to a clean whiteboard, the computer charged and <a href="http://www.gayle.com/">CTCI</a> opened in the right page gives you <em>fewer chances to slack or make excuses</em>.</li>
<li><strong>Set yourself achievable goals</strong>. I found that not finishing my morning practice goal made me anxious during the day 😰. So I figured it was best to set realistic goals, so that <em>after completing the morning exercise I could feel good about myself for the rest of the day</em>.</li>
<li><strong>Know when to stop</strong>. Don’t get too caught up on one problem. If you get stuck, just drop it for the time being, or move to another exercise. <a href="https://twitter.com/SashaLaundy/status/936661004137635840"><em>”The best debugger ever made is a good night&rsquo;s sleep.”</em></a></li>
</ol>


<p>Problems might seem hard at first, but I promise that once you get the knack of it they’ll flow more easily. To the point where you can eyeball a problem and have a pretty good idea of how you’d solve it.</p>

<h2>While solving the exercise</h2>

<h3>CTCI Cheatsheet</h3>

<p>The best advice I could find on how to tackle a problem is from <a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850">Cracking the coding interview</a>. Luckily, they’ve put together this amazing cheat-sheet with a step by step guide:</p>

<p><a href="http://www.crackingthecodinginterview.com/resources.html"><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-10/ctci-cheatsheet-1.png" width="750" title="‘CTCI cheatsheet’" ></a></p>

<p><em>(It’s also a great example on how  <strong>NOT</strong> to lay out an ordered list of items)</em></p>

<h3>Talk through the problem</h3>

<p>The whole point of having you solve an exercise during an interview is to provide the chance for the interviewer to evaluate how you approach a problem. So the best thing you can do to help your interviewer&rsquo;s job is to <strong>speak through your thought process</strong>.</p>

<p>It&rsquo;ll probably feel odd at first because usually, this happens as an internal monologue in your head, so make sure you practice this even when you’re solving problems on your own.</p>

<p>On the real interview, start by listening to the problem carefully and <strong>asking clarifying questions</strong> (<em>does the input fit into memory?</em> <em>how often is this code going to be executed?</em> etc.). Then walk your interviewer through each of the steps you take to arrive at the solution. If you’re going to <em>start by trying an example</em> say it so, if you’re coming up with a <em>brute force solution first</em> make that explicit, if you think the code could be refactored to be more legible express it. You’ll get extra points for mentioning these things, and in some cases, you <em>might be told not to focus on that</em>, and you’ll benefit from not wasting your time in a detail that was not meaningful to the interviewer.</p>

<blockquote><p>It is ok to be in silence only when you’re thinking. The rest of the time you should be explaining what you’re doing. <strong>Especially while coding</strong>.</p></blockquote>

<h3>Problem checklist</h3>

<p>There are a number of things you should consider on every problem you face:</p>

<ul>
<li>Are you handling nulls properly?</li>
<li>Have you handled border cases? (empty collections, empty strings, negative integers, etc.)</li>
<li>Have you considered overflow on arithmetic operations?</li>
<li>Is the input sorted?</li>
<li>If it is a collection: can it have duplicates?</li>
<li>Does the input fit in memory?</li>
<li>Can a better solution be found or have you achieved the best possible runtime?</li>
<li>Can you trade space for time? (Think: HashMaps and <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>)</li>
<li>Can you pre-calculate something to speed things up?</li>
<li>Can you split the problem in smaller parts?</li>
<li>Is your solution thread safe? If not, how can you make it?</li>
<li>Is there any state you can save to make future runs faster?</li>
</ul>


<h3>Whiteboard debugging</h3>

<p>On <a href="http://www.crackingthecodinginterview.com/uploads/6/5/2/8/6528028/cracking_the_coding_skills_-_v6.pdf">CTCI cheat-sheet</a> step #7 is <em>Test</em>. What I like to do for testing my solutions is what I call <em>&ldquo;whiteboard-debugging&rdquo;</em>. This is how it goes:</p>

<ol>
<li>Choose a good input example to work with (not too big, not trivial, not a corner case, etc.).</li>
<li>Now <em>step through the code step by step</em> as if you were debugging it.</li>
<li>Use a color marker to <em>write down the variable values</em> as comments just like your IDE would do.</li>
</ol>


<p>It should look something like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-10/isPalindrome.png" width="600" title="‘Whiteboard debugging example’" ></p>

<p>For this technique to work the only trick is to <strong>suppress your instinct to jump ahead</strong>. With the interviewer watching you&rsquo;ll get anxious and will want to speed things up by skipping a <em>&ldquo;trivial loop&rdquo;</em> or just jumping to the result. DON&rsquo;T DO IT! Step through the code one line at a time just like the compiler would do. This is the only way you&rsquo;ll find 🐞 in your code.</p>

<p>And of course pay extra attention to hot spots like <em>arithmetic expressions</em>, <em>null nodes</em> and <em>loop conditions</em> (always check for off-by-one errors!).</p>

<h3>Stick to one language</h3>

<p>It&rsquo;s no secret that I&rsquo;m super hooked with <a href="https://kotlinlang.org/">Kotlin</a> (some of my friends would even say I&rsquo;m a fanboy), so I figured I&rsquo;d practice the programming questions in Kotlin too. The problem was that Kotlin is not that widespread (<a href="https://pusher.com/state-of-kotlin">yet</a>), so <strong>most of my interviews required me to write code in Java</strong>. Kotlin and Java are fairly similar languages and yet I noticed that writing solutions in Java was taking me longer because of small things like having to look up the exact method I wanted to use. In one of my on-sites, for example, I mixed up the Java <code>switch</code> syntax with Kotlin&rsquo;s <code>when</code>. And while this isn&rsquo;t a huge mistake, it did raise a valid flag for the interviewer.</p>

<p><strong>That&rsquo;s why my advice is to pick one mainstream language and stick with it for both: practice and interviews.</strong></p>

<h1>Open problems</h1>

<p>In my experience, open problems <em>are not that common</em>. When you&rsquo;re presented with one of these questions your main focus should be on clarifying the goal. <strong>Ask as many followup questions as you can and don&rsquo;t make any assumptions</strong> (or if you do validate them with the interviewer). <em>Don&rsquo;t just jump to the answer!</em> Usually, this kind of exercises are more about seeing how the candidate approaches the problem rather than getting an actual solution.</p>

<h1>Language trivia</h1>

<p>To my surprise, I <em>did</em> find a fair share of language trivia questions. Things like <a href="https://stackoverflow.com/questions/223918/iterating-through-a-collection-avoiding-concurrentmodificationexception-when-mo">removing an item while iterating a collection</a> or <a href="https://stackoverflow.com/questions/4818699/practical-uses-for-atomicinteger">when to use <code>AtomicInteger</code></a>.</p>

<p>As you can tell, these are knowledge-based questions, so either you know the answer or you don&rsquo;t. <strong>If you don&rsquo;t just be frank about it</strong>, trying to guess the answer might backfire and make you look like a fraud.</p>

<p>If you&rsquo;re proficient with the language you&rsquo;ll have no problems answering these kind questions. If you want some practice CTCI has one chapter on <em>Java</em> and another one on <em>C</em> and <em>C++</em>.</p>

<h1>System design questions</h1>

<blockquote><p>The system design interview is an <b>open-ended conversation</b>. You are expected to lead it.</p><footer><strong>The System Design Primer</strong></footer></blockquote>


<p>The best resource I know to prepare for the System Design interview is <a href="https://github.com/donnemartin/system-design-primer">The System Design Primer</a> (thanks <em>Pablius</em> for the tip!). Additionally, you should <strong>regularly read engineering blogs</strong> to learn how different challenges are solved in different companies. Some of the best ones are: <a href="https://medium.com/netflix-techblog">Netflix Tech Blog</a>, <a href="http://highscalability.com/">highscalability.com</a> and <a href="https://githubengineering.com/">Github engineering</a>. You can find a <a href="https://github.com/kilimchoi/engineering-blogs">full list of company blogs here</a>.</p>

<hr />

<p>That’s all I’ve got to say about practicing for the technical interview. On the third and final part of <a href="https://jivimberg.io/blog/categories/interview-series/">the series</a> I’ll talk about the on-site and what happens afterwards (a job offer or rejection). See you next time!</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature8.png" width="200" title="‘My signature’" ></p>

<p><em>Special thanks to: <a href="https://twitter.com/rcruzjo">@rcruzjo</a>, <a href="https://twitter.com/patriciob">@patriciob</a>, <a href="https://twitter.com/pgveiga">@pgveiga</a> and <a href="https://www.instagram.com/luketua">@luketua</a> for helping me edit and improve this series.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Ok. The thing that terrified me…<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Go read this article if you haven’t. Peter Welch is hilarious.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Prepare for the Silicon Valley Interview - Part 1]]></title>
    <link href="http://jivimberg.github.io/blog/2019/01/06/how-to-prepare-for-the-silicon-valley-interview-part-1/"/>
    <updated>2019-01-06T14:04:22-08:00</updated>
    <id>http://jivimberg.github.io/blog/2019/01/06/how-to-prepare-for-the-silicon-valley-interview-part-1</id>
    <content type="html"><![CDATA[<p>For the past few months, I’ve been interviewing with different companies on the Valley, from some of the well-known giants to promising startups. Over the next couple of weeks I&rsquo;ll be publishing <a href="https://jivimberg.io/blog/categories/interview-series/">a series of articles</a> about the things I learned in the journey. This is Part 1.</p>

<!--more-->


<h2>Interview process, the big picture</h2>

<p>This is an overview of what the whole process entails:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/processTimeline.png" width="750" title="‘Process timeline’" ></p>

<p>I found that dividing the whole process in parts helped me build a schedule and create deadlines for the different phases.</p>

<p>This article will cover the first two phases:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/timelineFocusPart1.png" width="750" title="‘Process timeline focus part 1’" ></p>

<p>But before we jump to the first phase let&rsquo;s talk about the interview timeline.</p>

<h2>The timeline</h2>

<p><em>How much time do you need to go through all of this?</em></p>

<p>Well, it depends&hellip; For me it took around four months but YMMV. If you search online you’ll find <a href="https://www.quora.com/How-should-I-prepare-for-my-Google-interview-if-I-have-1-month-left-and-I%E2%80%99m-applying-for-a-software-engineer-role">plenty of</a> <a href="https://www.linkedin.com/pulse/average-googler-four-weeks-study-plan-milad-naseri/">study plans</a> <a href="https://www.quora.com/Can-I-crack-the-Google-interview-in-just-1-month-of-preparation-If-yes-then-how-I-just-know-the-basics-of-C-and-C++">to follow</a>. But I think the best thing you can do is to take it at your own pace.</p>

<p>Here are some tips I used to set up my interviewing schedule:</p>

<ul>
<li><strong> Divide the preparation in phases</strong> just like I did on my timeline. Then <a href="https://support.google.com/calendar/answer/37095?hl=en">Create a new calendar on Google Calendar</a> and use it to <strong>set reminders and deadlines for each of the phases</strong> of the preparation. This will give you a nice visual overview of where you stand in the process and how much time you&rsquo;ve left before moving to the next phase.</li>
<li>I also used <strong><a href="https://trello.com">Trello</a></strong> to create a list of tasks to complete. I&rsquo;d sort them by priority and grab a few to tackle each day. The trick is to try to <strong>break them down small enough so you can complete each of them in one sit</strong>.</li>
</ul>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/trello.png" width="750" title="‘Trello screenshot’" ></p>

<h2>Updating your resume</h2>

<p>Sooner or later you’ll have to sit down and face the dreadful task of updating your resume.</p>

<p>There’s a ton of advice online on how to write a good resume. Instead of trying to sum it all up I’m going to give you <strong>the 3 tips that helped me the most</strong>:</p>

<ol>
<li><strong>Show your accomplishments.</strong> Your bullet points for each role should focus on your achievements. For example: _&ldquo;Improved project loading performance on web-app by 5x by introducing hints on the
persistence layer to handle transactions more efficiently&rdquo;_</li>
<li><strong>Don’t include everything.</strong> You’re not writing your autobiography, there’s <em>no need to include every single task you&rsquo;ve ever worked on</em>. Adding extra information only decreases the <a href="https://en.wikipedia.org/wiki/Signal-to-noise_ratio">signal to noise ratio</a>. Trim down your resume to only keep the best of the best. <strong>One or two pages max!</strong></li>
<li><strong>Make it look awesome</strong>. <em>You don’t get a free pass on style just because you’re a developer and not a designer</em>. Making a pretty resume is going to take you longer, but believe me: recruiters do notice it and appreciate the effort. Going the extra mile will set you apart. For an easy to use graphic-design tool try <strong><a href="https://www.canva.com/">Canva</a></strong>, <strong>I can’t recommend it enough</strong>.</li>
</ol>


<p>As an example this is what my resume currently looks like:</p>

<p><a href="https://drive.google.com/file/d/12FKryxTfewr_QtvQtTDMJf-NwmuySY2k/view?usp=sharing"><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/resume-1.png" width="500" title="‘My resume page 1’" > </a></p>

<p>As with any piece of good writing <strong>it’ll take many iterations to get there</strong>. Start with a <a href="https://www.goodreads.com/quotes/288933-almost-all-good-writing-begins-with-terrible-first-efforts-you">shitty first draft</a> and share it with your friends and recruiters to get feedback and make improvements.</p>

<h2>Behavioral questions</h2>

<p>Since you&rsquo;re working on your resume you&rsquo;ll want to start preparing for the behavioral questions too. These are the questions that get asked before the coding interview. Their purpose is to give the interviewer a better sense of the accomplishments listed on your resume, and to assess whether you&rsquo;re a good fit with the company culture. There are 3 parts to the behavioral questions preparation:</p>

<p>The first thing you should prepare is a <strong>two-minute introduction of yourself.</strong> <strong>This is your resume condensed to an elevator pitch</strong>. Cover a little bit about your <em>background</em>, your <em>current job responsibilities</em> and any <em>side-project</em> worth mentioning. If you&rsquo;re curious <a href="https://docs.google.com/document/d/1bX3Vpr9icGCMbJvHMuWb3Q9GmKORf3W2DJ_fziV8Wtk/edit?usp=sharing">this is what my introduction looked like</a>.</p>

<p>The second thing is to prepare for the typical interview questions such as <em>&ldquo;Why are you leaving your current job?&rdquo;</em> or <em>&ldquo;What are your strengths and weaknesses?&rdquo;</em>.</p>

<p>Finally, you should prepare a couple of <strong>stories</strong> for questions like: <em>&ldquo;Tell me about a time you made a mistake&rdquo;</em> or <em>&ldquo;Tell me about a time when you had conflicts interacting with one of your coworkers and how you handled it&rdquo;</em>. Following the advice in <a href="http://www.crackingthecodinginterview.com/">Cracking the Coding Interview</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> I created a table like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/storiesTable.png" width="750" title="‘stories table’" ></p>

<p><strong>Pro-tip:</strong> You can create a document with all this stuff and use it as a cheat-sheet during your phone call interviews. Believe me, after a few calls you&rsquo;ll not even need it.</p>

<p>The best advice I came across for Behavioral questions was from <a href="http://www.crackingthecodinginterview.com/">Cracking the Coding Interview</a> and <a href="https://www.amazon.com/Cracking-Tech-Career-Insider-Microsoft-ebook/dp/B00MFPZ9X6">Cracking the Tech Career</a> both by <em><a href="http://www.gayle.com/">Gayle Laakmann McDowell</a></em>. You can check a condensed version of the behavioral question section of the book in this <a href="http://www.crackingthecodinginterview.com/uploads/6/5/2/8/6528028/cracking_the_soft_skills_-_v6.pdf">Soft Skills Cheatsheet</a>.</p>

<h2>Where to look for new roles</h2>

<p>So you’re ready to move on to greener pastures, <em>where do you start looking?</em></p>

<p>The first obvious answer is <strong>LinkedIn</strong>. Just make your profile as sexy as possible (make sure you <a href="https://www.dailydot.com/debug/how-to-update-linkedin-without-notifications/">disable notifications if you want to be discrete</a>) and wait for recruiters to start pinging you.</p>

<p>If you’re looking <strong>for a job at a startup, <a href="https://angel.co/">Angel List</a></strong> is a great place to start. <strong>To learn specifics</strong> about a particular startup head to <strong><a href="https://www.crunchbase.com">Crunchbase</a></strong> where you’ll find information about the <em>funding rounds</em> the company has been through, <em>the investors</em>, <em>the team</em>, etc.</p>

<p><strong>If you already have a good sense of what you’re looking for,</strong> I can recommend using <strong><a href="https://woo.io/">Woo.io</a></strong>. You&rsquo;ll need to create a profile (you can import most of it from <em>LinkedIn</em>) and set your job expectations (role, technologies, company size, location, etc.). The site will magically find jobs that match your search and send them to you on a daily basis. You can then review the openings, and if they’re not of your liking, you can reject them (optionally) including a <em>reason</em> why it’s not a good fit. <strong>Woo will learn from your feedback and refine the search for future approaches.</strong></p>

<p>On the other hand, <strong>if you’re unsure about what you want to do next</strong> you can try this trick: Pick a hiring site and skim through the job postings. <strong>Play it by gut;</strong> when something catches your eye, try to reflect on why. <em>Was it the technology stack?</em> <em>The company values?</em> <em>Maybe the location?</em> <strong>Don’t worry if you can&rsquo;t put your finger on it, just keep going</strong>. Repeat this enough times and you’ll start getting a sense of what makes you tick.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-06/JobSearchFlowDiagram.png" title="‘Process timeline’" ></p>

<h2>Research the company and team</h2>

<p>Your next job is where you&rsquo;ll spend most of your waking hours for the next few years. You&rsquo;ll probably end up spending more time with your colleagues than with some of your family members. And yet we put more effort into reading reviews about some new gadget we plan to buy, than learning about our next employer.</p>

<p>To make things harder, trying to learn about the culture of a company might prove to be a challenge. While most companies include something about culture and values along with their job postings, more often than not it&rsquo;s just some generic marketing <em>lorem ipsum</em>. Too abstract to actually give us any clue about how the company values are present in the day-to-day tasks.</p>

<p>By far, the best way to discover what a company is really like, is by getting a first hand account from somebody working there. <strong>Tap into your network!</strong> See if any of your contacts knows somebody and can help you with the introductions (<a href="https://www.linkedin.com/help/linkedin/answer/110/your-network-and-degrees-of-connection?lang=en">LinedkIn Degrees of Connection</a> is perfect for this kind of thing).</p>

<p>If you don&rsquo;t happen to know anybody, you can try reaching out to the developers that write the company&rsquo;s tech blog.  <strong>Tech conferences<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> and Meetups also provide an excellent opportunity to talk to engineers</strong> and get a first-hand impression of what the culture is like.</p>

<p>Finally, you can always fall back to sites like <strong><a href="https://www.glassdoor.com/index.htm">Glassdoor</a><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></strong> and <strong><a href="https://www.teamblind.com/articles/Topics">Blind</a></strong>; just take comments with a grain of salt.</p>

<hr />

<p>That&rsquo;s all for today, hope you found it useful! On my next article I&rsquo;ll talk about how to prepare and practice for the coding interview. Stay tuned!</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature13.png" width="200" title="‘My signature’" ></p>

<p><em>Special thanks to: <a href="https://twitter.com/rcruzjo">@rcruzjo</a>, <a href="https://twitter.com/patriciob">@patriciob</a>, <a href="https://twitter.com/pgveiga">@pgveiga</a> and <a href="https://www.instagram.com/luketua">@luketua</a> for helping me edit and improve this series.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m going to talk more about this book in the next article. For now the only thing you need to know is that if you only have money for <strong>one</strong> interview book, then this is the one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>You don’t have to pay full price for the conference if you’re only going to network. Many big conferences offer some kind of <em>Discovery pass</em> that will grant you access to the <em>Exhibition halls</em> where the companies set up their booths.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Pro-tip: If the company is big, filter reviews by job title to get a more accurate sense of the culture.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Docker for Development]]></title>
    <link href="http://jivimberg.github.io/blog/2019/01/02/using-docker-for-development/"/>
    <updated>2019-01-02T17:27:34-08:00</updated>
    <id>http://jivimberg.github.io/blog/2019/01/02/using-docker-for-development</id>
    <content type="html"><![CDATA[<p>Docker has transformed the way we package and ship applications. But. did you know it can transform your development setup too?</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2019-01-02/docker-party.png" title="‘Docker party’" ></p>

<p>Stop me if you&rsquo;ve heard this one before: <em>You get a new computer. As you&rsquo;re setting it up, you swear on Turing&rsquo;s grave, to only install the bare essentials on it and avoid bloatware at all costs. Fastforward a couple of months, you have the Java JDK, Go tools, multiple versions of Python and the Android SDK (for that <a href="https://play.google.com/store/apps/details?id=com.eightblocksaway.android.practicepronunciation">side-project app</a> you might someday resume developing) installed on your machine.</em></p>

<h2>Docker to the rescue</h2>

<p>That&rsquo;s right, you can use Docker to containerize your development environment! This way you avoid installing all that tooling on your host machine, making Docker your only dependency. <strong>Now you can develop from any computer, regardless of the OS, as long as it has Docker installed</strong>. As an extra benefit, all collaborators of the project get consistent environments, so, no more: <em>&ldquo;works on my machine&rdquo;</em>.</p>

<p>I discovered this fighting to setup the env to write this blog on a new machine. After playing <em>&ldquo;google the exception&rdquo;</em> for a few hours I though: <em>there has to be a better way of doing this</em>. Using <a href="https://github.com/humburg/octopress-docker">this repo</a> as inspiration I added a <code>Dockerfile</code> to my project, that creates a Docker image containing all the dependencies needed to run <a href="http://octopress.org/">Octopress</a>. Then simply by mounting the project directory on the <code>/octopress</code> folder I can run all the <a href="http://octopress.org/docs/blogging/">usual <code>rake</code> tasks</a>, just as I&rsquo;d do locally, but on the container.</p>

<p>No more messing around with language environments and dependencies. Build the image, spin up a container, and blog from anywhere.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using UUID on Spring Data JPA Entities]]></title>
    <link href="http://jivimberg.github.io/blog/2018/11/05/using-uuid-on-spring-data-jpa-entities/"/>
    <updated>2018-11-05T07:25:37-08:00</updated>
    <id>http://jivimberg.github.io/blog/2018/11/05/using-uuid-on-spring-data-jpa-entities</id>
    <content type="html"><![CDATA[<p>In this article I’ll explore <strong>how to model a <a href="https://stackoverflow.com/questions/6033905/create-the-perfect-jpa-entity">JPA Entity</a> using an <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a></strong> as Primary Key working with <a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA.</a></p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-11-07/uuid.png" title="‘uuid key’" ></p>

<h1>Why UUIDs?</h1>

<p>Usually we use numerical keys on our models and let the DB generate that for us on persistence. But there are <strong>some reasons why you might prefer to use UUIDs</strong> as your Primary Key instead. Namely:</p>

<ul>
<li><strong>UUIDs are globally unique.</strong> This means that we don’t need a centralized component to generate unique ids, <strong>we can generate the ids on the application itself</strong> instead of relying on <a href="https://vladmihalcea.com/hibernate-and-uuid-identifiers/">some UUID generator</a> that populates the <code>id</code> field on persist.</li>
<li>Having globally unique ids also means that <strong>your ids are unique across databases.</strong> This allows us to move data across databases without having to check for conflicting ids.</li>
<li>Having application generated ids means the id is known even before the entity is persisted. This lets us <strong>model our entities as <a href="https://proandroiddev.com/kotlin-for-beginners-immutability-and-the-value-of-val-78ab45b60b57">immutable objects</a></strong> and we avoid having to handle null values on the id.</li>
</ul>


<p>But as you probably already know: <a href="https://en.wikipedia.org/wiki/There_ain't_no_such_thing_as_a_free_lunch">🚫🆓🍽</a>. So here are some of the downsides of using UUIDss for you to consider:</p>

<ul>
<li><strong>Storage space.</strong> As you can imagine storing an UUID takes a lot more space than storying an Int. Specially if you make the mistake of storing it as a <code>String</code>. You might think Id space is not a big deal, but consider that <strong>Primary Keys are often used in indexes and as Foreign Keys on other tables</strong>. So the numbers start to add up.</li>
<li>They are <strong>not human friendly</strong>. What’s easier to remember: <code>223492</code> or <code>453bd9d7-83c0-47fb-b42e-0ab045b29f83 </code>? This is specially true if you happen to be exposing your ids on your public APIs. Think: <code>/albums/2311445/photo/7426321</code> vs <code>/albums/b3480d79-e458-4675-a7ba-61ac5957cb7c/photo/19b24967-1741-4405-a746-d2b081ee45f2 </code>.</li>
</ul>


<p><strong>If you’re still on the fence</strong> here’s a great article talking about the pros and cons of using UUIDs as primary keys: <a href="https://tomharrisonjr.com/uuid-or-guid-as-primary-keys-be-careful-7b2aa3dcb439">https://tomharrisonjr.com/uuid-or-guid-as-primary-keys-be-careful-7b2aa3dcb439</a>.</p>

<h1>How to do it</h1>

<p>Now let’s talk about how we can implement this. I’ll go step by step explaining why we add each piece of code.</p>

<p>The first thing we need to do is <strong>generate the UUID</strong>. As mentioned above we’d like to do this on the application code so we can have <em>immutable entities</em>. Generating the UUID is easy, all we need to do is: <code>UUID.randomUUID()</code>. So our entity would look like this:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import java.util.\*
import javax.persistence.Id
import javax.persistence.Entity

//sampleStart
@Entity
class Artist(
        @Id val id: UUID = UUID.randomUUID(),
        val name: String
)
//sampleEnd
</xmp>


<p>You’ve probably noticed how we’re making the id an argument of the <a href="https://kotlinlang.org/docs/reference/classes.html#constructors">primary constructor</a>. This is required to <strong>let clients construct entities with known ids to represent persisted objects</strong>. This is useful for example to <strong>model an update operation</strong>: create an enwtity with a known id and updated values, then call <code>save()</code> on such entity.</p>

<h2>isNew?</h2>

<p>As mentioned we’re using <a href="https://spring.io/projects/spring-data-jpa">Spring Data JPA</a> for our Repository layer. Now there’s a small detail we have to take into account when <strong>using application provided ids with Spring Data</strong>. If you do a <code>artistRepository.save(Artist(name = "David Bowie"))</code> you might get an output like this:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-11-07/2sql.png" title="‘persist logs’" ></p>

<p>If you pay close attention to the log you’ll notice that <strong>Hibernate is actually executing 2 SQL queries</strong>: one <code>select</code> followed by one <code>insert</code>. Not quite what we were expecting.</p>

<p>The reason for this behavior is the implementation of Spring Data’s <a href="https://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java"><code>SimpleJpaRepository.java</code></a>. In particular the <a href="https://github.com/spring-projects/spring-data-jpa/blob/01e36dbb44d6bc87f7deb3b6d6dacc955ea6c8bd/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L506"><code>save()</code></a> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="o">&lt;</span><span class="n">S</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">S</span> <span class="nf">save</span><span class="o">(</span><span class="n">S</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">entityInformation</span><span class="o">.</span><span class="na">isNew</span><span class="o">(</span><span class="n">entity</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">entity</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The double SQL statement is caused by the call to <code>merge()</code></strong>. By default the way this class decides whether to do a <code>persist()</code> or a <code>merge()</code> <strong>is simply by checking if the id is null</strong>. Which works fine for DB assigned ids, but <em>not</em> for application assigned ones. 😕</p>

<p><strong>The best way to control this is by implementing the <a href="https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/domain/Persistable.java"><code>Persistable&lt;ID&gt;</code></a> interface</strong> providing a <code>isNew()</code> method. Since this is something we’ll want to do every time we use application generated UUIDs <strong>I’ll extract this into an abstract class</strong> and making use of the <code>@MappedSuperClass</code> annotation.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import org.springframework.data.domain.Persistable
import java.util.\*
import javax.persistence.\*

//sampleStart
@MappedSuperclass
abstract class AbstractBaseEntity(givenId: UUID? = null) : Persistable<UUID> {

    @Id
    @Column(name = "id", length = 16, unique = true, nullable = false)
    private val id: UUID = givenId ?: UUID.randomUUID()
    
    @Transient
    private var persisted: Boolean = givenId != null
    
    override fun getId(): UUID = id
    
    override fun isNew(): Boolean = !persisted
    
    override fun hashCode(): Int = id.hashCode()
    
    override fun equals(other: Any?): Boolean {
        return when {
            this === other -> true
            other == null -> false
            other !is AbstractBaseEntity -> false
            else -> getId() == other.getId()
        }
    }
    
    @PostPersist
    @PostLoad
    private fun setPersisted() {
        persisted = true
    }
}
//sampleEnd

</xmp>


<blockquote><p>This design was <strong>suggested to me by <a href="https://twitter.com/PabloHernanS">@paschmid</a> and <a href="https://twitter.com/rcruzjo">@rcruzjo</a></strong>, this code would be quite ugly if it weren’t for them!</p></blockquote>

<p>You can see how the <code>persisted</code> state is decided based on whether an id is provided on creation or not, to account for updates. Also notice how <strong>its value gets automatically updated upon <em>persist</em> and <em>load</em></strong> thanks to <code>@PostPersist</code> and <code>@PostLoad</code> annotations.</p>

<p>Also since <code>id</code> is now <em>unique</em> and <em>non-nullable</em> <strong>we can use it to implement <code>equals()</code> and <code>hashcode()</code></strong> and avoid falling in some of the common pitfalls of implementing this methods (to learn more about this check <a href="https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/">this article</a> by <a href="https://twitter.com/vlad_mihalcea">@vlad_mihalcea</a> and <a href="https://kotlinexpertise.com/hibernate-with-kotlin-spring-boot/">this one</a> by <a href="https://twitter.com/s1m0nw1">@s1m0nw1</a>).</p>

<p>And in case you’re wondering <strong>why we need an explicit <code>getId()</code> function</strong>, it is because of this issue: <a href="https://youtrack.jetbrains.com/issue/KT-6653">Kotlin properties do not override Java-style getters and setters</a>.</p>

<h1>Putting it all together</h1>

<p>Finally let’s see how a concrete entity would use this.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import org.springframework.data.repository.CrudRepository
import java.util.\*
import javax.persistence.Entity

//sampleStart
@Entity
class Artist(
        id: UUID? = null,
        val name: String
) : AssignedIdBaseEntity(id)
//sampleEnd
</xmp>


<p>Pretty similar to our original approach right? Thanks to the abstract class all the <code>isNew()</code> <strong>implementation details are hidden</strong> from concrete entities.</p>

<p>And now if we do a <code>save()</code> on a new entity <strong>we get one single SQL statement</strong> as we were expecting.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-11-07/1sql.png" width="600" title="‘persist logs with abstractEntity’" ></p>

<hr />

<h1>Approach 2: Making it simpler with @Version</h1>

<p>This approach was suggested by <a href="https://disqus.com/by/disqus_UhNaTY8OWI/">Diego Marin</a> in the comments.</p>

<p>Spring Data can leverage the existence of a <code>@Version</code> field to tell if the Entity is present or not. By having <code>@Version</code>, we also get <a href="https://www.baeldung.com/jpa-optimistic-locking">Optimistic Locking</a> for free.</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import java.util.*
import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.Id
import javax.persistence.Version

//sampleStart
@Entity
class Celeb(
        @Id @Column(name = "id", length = 16, unique = true, nullable = false)
        val id: UUID = UUID.randomUUID(),
        @Version
        val version: Long? = null,
        val name: String
) {
    override fun equals(other: Any?) = when {
        this === other -> true
        javaClass != other?.javaClass -> false
        id != (other as Celeb).id -> false
        else -> true
    }

    override fun hashCode(): Int = id.hashCode()
}
//sampleEnd
</xmp>


<blockquote><p>⚠️ Make sure you’re importing <code>javax.persistence.Version</code> and NOT <code>org.springframework.data.annotation.Version</code>!</p></blockquote>

<p>We still need to write the <code>id</code> column definition and <code>equal</code> and <code>hashCode</code> methods, so if this is something you’ll be applying in most of your entities you might want to consider extracting it to a superclass. Similar to what we did with <code>AssignedIdBaseEntity</code>, but using <code>@Version</code></p>

<hr />

<p>You can find all the <strong>code samples</strong> for this post on <strong><a href="https://github.com/jivimberg/spring-data-uuid-example">this GitHub repo</a></strong>.</p>

<p><img class="right-fill" src="http://jivimberg.github.io/images/signatures/signature1.png" width="200" title="‘My signature’" ></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive GraphQL Subscriptions From Kafka]]></title>
    <link href="http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka/"/>
    <updated>2018-10-23T07:58:14-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/10/23/reactive-graphql-subscriptions-from-kafka</id>
    <content type="html"><![CDATA[<p>In this post I’ll be exploring how to implement <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">GraphQL subscriptions</a> <em>reactively</em> on a Spring Boot application using <a href="https://kafka.apache.org/">Kafka</a>.</p>

<!--more-->


<h1>The use case</h1>

<p>So, <em>what are we trying to achieve?</em> We want to provide <strong>a way for clients to get notified</strong> whenever an event occurs in the application.</p>

<p>The GraphQL way of doing this is through a <a href="https://github.com/facebook/graphql/blob/master/rfcs/Subscriptions.md">Subscription</a>. For the application events we’re using Kafka. So all we are trying to do is to tie those 2 things so that <strong>whenever an event pops up in Kafka all clients with an active subscription get notified</strong>.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-10-24/SubscriptionFlow.png" width="700" title="‘Subscription flow diagram’" ></p>

<h1>The setup</h1>

<p>Let’s introduce the different pieces of the puzzle:</p>

<ol>
<li>I have a <a href="https://spring.io/guides/gs/spring-boot/">Spring Boot application</a> that has some business logic.</li>
<li>Using <a href="https://github.com/graphql-java-kickstart/graphql-spring-boot"><code>graphql-spring-boot-starter</code></a> I’m exposing my service through a GraphQL API. <strong>One of those endpoints it’s going to be a Subscription endpoint.</strong> It’s schema definition looks something like this:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">type</span> <span class="n">Subscription</span> <span class="o">{</span>
</span><span class='line'> <span class="nl">event:</span> <span class="n">EventMessage</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>On the other end I have a <a href="https://kafka.apache.org/documentation/#intro_topics">Kafka topic</a> with events that a user might be interested in. We plan to use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to <strong>consume the events through a reactive stream</strong>.</li>
</ol>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-10-24/Setup.png" width="800" title="’Setup diagram’" ></p>

<p>So the challenge is: <em>how do we connect all this pieces together?</em></p>

<h1>Reactive all the way</h1>

<p>To implement the resolver <a href="https://github.com/graphql-java-kickstart/graphql-java-tools">GraphQL Java Tools</a> <strong>requires that we implement a function that returns a <code>Publisher&lt;T&gt;</code></strong>. Where <em>T</em> is the type of event to be pushed to the subscriber. From <a href="https://github.com/graphql-java/graphql-java">GraphQL Java</a> documentation:</p>

<blockquote><p>What is special is that the initial result of a subscription query is a <strong>reactive-streams Publisher object</strong> which you need to use to get the future values.</p></blockquote>

<p>On the other end <strong>we can use <a href="https://github.com/reactor/reactor-kafka">Reactor Kafka</a> to create a reactive Receiver</strong> to consume the events from the topic. Then all that’s left is <strong>obtaining a <code>Publisher</code> from this receiver so that clients can subscribe to it</strong>. This is all the code we need:</p>

<xmp class="kotlin-code" theme="darcula" data-highlight-only>
import graphql.schema.DataFetchingEnvironment
import org.reactivestreams.Publisher
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import reactor.core.publisher.Flux
import reactor.kafka.receiver.KafkaReceiver
import reactor.kafka.receiver.ReceiverOptions

@Component
class SubscriptionsResolverImpl(
    receiverOptions: ReceiverOptions<String, EntityUpdated>                 // Receiver configuration. Injected by Spring
) : SubscriptionsResolver {

    private val logger = LoggerFactory.getLogger(javaClass)

    private val kafkaReceiver: Flux<GraphqlEvents.Update> by lazy {         // Use lazy to delay KafkaReceiver initialization
        KafkaReceiver.create(receiverOptions).receive()                     // Create Kafka reactive receiver
            .map { GraphqlEvents.Update.fromEvent(it.value()) }             // Map from Kafka event to Graphql Event
            .doFinally { logger.info("Closing with signal: ${it.name}") }   // Log message on stream closure
            .publish()                                                      // Get a ConnectableFlux. Turns stream to hot
            .autoConnect()                                                  // Connect to upstream on first subscription
    }

    override fun event(env: DataFetchingEnvironment): Publisher<GraphqlEvents.Update> {
        logger.info("GraphQL 'event' subscription called")                  // Log message on each new subscription
        return kafkaReceiver                                                // Returns kafkaReceiver for GraphQL to subscribe to it
    }
}
</xmp>


<p>Just to recap. We are <strong>creating a Kafka Receiver</strong> for the topic we care about (the topic configuration is part of the <code>receiverOptions</code> object, not shown in the snippet).</p>

<p>We are <strong>mapping the event</strong> from the <em>Kafka model</em> to the <em>GraphQL model</em> through the <code>map()</code> method.</p>

<p>Then we are turning the receiver into a hot stream by calling <code>publish()</code>. We are doing this because <strong>we want new subscribers to only see events that happened after they subscribed to the <code>Publisher</code></strong>. And that’s exactly what <code>publish()</code> does. In fact if you pay close attention to the marble diagram of the <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#publish--">method documentation</a> you’ll notice how <strong>it looks pretty similar to our use case flow diagram.</strong></p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-10-24/publish.png" width="500" title="‘Publish marble diagram’" ></p>

<p>We’re calling <code>autoConnect()</code> so that it connects to the upstream source as soon as the first <code>Subscriber</code> subscribes.</p>

<p>Finally we’re implementing the <code>event</code> function <strong>by simply returning the reference to our hot stream of events</strong>. Whenever a new client calls the Subscription endpoint <strong>GraphQL Java will subscribe to this stream</strong> and send a message for every new event that shows up in the configured Kafka topic.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Radical Candor]]></title>
    <link href="http://jivimberg.github.io/blog/2018/09/30/book-recommendations-radical-candor/"/>
    <updated>2018-09-30T11:28:59-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/09/30/book-recommendations-radical-candor</id>
    <content type="html"><![CDATA[<p>Last week I finished <a href="https://www.amazon.com/Radical-Candor-Kim-Scott/dp/B01MY574EE/ref=sr_1_1?ie=UTF8&amp;qid=1538332470&amp;sr=8-1&amp;keywords=radical+candor">Radical Candor</a> a book by <a href="https://www.kimmalonescott.com/">Kim Scott</a> about <em>how to be a good boss without being an asshole</em>. Here’s what I learned.</p>

<!--more-->




<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%" src="https://read.amazon.com/kp/card?asin=B01KTIEFEE&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_IcxSBbZDBE91M" ></iframe>


<h1>1.  Be honest. Specially when it’s hard</h1>

<blockquote><p>“From the time we learn to speak, we’re told that if you don’t have anything nice to say, don’t say anything at all. When you become a manager, it’s your job to say it--and your obligation.”</p><footer><strong>Kim Scott</strong> <cite>Radical Candor</cite></footer></blockquote>


<p>If somebody’s work is subpar and you let it pass and pretend is good, <strong>you’re doing everybody a disservice</strong>. You’re hurting the team because either you or somebody else, will have to cover up for the guy and redo the work. And at the same time you’re setting a precedent that it is OK to deliver poor work.</p>

<p>But even more importantly <strong>you’re not giving that person the chance to improve by pointing out what he/she needs to work on!</strong> So if you care about your team, speak up! Be <em>honest</em>, be <em>direct</em> and be <em>specific</em>.</p>

<h1>2. How to be direct without being a dick</h1>

<p>Kim’s advise is to <em>care personally™</em>, which to me means: <strong>care for the other person, but seriously</strong>.</p>

<p>It’s not enough to remember you employees partner’s name, or to ask about his hobbies every now and then. To make radical candor work you have to build and actual relationship with your direct reports. Get to know them. <strong>Understand where they come from and what drives them</strong>.</p>

<p>So, how to put this in practice? The book has a ton of useful <strong>tips on how to criticize without discouraging</strong>. For example:</p>

<ol>
<li><strong>Start by asking for feedback before giving it</strong>. Show that you’re open to criticism and make sure you reward people that takes the time and effort to correct you. This is the only way you can build of culture of radical candor.</li>
<li><strong>Don’t make it personal</strong>. When pointing out things that can be improved make it clear that it’s not about the person but about the work done. Be specific! And present it as an opportunity for improvement and <em>offering help and guidance to fix the problem</em>.</li>
</ol>


<h1>3. Not everybody is looking for  a promotion</h1>

<p>This one is about how we value and judge ambition. As the book points out <strong>not everybody on your team is eager to jump to a new position or wants to be a manager</strong>. You’ll probably have some team members that are content with their current position and, for whatever reason, are not looking for a change. And that’s ok!</p>

<p>The book calls this people <em>”Rockstars”</em> because they are the rock that brings stability to the team. An uses the term <em>“Superstars”</em> for the more ambitious kind that are looking for new opportunities to shine. I think the names are stupid. But what’s not stupid is the realization that <strong>you need both kinds of people in your team</strong>.</p>

<p>If your team is only composed of <em>”Superstars”</em> then if they succeed (and it’s your job to help them succeed!) then you’ll end up without team because everybody has moved to a new thing. On the other hand if your team is all <em>“Rockstars”</em> then you run the risk of stagnation as you’ll lack your main agents of innovation. You’ll need to get the right mix of <em>“Rockstars”</em> and <em>“Superstars”</em> for your team to be successful.</p>

<p>It’s worth pointing out that <strong>this “labels” are not permanent</strong>. People will move between the two kinds based on their priorities, values and things on their personal life. And it’s your job as manager to figure out what each team member is aiming for, and help them get there.</p>

<p>Remember that promotions are just one way of recognizing people’s work, and it might not be the best reward for everybody.</p>

<h1>4. On culture</h1>

<p>I found quite interesting the observation that, when left unchecked, <strong>the team’s culture tends to reflect it’s leaders strengths and short-comings</strong>. Kim explains  how every action, big or small, has an impact on the team culture. So for example, if you’re working on improving the product quality and attention to detail you shouldn’t send emails with spelling mistakes. <strong>You have to lead by example and inspire people to follow</strong>.</p>

<p>The only way of creating a long-lasting culture is by inspiring people and letting them contribute with their own ideas.</p>

<hr />

<p>I’m just scratching the surface here. The book expands on the mentioned topics with good real-world examples. The second portion of the book focuses on the details on how to put the theory in practice. It covers from things like <em>how to schedule and conduct your one-on-ones</em> to <em>hiring techniques to avoid biases</em>. <strong>So go read it!</strong> I’m sure you’ll find something useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts on Using Gradle With Kotlin DSL]]></title>
    <link href="http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl/"/>
    <updated>2018-08-28T08:36:57-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/08/28/random-thoughts-on-gradle-and-kotlin-dsl</id>
    <content type="html"><![CDATA[<p>Since Gradle 3.0 you can <a href="https://blog.gradle.org/kotlin-meets-gradle"><strong>write your build scripts using Kotlin instead of Groovy</strong></a>. I was curious, so I decided to give it a try. Here are my thoughts on the process.</p>

<!--more-->


<h1>Why?</h1>

<p>Ok, we can write our build scripts in Kotlin, but you might be wondering: <em>”why would I want to do that?”</em> Here are my reasons:</p>

<h2>1. All things Kotlin</h2>

<p>Our backend codebase is <em>mostly written in Kotlin</em>. We even wrote our <a href="https://jivimberg.io/blog/2018/07/03/writing-githooks-in-kotlin/">githooks using Kotlin scripts!</a> So it was only natural to use Kotlin on our build tools too.</p>

<p>Being able to use the same language across the stack means that your learning efforts pays double. This way <strong>the team doesn’t have to learn a new language just to write a simple Gradle task.</strong> And as an added bonus you can apply <em>the same testing, coverage and code inspection tools</em> that you use in production to your tooling code.</p>

<h2>2. IDE support</h2>

<p>The second reason for making the transition was IDE support. Groovy is a dynamically typed language, which makes it harder for the IDE to provide accurate code completion and script validity through type checks. Kotlin being statically typed doesn’t suffer from the same problems</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-09-11/kotlin-code-completion.png" title="‘Kotlin code completion’" ></p>

<h2>3. Interoperability</h2>

<p>As you probably know <a href="https://kotlinlang.org/docs/reference/java-interop.html">Kotlin was designed with Java interoperability in mind</a>. And the same interoperability <a href="">extends to Groovy code</a>.</p>

<p>This interoperability let us <strong><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy_2">call Groovy code from Kotlin</a> and <a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/#calling_kotlin_from_groovy">viceversa</a></strong>. Which effectively means that you can have <strong>a mix of both Groovy and Kotlin scripts working together in the same project</strong>. So no need to migrate all your build scripts at once, or to push stubborn <em>“Wally”</em> to learn Kotlin DSL.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-09-11/wally2.png" title="‘Wally’" ></p>

<h1>The exodus</h1>

<p><em>”So how painful was the migration?”</em> It wasn’t that bad really. Kotlin DSL was designed to be pretty similar to the classic <code>build.gradle</code> files.</p>

<p>You’ll just have to <strong>push through that first moment</strong> when nothing seems to be working, your project doesn’t compile at all, and you know you’re a <code>⌘ + Z</code> away from a pristine working copy. <em>But you can&rsquo;t make an omelet without breaking a few eggs, can you?</em></p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-09-11/panic.png" title="‘Panic!’" ></p>

<p><strong>I just wish there was some kind of automatic migration action in IntelliJ.</strong> Even if it’s a best effort that leaves you half way there, I’d greatly appreciate it. Ideally it should work just like when you paste some Java code into a Kotlin file: <code>⌘ + V</code> + ✨<em>fairy dust</em>✨ and you have your <code>build.gradle.kts</code> ready to go.</p>

<h3>Resources</h3>

<p>This are the resources that help me complete the migration. Hopefully you’ll find them helpful too.</p>

<ul>
<li><a href="https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/"><strong>Official Gradle migration guide</strong></a> <strong>Start here!</strong> You don’t have to cover the whole thing but you can skim through it and later go back to the section you need.</li>
<li><a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/"><strong>Samples in the Kotlin DSL repo</strong></a> This is <strong>the go-to place for Kotlin DSL samples</strong>. You’ll find yourself coming back to this repo over and over. Be sure to search the <em>Issues</em> section too.</li>
<li>For the times when the <a href="https://github.com/gradle/kotlin-dsl/tree/master/samples/">Kotlin DSL repo</a> doesn’t have what you’re looking for, I find it useful to use <a href="https://github.com/search/advanced"><strong>Github Search</strong></a> looking for code in files with <code>*.kts</code> extension.</li>
<li><a href="https://github.com/jnizet/gradle-kotlin-dsl-migration-guide"><strong>jnizet/gradle-kotlin-dsl-migration-guide</strong></a> this is another migration guide that has proven useful in the past.</li>
<li>Finally I followed <a href="https://handstandsam.com/2018/02/11/kotlin-buildsrc-for-better-gradle-dependency-management/"><strong>this article</strong></a> by <a href="https://handstandsam.com/about-me/">Handstand Sam</a> to do <em>dependency management</em> on out multi-module project.</li>
</ul>


<h1>The not so good</h1>

<h2>1. <em>“I can’t just copy-past things from Stack Overflow”</em></h2>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-09-11/copy-paste.jpg" width="250" title="‘Copy paste from Stack Overflow’" ></p>

<p>This is <strong>by far the biggest drawback</strong>. In my experience most teams have one or two <em>”build tool experts”</em>. The rest of the team just use a few tasks and maybe add a dependency every now and then. This casual user might have a harder time using Kotlin DSL because <strong>copy-pasting pieces of code from the web will not work out of the box</strong>. Converting this snippets to Kotlin DSL is not rocket-science, but in some cases it might require some basic level of understanding of how Kotlin DSL works.</p>

<p>This is specially true when using plugins that were not designed with Kotlin DSL in mind (I’m looking at you <a href="https://github.com/google/protobuf-gradle-plugin/issues/219">protobuf Gradle plugin</a>).</p>

<h2>2. IDE support could be better</h2>

<p>Remember all the nice things I said about IDE auto-completion on the build scripts? Well let me clarify: <em>“IDE support is awesome… most of the time”</em>.</p>

<p>Once you have your script fully migrated and IntelliJ has finished indexing then everything should work just fine. But to get there you’ll have to have your full <code>build.gradle</code> script fully migrated. That’s why my advice is to <strong>comment everything out and start migrating piece by piece</strong>. For example you can start with configuring the <em>repositories</em>, and <em>plugins</em> and only then move to <em>dependencies</em>.</p>

<p>This gets intensified if you are working on a <a href="https://guides.gradle.org/creating-multi-project-builds/">multi-module project</a> and/or you’re using <a href="https://docs.gradle.org/current/userguide/custom_plugins.html"><code>buildSrc</code> for custom plugins</a>.</p>

<p>The silver lining is that IDE support is getting better with each release, and once you’ve migrated everything it mostly works.</p>
]]></content>
  </entry>
  
</feed>
