<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding Forest]]></title>
  <link href="http://jivimberg.github.io/atom.xml" rel="self"/>
  <link href="http://jivimberg.github.io/"/>
  <updated>2018-07-20T16:24:46-07:00</updated>
  <id>http://jivimberg.github.io/</id>
  <author>
    <name><![CDATA[Juan Ignacio Vimberg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Map.merge]]></title>
    <link href="http://jivimberg.github.io/blog/2018/07/20/map-dot-merge/"/>
    <updated>2018-07-20T07:32:49-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/07/20/map-dot-merge</id>
    <content type="html"><![CDATA[<p>Sometimes is the small things… Like finding a new method that does exactly what you were needing.</p>

<!--more-->


<p>Let’s say I’m trying to build a book index. In case you haven’t touch an actual, physical, <em>dead-tree</em> book in a while here’s what an index looks like<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-07-20/index.gif" title="'Discoverability'" ></p>

<p>One way of doing this would be to <strong>build a map of: <em>terms</em> to <em>a list of comma separated pages</em></strong>. This is, by no means, the best way of modeling an index, but it’ll serve our purpose of illustrating the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>Map.merge</code></a> method.</p>

<p>Up until yesterday I’d have written such code like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Index</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">termToPagesMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addWord</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">,</span> <span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span> <span class="n">newPage</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">page</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">String</span> <span class="n">pages</span> <span class="o">=</span> <span class="n">termToPagesMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">term</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">pages</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">termToPagesMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">newPage</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">termToPagesMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">pages</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">newPage</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>But today I know better!</strong> With <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#merge-K-V-java.util.function.BiFunction-"><code>Map.merge</code></a> I can achieve the same result in just 1 line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Index</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">termToPagesMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addWord</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">,</span> <span class="kt">int</span> <span class="n">page</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">termToPagesMap</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">page</span><span class="o">),</span> <span class="o">(</span><span class="n">pages</span><span class="o">,</span> <span class="n">newPage</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">pages</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">newPage</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically we provide:</p>

<ul>
<li>The entry <strong>key</strong></li>
<li>A <strong>value</strong> to be used if there was no associated value to the key (or it was <code>null</code>)</li>
<li>A <strong> remapping function</strong> that takes the <strong>old value</strong>, the <strong>new value</strong> and calculates the new value for the map</li>
</ul>


<h2>Bonus track: Removal</h2>

<p>There’s one more trick you can do with <code>Map.merge</code>. Citing the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#merge-K-V-java.util.function.BiFunction-">documentation</a>:</p>

<blockquote><p>If the function returns <code>null</code> the mapping is removed</p></blockquote>

<p>Something to keep in mind in case it comes in handy in the future. Or if you find yourself debugging an issue of <em>”vanishing entries on a Map”</em>, then maybe you should check your <strong> remapping function</strong> 😉</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I’m aware that ebooks have indexes too, but who the fuck uses them when you can do a full blown text search<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Githooks in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2018/07/03/writing-githooks-in-kotlin/"/>
    <updated>2018-07-03T19:45:28-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/07/03/writing-githooks-in-kotlin</id>
    <content type="html"><![CDATA[<p>You’re already using Kotlin on your codebase. Maybe, you’ve even migrated to the new <a href="https://github.com/gradle/kotlin-dsl">Kotlin DSL for Gradle</a>. Wouldn’t it be nice if you could use Kotlin for your <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hooks</a> too?</p>

<!--more-->


<p><strong>Well, turns out you can!</strong> Here’s how you do it…</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-07-04/captain-hook.png" title="’Captain githook’" ></p>

<h2>What do I need?</h2>

<p>Git will basically run whatever script you drop on the <code>.git/hooks</code> directory. In their words:</p>

<blockquote><p>To enable a hook script, put a file in the hooks subdirectory of your <code>.git</code> directory that is named appropriately (without any extension) and is executable</p></blockquote>

<p>So all we need is to be able to execute Kotlin files as scripts. There is a <a href="https://github.com/Kotlin/KEEP/blob/scripting/proposals/scripting-support.md">Kotlin Scripting Support KEEP</a> under definition. But for the time being <strong>we’ll stick with the awesome <a href="https://github.com/holgerbrandl/kscript">KScript library</a> (by <a href="https://github.com/holgerbrandl">@holgerbrandl</a>)</strong> that enables Kotlin scripting on <em>*nix-based</em> systems.</p>

<p>You can find the details for installing KScript <a href="https://github.com/holgerbrandl/kscript#installation">here</a>. On MacOS if you’re using <a href="https://brew.sh/">Homebrew</a> all you have to do is run: <code>brew install holgerbrandl/tap/kscript</code>.</p>

<p>I’ll also be using <strong>Gradle</strong> to automatically install the githook and run the proper validation, but the same can be done with <strong>Maven</strong>.</p>

<h2>The script</h2>

<p>As an example I’m going to show how to do a <strong>pre-push client hook</strong> that aborts the push if <code>grade check</code> task is not successful. For this I’ve created a file named <code>Pre-Push.kts</code>:</p>

<xmp class="kotlin-code" data-highlight-only>
//sampleStart
#!/usr/bin/env kscript

import java.io.File

println("${Constants.SCRIPT_LOG_TAG} Running pre-push hook")
val hasStashed = stash()
if (hasStashed) {
    println("${Constants.SCRIPT_LOG_TAG} Stashing uncommited changes")
}

val checkExistStatus = runCheck()

if (hasStashed) {
    println("${Constants.SCRIPT_LOG_TAG} Unstashing your changes")
    unstash()
}

val exitValue = when {
    checkExistStatus != Constants.SUCCESS_EXIT_VALUE -> {
        println("${Constants.SCRIPT_LOG_TAG} Gradle check failed. I'm sorry but you can't continue with your push")
        Constants.ERROR_EXIT_VALUE
    }
    else -> {
        println("${Constants.SCRIPT_LOG_TAG} Everything went fine. You can continue with your push")
        Constants.SUCCESS_EXIT_VALUE
    }
}

kotlin.system.exitProcess(exitValue)
//sampleEnd

fun runCheck(): ExitStatus {
    println("${Constants.SCRIPT_LOG_TAG} Running gradle check")
    return "gradle check".runCommandWithRedirect()
}

fun stash(): Boolean {
    val stashOutput = """git stash push --include-untracked -m "stash created by pre-push hook"""".runCommand()
    return stashOutput.firstOrNull() != Constants.NOTHING_TO_STASH_MSG
}

fun unstash() = "git stash pop -q".runCommand()

fun String.runCommand(dir: File? = null): Sequence<String> =
    ProcessBuilder("/bin/sh", "-c", this)
        .redirectErrorStream(true)
        .directory(dir)
        .start()
        .inputStream.bufferedReader().lineSequence()

// Redirecting output and error to stdout
fun String.runCommandWithRedirect(dir: File? = null): ExitStatus =
    ProcessBuilder("/bin/sh", "-c", this)
        .redirectErrorStream(true)
        .inheritIO()
        .directory(dir)
        .start()
        .waitFor()

object Constants {
    const val SCRIPT_LOG_TAG = "Pre-push -"
    const val NOTHING_TO_STASH_MSG = "No local changes to save"
    const val SUCCESS_EXIT_VALUE = 0
    const val ERROR_EXIT_VALUE = -1
}

typealias ExitStatus = Int
</xmp>


<p>The first line is all the <em>magic incantation</em> we need to execute the script. By setting the shebang to <code>#!/usr/bin/env kscript</code> we get to use <code>kscript</code> as <a href="https://github.com/holgerbrandl/kscript#interpreter-usage">interpreter for the script</a>.</p>

<p>The code after the import is <strong>the actual script</strong>. Those are the lines that are going to be executed as soon as somebody calls the script. <em>Just as you’d expect with any regular shell script.</em></p>

<p>In a nutshell this is what the script does:</p>

<ol>
<li>Stash uncommitted changes <em>if any</em><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>Run code validation (in this case <code>gradle check</code>)</li>
<li>Unstash possible changes stashed on <em>step 1</em></li>
<li>Log outcome and set the proper exit value</li>
</ol>


<p>The last step is important because <strong>if the script exits to anything other than 0 then git aborts the action</strong> (in this case the push).</p>

<h3>How do I call things from a script?</h3>

<p>To do anything useful on your script you’ll probably have to <strong>call some external tool</strong> at some point. In this particular case for example a mix of <em>git commands</em> and <em>gradle tasks</em>.</p>

<p>There are 2 ways you can go about this:</p>

<ol>
<li>Either <strong>use a Kotlin/Java library</strong> for the task you’re trying to accomplish (in this example we could use <a href="https://www.eclipse.org/jgit/">JGit</a> and <a href="https://docs.gradle.org/current/userguide/embedding.html">Gradle tooling API</a>)</li>
<li>Or <strong>call a shell command</strong> directly</li>
</ol>


<p>While the first approach is more <strong>portable</strong>, it will introduce some dependencies to your script (which fortunately <a href="https://github.com/holgerbrandl/kscript#declare-dependencies-with-deps">KScript has great support for</a>). On the other hand the second option is probably <strong>easier to implement</strong> because it’s just using the same commands we use everyday on our workflow.</p>

<p>Since I can assume everybody in my team has <code>git</code> and <code>gradle</code> installed and in their path <strong>I went for option 2</strong>.</p>

<h3>Running shell commands from Kotlin</h3>

<p>We can run shell commands on Kotlin using <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html"><code>ProcessBuilder</code></a>, just like we’d do from Java.</p>

<p>In this case I’ve created a <code>runCommandWithRedirect</code> extension function that looks like this:</p>

<xmp class="kotlin-code" data-highlight-only>
import java.io.File

//sampleStart
fun String.runCommandWithRedirect(dir: File? = null): ExitStatus {
        return ProcessBuilder("/bin/sh", "-c", this)
            .redirectErrorStream(true)
            .inheritIO()
            .directory(dir)
            .start()
            .waitFor()
}

//sampleEnd
typealias ExitStatus = Int
</xmp>


<p>This function can be called on any String like this:</p>

<p><code>"gradle check".runCommandWithRedirect()</code></p>

<p>This function will:</p>

<ol>
<li>Redirect the standard and error output to the one for the current process, in our case that means <strong>the output of the command will be visible on the terminal when the githook is executed</strong>.</li>
<li>Set the directory to the passed <code>dir</code> parameter, or use the current directory if no parameter is provided.</li>
<li>Execute the command, wait for it to finish and return the <code>ExitStatus</code></li>
</ol>


<p>You can play around with the different <code>ProcessBuilder</code> options. In my script above for example I’ve another version of this function called <code>runCommand</code> that  <strong>executes the command and returns it’s output as a <code>Sequence&lt;String&gt;</code></strong>.</p>

<h2>Automatic installation</h2>

<p>Githooks are great to enforce code quality practices (i.e. <em>”You can’t push if your coverage is less than 80% “</em> 👮). But for the client-side githook to be execute it needs to be in the <code>.git/hooks</code> folder which is not versioned. That means that <strong>each developer on your team has to manually install the hook</strong>, which means that you are again, relying on the good memory of your teammates to enforce code quality.</p>

<p>Instead we could use <a href="https://gist.github.com/KenVanHoeylandt/c7a928426bce83ffab400ab1fd99054a">this trick</a>. We can create a <em>gradle task</em> called <em>“copy”</em> that copies the githook from the <code>src</code> folder to the <code>git/hooks</code> and removes the file extension in the process.</p>

<p>Then we can make the <em>“build”</em> task depend on this new <em>”copy”</em> task. <strong>The next time the developer runs <code>gradle build</code> the githook will be installed</strong>. And as a bonus:  the githook script is now versioned too! <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Here’s how this would look like (using <a href="https://github.com/gradle/kotlin-dsl">Kotlin DSL for Gradle</a>)</p>

<xmp class="kotlin-code" data-highlight-only>
tasks {
    "copy"(Copy::class) {
        from("src/main/kotlin/io/jivimberg/githook/pre-push.kts") {
            rename { it.removeSuffix(".kts") }
        }
        into(".git/hooks")
    }

    "build" {
        dependsOn("copy")
    }
}
</xmp>


<p>⚠️ Don’t forget to do <code>chmod u+x Pre-Push.kts</code> to make the script runnable, otherwise it won’t work.</p>

<h2>What about performance?</h2>

<p>Kotlin is a compiled language, so at some point your script will have to be compiled. Fortunately thanks to KScript <strong>this only happens the first time you run the script</strong> and it’s only compiled again if the script changes.</p>

<p>Other than that there’s the JVM startup time which adds <strong>around 200ms of overhead</strong>. Maybe in the future we’ll be able to use <a href="https://kotlinlang.org/docs/reference/native-overview.html">Kotlin Native</a> to compile to native binaries directly and avoid this overhead.</p>

<p>If you want to read more about performance comparison between <em>Python</em> and <em>Kotlin</em> scripts check the <a href="https://github.com/holgerbrandl/kscript#what-are-performance-and-resource-usage-difference-between-scripting-with-kotlin-and-python">KScript documentation</a>.</p>

<h2>Bonus track: testing</h2>

<p>Testing Kotlin scripts turned out <strong>not to be so straight forward.</strong></p>

<p><a href="https://proandroiddev.com/testing-kotlin-scripts-42bbbbe09ae5">This article</a> suggests using a <code>runCommand</code> method similar to the one described above to execute the script and check it’s outputs. Whereas <a href="https://github.com/holgerbrandl/kscript/blob/master/test/TestsReadme.md">KScript own tests</a> are written using <a href="https://github.com/lehmannro/assert.sh">assert.sh</a>.</p>

<p>Neither approach convinced me. I was just looking for a way of <strong>individually test the functions</strong> in my script <strong>using the same tools I use to test the other parts of my code</strong>.</p>

<p>So what I ended up doing was moving all the <em>Pre-Push</em> logic to a regular <code>*.kt</code> file. And then simply creating a <code>*kts</code> Kotlin script that calls my class using the <a href="https://github.com/holgerbrandl/kscript#ease-prototyping-with-include"><code>//INCLUDE</code> KScript directive</a>.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-07-04/testing-githook-kotlin.png" title="’Testing githook’" ></p>

<p>The downside is that I know have 2 files for my githook (a <code>*.kt</code> and a <code>*.kts</code>) but that seems <strong>a small price to pay for being able to easily test my code</strong>.</p>

<h1>Conclusion</h1>

<p>Writing githooks in Kotlin is possible and not that hard thanks to <a href="https://github.com/holgerbrandl/kscript">KScript</a>. <strong>You’ll be glad you have tried it out</strong> the next time you have to refactor that <em>pre-push</em> hook.</p>

<p>You can find an <strong>example repository</strong> containing all the code for this blogpost here: <a href="https://github.com/jivimberg/kotlin-githook">https://github.com/jivimberg/kotlin-githook</a></p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>because you want to verify only on the changes that are going to be pushed<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>And it can even be subject to the same quality standards enforced by the githook itself. INCEPTION!<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle, JPA and the Mystery of the String That Was Null]]></title>
    <link href="http://jivimberg.github.io/blog/2018/06/23/oracle-jpa-and-the-mistery-of-the-string-that-was-null/"/>
    <updated>2018-06-23T10:34:26-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/06/23/oracle-jpa-and-the-mistery-of-the-string-that-was-null</id>
    <content type="html"><![CDATA[<p>This is the story of how Oracle DB was messing up Kotlin’s type system, and what I did to fix it.</p>

<!--more-->


<h2>The setup</h2>

<p>Let’s start by <em>setting the stage</em>, for this particular project I was working with the following stack:</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-23/Stack.png" width="720" title="’Spring + Data + Kotlin + Oracle’" ></a></p>

<h2>The problem</h2>

<p>So I had modeled the following <strong>Entity</strong> leveraging Kotlin’s <a href="https://kotlinlang.org/docs/reference/data-classes.html">data classes</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<xmp class="kotlin-code" data-highlight-only>
import javax.persistence.Entity
import javax.persistence.Id

//sampleStart
@Entity
data class Person(
    val name: String,
    @Id val id: Long? = null
)
//sampleEnd
</xmp>


<p>Tests where passing with flying colors, but for some reason we were noticing that <strong>the <em>name</em> would sometimes come back as <code>null</code></strong> even thought it was typed as <code>String</code> and not <code>String?</code>.</p>

<h2>The analysis</h2>

<p>To make things more difficult there where other failures in the communication layer masking the real issue. But we finally figured out what was happening when we notice <strong>it was only reproducible under the following conditions</strong>:</p>

<ul>
<li>The property <code>name</code> was empty</li>
<li>Not reproducible on tests</li>
<li>Persisting to <em>OracleDB</em> (instead of embedded H2)</li>
</ul>


<p>That’s when I discovered:</p>

<blockquote><p>This is because Oracle internally changes empty string to NULL values. Oracle simply won't let insert an empty string.</p><footer><strong>Some guy on Stack Overflow</strong> <cite><a href='https://stackoverflow.com/a/13278879/1499171'>stackoverflow.com/a/13278879/&hellip;</a></cite></footer></blockquote>


<p>So when the data was mapped back to my <code>Person</code> object I ended up with a <code>null</code> value for <em>name</em>. This is probably only possible because <strong>Hibernate is using reflection to set the field value</strong> in runtime, thus breaking Kotlin’s <a href="https://kotlinlang.org/docs/reference/null-safety.html">null safety</a>.</p>

<h2>What I did about it</h2>

<p>The funny thing about this one is that <strong>there is not much you can do about it</strong>. <em>There is no magic configuration to tell Oracle how you want to handle empty strings.</em> Yes there are some hacks like changing <code>""</code> to <code>" "</code> but I’d rather invent a random <em>name</em> for the guy than persisting a whitespace.</p>

<p>The silver lining is that most of the time <strong>if you’re not allowing null values you probably don’t want an empty string either</strong>. Now YMMV but I know this was true for a person’s name.</p>

<p>In fact you might even want to <strong>implement a more strict validation</strong> so people can’t be named: “💩”.</p>

<h3>Testing</h3>

<p>First thing I did was to try to reproduce this using a test. But since I was using <code>@DataJpaTest</code> with H2 embedded DB empty strings where empty strings an nulls where nulls. So the issue was <strong>not reproducible</strong>.</p>

<p>That’s when I learned that you <strong>can tell H2 to behave like an Oracle DB</strong> using <a href="http://www.h2database.com/html/features.html">Oracle Compatibility mode</a>. To achieve this I added the following configuration to my <code>application.yml</code> under <code>test/resources</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring:
</span><span class='line'>  datasource:
</span><span class='line'>    url: jdbc:h2:mem:testdb;Mode=Oracle</span></code></pre></td></tr></table></div></figure>


<p>And annotated my test class with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="nl">SpringRunner:</span><span class="o">:</span><span class="n">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@DataJpaTest</span>
</span><span class='line'><span class="nd">@AutoConfigureTestDatabase</span><span class="o">(</span><span class="n">replace</span> <span class="o">=</span> <span class="n">AutoConfigureTestDatabase</span><span class="o">.</span><span class="na">Replace</span><span class="o">.</span><span class="na">NONE</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">FormRepositoryTest</span> <span class="o">{</span><span class="err">…</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <em>voilà</em>, now you have an <strong>H2 in memory DB dressed up as Oracle</strong>.</p>

<h3>Changing the schema</h3>

<p>The other thing I realized is that <strong>the schema allowed for <code>null</code> values</strong> on the <em>name</em> column. I’d been using <code>javax.persistence.schema-generation</code> as a starting point for my schema and <strong>I wrongly assumed</strong> it would take the hint from the Kotlin type system to prevent null values<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Instead I had to explicitly annotate my Entity:</p>

<xmp class="kotlin-code" data-highlight-only>
import javax.persistence.Entity
import javax.persistence.Id

//sampleStart
@Entity
data class Person(
    @Column(nullable = false) val name: String,
    @Id val id: Long? = null
)
//sampleEnd
</xmp>


<p>and manually change my existing schema</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CREATE</span> <span class="n">TABLE</span> <span class="nf">Person</span> <span class="o">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nf">NUMBER</span><span class="o">(</span><span class="mi">19</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="n">NOT</span> <span class="n">NULL</span><span class="o">,</span>
</span><span class='line'>  <span class="n">name</span> <span class="nf">VARCHAR2</span><span class="o">(</span><span class="mi">255</span> <span class="n">CHAR</span><span class="o">)</span> <span class="n">NOT</span> <span class="n">NULL</span><span class="o">,</span>
</span><span class='line'>  <span class="n">PRIMARY</span> <span class="nf">KEY</span> <span class="o">(</span><span class="n">id</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is that now if somebody tries to persist a Person with an empty name a <strong>big fat Exception is thrown</strong>. Or at least until I implement proper name validation.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If I had a dollar for every time I modeled a Person…<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It would be nice right?<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA Tips]]></title>
    <link href="http://jivimberg.github.io/blog/2018/06/10/intellij-idea-tips/"/>
    <updated>2018-06-10T17:11:52-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/06/10/intellij-idea-tips</id>
    <content type="html"><![CDATA[<p>Here are a couple of <strong>IntelliJ IDEA</strong> shortcuts and configurations I wish I’d known sooner.</p>

<!--more-->


<h2>1. Changing the default font</h2>

<p>The <strong>first</strong> thing I do every time I have to configure a new installation of IntelliJ is setting the theme to <em>Darcula</em>.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-10/Darcula.png" width="720" title="’Darcula theme’" ></a></p>

<p>The <strong>second</strong> thing I do is <strong>changing the font</strong> to <a href="https://github.com/tonsky/FiraCode">Fira Code</a>, and <strong>enabling font ligatures.</strong> Here’s how it looks like:</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-10/FiraCodeExample.png" width="720" title="’Fira code example’" ></a></p>

<p>You can enable this from <code>Settings</code> > <code>Editor</code> > <code>Font</code>. Make sure to check <code>Enable font ligatures</code> if you like that <code>≠</code> symbol.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-10/FiraCode.png" width="720" title="’Fira code setting’" ></a></p>

<h2>2. Auto-reformat</h2>

<p>If you’re one of those developers that is obsessively hitting <code>⌥⇧⌘L</code>  to get your code reformatted on every keystroke then <strong>I’m about to change your life</strong>.</p>

<p>First install the <strong><a href="https://plugins.jetbrains.com/plugin/7642-save-actions">Save actions</a></strong> plugin. Now open <code>Settings</code> > <code>Other settings</code> > <code>Save actions</code>, in there select:</p>

<ul>
<li><code>Activate save actions on save</code></li>
<li><code>Reformat file</code></li>
<li>And customize any other inspection and quick fix to your liking</li>
</ul>


<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-10/saveActions.png" width="720" title="’Save actions settings’" ></a></p>

<p>Now your can just spit your <em>ugly</em> code and <strong>it’ll get perfectly formatted on each save</strong>. <em>Nice uh?</em></p>

<h2>3. Extend selection</h2>

<p>This is not a configuration, but one of my <strong>favorite shortcuts</strong>. I learned this from a <a href="https://youtu.be/bFcaO1pXzws?t=20m13s">talk</a> by <a href="https://twitter.com/hhariri?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Hadi Hariri</a>.</p>

<p>What is it for? Paraphrasing the <a href="https://blog.jetbrains.com/idea/2013/05/30-days-with-intellij-idea-editor-basics/">IntelliJ blog</a>:</p>

<blockquote><p>Structural selection allows you to select expressions based on grammar. By pressing <code>⌥↑</code> you keep expanding your selection (starting from the caret). And vice versa, you can shrink it by pressing <code>⌥↓</code>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></blockquote>

<p>Here you can see it in action:</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-06-10/expandSelection.gif" title="’Expand and shrink selection animation’" ></a></p>

<p>Just mentioning this one because it was new to me at the time and nowadays I find myself using it <strong>all the time!</strong></p>

<h2>Have any IntelliJ tip to share? I’d love to know about it! <strong>Post a comment</strong> down here 👇</h2>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Had to update the key mappings in the quote because they were old in the original blog post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing takeWhileInclusive in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2018/06/02/implementing-takewhileinclusive-in-kotlin/"/>
    <updated>2018-06-02T13:33:38-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/06/02/implementing-takewhileinclusive-in-kotlin</id>
    <content type="html"><![CDATA[<p>Implementing <code>takeWhileInclusive</code> extension function in Kotlin.</p>

<!--more-->


<blockquote><p>TL,DR (aka <em>“just show me the code”</em> ): <a href="https://gist.github.com/jivimberg/ff5aad3f5c6315deb420fd508a145c61">https://gist.github.com/jivimberg/ff5aad3f5c6315deb420fd508a145c61</a></p></blockquote>

<p>You probably know about <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take-while.html"><code>takeWhile</code></a> operation that <strong>returns a List containing the first elements satisfying the given predicate.</strong></p>

<xmp class="kotlin-code">
fun main(args: Array<String>) {
//sampleStart
    val someNumbers = listOf(1, 5, 3, 22, 4, 8, 14, 23, 49, 77, 2, 49)
    println(someNumbers.takeWhile { it % 7 != 0 })
//sampleEnd
}
</xmp>


<p>I was in need of an <strong>inclusive</strong> version of the <code>takeWhile</code>. In other words I needed a function that returned the first elements satisfying the given predicate, <strong>plus the first element that didn’t satisfy it</strong>.</p>

<p>So in the provided example <code>takeWhile</code> returns <code>[1, 5, 3, 22, 4, 8]</code> whereas <code>takeWhileInclusive</code> would return <code>[1, 5, 3, 22, 4, 8, 14] </code> .</p>

<p>A quick search showed me I was not alone. <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take-while.html"><em>matklad</em></a> already had a simple implementation working for <code>Sequence</code>:</p>

<div><script src='https://gist.github.com/54776705250e3b375618f59a8247a237.js'></script>
<noscript><pre><code>fun &lt;T&gt; Sequence&lt;T&gt;.takeWhileInclusive(pred: (T) -&gt; Boolean): Sequence&lt;T&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = pred(it)
        result
    }
}
</code></pre></noscript></div>


<p>Using <strong>extension functions</strong> we are able to add a new function to the standard library type <code>Sequence</code>. If this is your first encounter with an extension function I’d encourage you to read more about them <a href="https://kotlinlang.org/docs/reference/extensions.html#extension-functions">here</a> and then play with them <a href="https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Extension%20functions/Task.kt">here</a>.</p>

<p>I found this implementation of <code>takeWhileInclusive</code> quite <strong>elegant</strong>. It uses the original <code>takeWhile</code> with the given predicated, but keeps a <code>shouldContinue</code> variable to delay the predicate evaluation by one step. In other words the evaluation of the predicate passed to <code>takeWhile</code> on element <em>i</em> will actually be the result of applying the predicate function on <em>i - 1</em>. Which if you think about it <em>is exactly what we need</em>. Let’s give it a try:</p>

<xmp class="kotlin-code">
fun <T> Sequence<T>.takeWhileInclusive(
        predicate: (T) -> Boolean
): Sequence<T> {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

fun main(args: Array<String>) {
//sampleStart
   val someNumbers = listOf(1, 5, 3, 22, 4, 8, 14, 23, 49, 77, 2, 49).asSequence()
   println(someNumbers.takeWhileInclusive { it % 7 != 0 }.toList())
//sampleEnd
}
</xmp>


<p>This was good! Only <a href="https://gist.github.com/matklad/54776705250e3b375618f59a8247a237#gistcomment-2093675">this comment</a> posted on the original gist made me doubt about the <em>safety</em> of this approach:</p>

<blockquote><p><em>“I love this. If Sequence were parallel, though, wouldn&rsquo;t there be worries about using out-of-closure state?”</em></p></blockquote>

<p>That send me down the rabbit hole and I spent some days reading about <code>parallelStreams</code> and <code>coroutines</code> until I convinced my self the approach was ok.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>With that out of the way I decided to port this solution to be supported in all the places where the <code>takeWhile</code> exists (including <code>String</code> and <code>CharArray</code>). So that <strong>we don’t have to convert to a from a Sequence just to use this function</strong>.</p>

<p>Here’s the end result, ready to be dropped on your project:</p>

<div><script src='https://gist.github.com/ff5aad3f5c6315deb420fd508a145c61.js'></script>
<noscript><pre><code>// kotlin.collections

inline fun &lt;T&gt; Array&lt;out T&gt;.takeWhileInclusive(
        predicate: (T) -&gt; Boolean
): List&lt;T&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun ByteArray.takeWhileInclusive(
        predicate: (Byte) -&gt; Boolean
): List&lt;Byte&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun ShortArray.takeWhileInclusive(
        predicate: (Short) -&gt; Boolean
): List&lt;Short&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun IntArray.takeWhileInclusive(
        predicate: (Int) -&gt; Boolean
): List&lt;Int&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun LongArray.takeWhileInclusive(
        predicate: (Long) -&gt; Boolean
): List&lt;Long&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun FloatArray.takeWhileInclusive(
        predicate: (Float) -&gt; Boolean
): List&lt;Float&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun DoubleArray.takeWhileInclusive(
        predicate: (Double) -&gt; Boolean
): List&lt;Double&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun BooleanArray.takeWhileInclusive(
        predicate: (Boolean) -&gt; Boolean
): List&lt;Boolean&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun CharArray.takeWhileInclusive(
        predicate: (Char) -&gt; Boolean
): List&lt;Char&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun &lt;T&gt; Iterable&lt;T&gt;.takeWhileInclusive(
        predicate: (T) -&gt; Boolean
): List&lt;T&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

// kotlin.sequences

fun &lt;T&gt; Sequence&lt;T&gt;.takeWhileInclusive(
        predicate: (T) -&gt; Boolean
): Sequence&lt;T&gt; {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

// kotlin.text

inline fun CharSequence.takeWhileInclusive(
        predicate: (Char) -&gt; Boolean
): CharSequence {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}

inline fun String.takeWhileInclusive(
        predicate: (Char) -&gt; Boolean
): String {
    var shouldContinue = true
    return takeWhile {
        val result = shouldContinue
        shouldContinue = predicate(it)
        result
    }
}</code></pre></noscript></div>


<p>Hope you find this useful!</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you want to read more about my discoveries, check this question at <a href="https://stackoverflow.com/q/50373754/1499171">StackOverflow</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recomendations: Migrating to Microservices Databases]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases/"/>
    <updated>2018-05-25T07:32:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/25/book-recomendations-migrating-to-microservices-databases</id>
    <content type="html"><![CDATA[<p>Just finished reading <em> Migrating to microservices databases</em> by <a href="https://twitter.com/yanaga">Edson Yanaga</a>. If you can relate to the 3 nouns in the title then you’ll want to check it out.</p>

<!--more-->


<blockquote><p>Code is easy; state is hard.</p>

<p>— <em>Edson Yanaga</em></p></blockquote>

<p>If you are on the journey of <strong>migrating your monolith to a micro-service architecture</strong> (like every other developer this days) then, at some point, you probably found yourself staring at a whiteboard full of rectangles and hexagons thinking: <em>where does the data fit in this mess?</em></p>

<p>Maybe you’ve read about the <a href="http://microservices.io/patterns/data/database-per-service.html">“Database per service”</a> pattern and now you’re wondering what your requirements are on <a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">data consistency</a>. Or somebody told you about <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> but you don’t know it’s advantages and disadvantages.</p>

<p><a href="https://developers.redhat.com/promotions/migrating-to-microservice-databases/"><img class="center" src="http://jivimberg.github.io/images/posts/2018-05-26/MigratingToMicroservicesDatabases.png" title="’Migrating to Micro-services databases book cover’" ></a></p>

<p>Edson’s book opens with a brief recap of the micro-service world. Going from <em>“Why microservices”</em> to <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a> and <a href="https://martinfowler.com/bliki/CanaryRelease.html">Canary deployment</a>, the book provides a <strong>super-quick explanation of each concept without going into many details.</strong></p>

<p>By contrast the second part of the book deeps dive into <strong>how to handle the data</strong> of your micro-services. <em>Chapter 3</em> explains how to do <strong>Zero downtime migration</strong> of your relational DB and which tools to use.</p>

<p>On <em>Chapter 4</em> Edson introduces the different <strong>consistency models</strong> and compares <strong>CRUD Vs. CQRS</strong> (explaining also <em>Event sourcing</em>)</p>

<p><strong>The last chapter is, to me, the best.</strong> <em>Chapter 5</em>  contains a recount and description of some of the different <strong>Integration Strategies</strong> we might want to consider when <em>migrating the monolith</em>. Each strategy is briefly described, and we are also provided with an assessment of <strong>applicability</strong> and section of <strong>considerations</strong> to keep in mind if using this strategy.</p>

<h2>Conclusion</h2>

<p>The hardest part of design is not knowing the architectural patterns or the different techniques to solve a problem, but <strong>knowing which solution is a good fit to which problem.</strong> Yanaga’s book serves as a good <strong>catalog of possible solutions</strong> to consider, when working with data on micro-services. It provides a concise analysis of each <strong>strategy</strong> and helps us avoid those  <em>”I wish I’ve thought this better before writing the code”</em> moments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Functional Routing]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/20/spring-functional-router/"/>
    <updated>2018-05-20T00:16:22-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/20/spring-functional-router</id>
    <content type="html"><![CDATA[<p>This post is about the clever tricks you can pull with Spring new <strong>functional routing</strong> and it’s Kotlin DSL.</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-05-19/trainSwitch.jpg" title="’Train switch’" ></p>

<p>Spring 5 introduced the <a href="https://spring.io/blog/2016/09/22/new-in-spring-5-functional-web-framework">Functional Web Framework</a> and with it the ability to do functional routing. Basically instead of annotating your methods with the good old <code>@RequestMapping</code> you can now write functions that go from a <code>Request</code> to a <code>Response&lt;T&gt;</code> (called <code>HandlerFunction&lt;T&gt;</code>). And then use a <code>RouterFunction&lt;T&gt;</code> to map which path will end up in which handler.</p>

<p>Now, for the sake of brevity, I won’t talk about all the benefits of this new functional paradigm. Instead I’d like to focus on <strong>some things that can be done with functional routing that were not possible before</strong>.</p>

<p>I have to admit that <strong>at first</strong> I wasn’t sold on the functional routing thing. Why would I want to replace <code>@RequestMapping</code> with 2 different functions? Isn’t that more code to achieve the same goal? For comparison this is how a <em>simple</em> RoutingFunction could look like<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<xmp class="kotlin-code" data-highlight-only>
    fun router() = router {
        accept(TEXT_HTML).nest {
            GET("/") { permanentRedirect(URI("index.html")).build() }
        }
        "/api".nest {
            accept(APPLICATION_JSON).nest {
                GET("/users", userHandler::findAll)
                POST("/users", userHandler::create)
            }
        }
        resources("/**", ClassPathResource("static/"))
    } 
</xmp>


<p>It’s readable but certainly not as succinct as <code>@GetMapping("/api/users")</code>. But <strong>this terseness comes at the price of expressiveness</strong>. Or as <a href="https://spring.io/blog/2016/09/22/new-in-spring-5-functional-web-framework">this article on Spring.io</a> puts it:</p>

<blockquote><p>The <code>RouterFunction</code> has a similar purpose as a <code>@RequestMapping</code> annotation. However, there is an important distinction: with the annotation <strong>your route is limited to what can be expressed through the annotation values</strong>.</p></blockquote>

<h2>Complex routing</h2>

<p>I’ll use an example to illustrate some of the things that can be achieved with complex routing. Say I have some data modeling a <em>résumé</em> that contains multiple <em>sections</em>. <strong>I want to expose each of this sections as a different REST endpoint</strong>. Underneath we need to handle each call the same way, the only difference is that we’d be processing a different <em>section</em> of data. We could do the routing like this:</p>

<xmp class="kotlin-code" data-highlight-only>
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.core.io.ClassPathResource
import org.springframework.http.MediaType
import org.springframework.web.reactive.function.server.RouterFunctions.resources
import org.springframework.web.reactive.function.server.router

//sampleStart
    enum class Section(val fieldName: String) {
    PERSONAL_INFO("personalInfo"),
    EXPERIENCE("experience"),
    SIDE_PROJECTS("sideProject"),
    EDUCATION("education"),
}

@Configuration
class Routing {
    @Bean
    fun resumeRouter(handler: ResumeHandler) = router {
        accept(MediaType.APPLICATION_JSON).nest {
            Section.values().forEach {
                GET("/${it.fieldName}", handler.getSectionHandler(it))
            }
        }
    }
}
//sampleEnd

@Component
class ResumeHandler {
fun getSectionHandler(section: Section): (ServerRequest) -\> Mono<ServerResponse> =
            { // get section from data and return response }
}
</xmp>


<p>We can iterate through the enum and create a new mapping for each of the sections with the <code>GET</code> function. Furthermore the function <code>getSectionHandler</code> can receive the enum as parameter and use it for handling the response instead of having to rely only on the <code>ServerRequest</code> context.</p>

<p>Now this is only one of the <em>tricks</em> that can be done with functional routing. Having a <a href="https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way#functional-routing-with-the-kotlin-dsl-for-spring-webflux">Kotlin DSL</a> means we can do <strong>any kind of scripting we can think of</strong> when defining the routes. As always:</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-05-19/withGreatPower.png" title="’With great power comes great responsibility’" ></p>

<p>Abusing this feature would make your routing logic a <strong>tangled mess</strong>, too hard to understand and maintain. So be smart about it.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Source: [kotlin-swagger-spring-functional-template][2]<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Map in Java (From Kotlin)]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/07/parallel-map-in-java/"/>
    <updated>2018-05-07T13:19:58-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/07/parallel-map-in-java</id>
    <content type="html"><![CDATA[<p>Following up of my <a href="http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/">previous post</a>, I was curious how a parallel map operation would look like using Java’s <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--"><code>parallelStream</code></a>. Here’s what I find out.</p>

<!--more-->


<p>In Java to use <code>map</code> you do:</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors

//sampleStart
fun main(args: Array<String>) {
    val output = (1..100).toList()
            .stream()
            .map { it * 2 }
            .collect(Collectors.toList())
    println(output)
}
//sampleEnd
</xmp>


<p><em>(In case you’re wondering I’m using Java collections from Kotlin)</em></p>

<p>And to do a <em>parallel</em> <code>map</code> you can simply do:</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors

//sampleStart
fun main(args: Array<String>) {
    val output = (1..100).toList()
            .parallelStream()
            .map { it * 2 }
            .collect(Collectors.toList())
    println(output)
}
//sampleEnd
</xmp>


<p>No need to write a special <code>pmap</code> operation like we did for Kotlin. Just call <code>parallelStream</code> and that’s it. <em>Pretty cool, right?</em></p>

<p>I was curious about how this solution <strong>compared to the one on <a href="http://jivimberg.io/blog/2018/05/04/parallel-map-in-kotlin/">my previous post</a></strong>,  so I decided to time it too.</p>

<xmp class="kotlin-code">
import java.util.stream.Collectors
import kotlin.system.measureTimeMillis

//sampleStart
fun main(args: Array<String>) {
    val time = measureTimeMillis {
        val output = (1..100).toList()
                .parallelStream()
                .map {
                    Thread.sleep(100)
                    it * 2
                }
                .collect(Collectors.toList())

        println(output)
    }

    println("Total time: $time")
}
//sampleEnd
</xmp>


<p>In this case instead I’m actually setting a delay of <strong>100 milliseconds</strong> (instead of <em>1,000</em> like I did on my previous post)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I was expecting the total time to be something close to <em>100 milliseconds</em>, just like it was for the Kotlin <code>pmap</code>, <strong>instead I got something close to 5,000</strong>.</p>

<p>Turns out <code>parallelStream</code> uses the default <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"><em>ForkJoinPool.commonPool</em></a> which by default has a parallelism level <strong>equal to the number of available processors.</strong> In this case 2 processors: <em>100 operations * 100 milliseconds / 2 processors = 5000 milliseconds</em>. You can check the number of available processors simply by adding this line to the script:</p>

<p><code>println(Runtime.getRuntime().availableProcessors())</code></p>

<h2>But, I want more parallelism!</h2>

<p>What if we want to increase the parallelism level? There are <em>2 ways to achieve this.</em></p>

<p><em>The first one</em> is to make our code <strong>run in a custom thread pool</strong> of our choice. Unfortunately Java doesn’t make it easy to provide a custom thread pool, but <a href="http://www.baeldung.com/java-8-parallel-streams-custom-threadpool">the workaround is not so bad either</a>.</p>

<p><em>The other option</em> is to change the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html"><em>ForkJoinPool.commonPool</em></a> parallelism level by system property like this:</p>

<p><code>System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "10")</code></p>

<p>Unfortunately this doesn’t work on Kotlin Playground so you’ll have to try it on your own machine or take my word that it works.</p>

<p>It’s worth noting that with the second approach you’d still be using the same default thread pool <strong>shared globally across the app</strong>. As you can imagine this can be <strong>EXTREMELY BAD</strong> as you’d be basically depleting resources for the whole application. Some would even argue <a href="https://zeroturnaround.com/rebellabs/java-parallel-streams-are-bad-for-your-health/">this is reason enough not to use <code>parallelStream</code> at all</a>. Although that seems a little extreme if you ask me.</p>

<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Otherwise the execution takes too long and doesn’t complete. Probably a limitation of Kotlin Playground<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallel Map in Kotlin]]></title>
    <link href="http://jivimberg.github.io/blog/2018/05/04/parallel-map-in-kotlin/"/>
    <updated>2018-05-04T16:32:00-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/05/04/parallel-map-in-kotlin</id>
    <content type="html"><![CDATA[<p>Ever wonder how to run <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a>  in parallel using coroutines? This is how you do it.</p>

<!--more-->




<xmp class="kotlin-code" data-highlight-only>
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking

//sampleStart
fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleEnd
</xmp>


<p><em>Confused?</em> Let’s unpack it.</p>

<p>First we have the <strong>function signature</strong> which is pretty similar to the actual <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html"><code>map</code></a> extension function signature on <code>Iterable</code>. The only thing we added was the <code>suspend</code> keyword on the parameter, which let’s us use <code>suspend</code> functions in <code>f</code> (as we’re going to see in a moment).</p>

<p>Then we have the <code>runBlocking</code> which let’s us bridge the blocking code with the coroutine world. As the name suggests <strong>this will block the current thread until everything inside the block finishes executing</strong>. Which is exactly what we want.</p>

<p>Finally we have the actual execution which is divided in 2 steps. The <em>first step</em> <strong>launches a new coroutine for each function application</strong> using <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/async.html"><code>async</code></a>. This effectively wraps the type of each element with  <code>Deferred</code>. In the <em>second step</em> we wait for all function applications to complete and unwrap the result with <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental/-deferred/await.html"><code>await</code></a>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h2>How to use it</h2>

<p>Easy! <strong>Just like you use <code>map</code></strong>:</p>

<xmp class="kotlin-code">
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking

fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleStart
fun main(args: Array<String>) {
    println((1..100).pmap { it * 2 })
}
//sampleEnd
</xmp>


<p>(Psst! I’m using <a href="https://blog.jetbrains.com/kotlin/2018/04/embedding-kotlin-playground/">Kotlin Playground</a> so you can actually run this code!)</p>

<h2>Prove that it’s running in parallel</h2>

<p>Ok so let’s resort to the good old <code>delay</code> to prove that this is actually running in parallel. We are going to add a <strong>delay of 1 second</strong> on each multiplication and measure the time it takes to run.</p>

<p>Running over <em>100 elements</em> the result should be: <strong>close to 1,000 milliseconds if it’s running in parallel</strong> and close to <em>100,000 milliseconds if it’s running sequentially</em>.</p>

<xmp class="kotlin-code">
import kotlinx.coroutines.experimental.async
import kotlinx.coroutines.experimental.runBlocking
import kotlin.system.measureTimeMillis
import kotlinx.coroutines.experimental.delay

fun <A, B>Iterable<A>.pmap(f: suspend (A) -> B): List<B> = runBlocking {
    map { async { f(it) } }.map { it.await() }
}
//sampleStart
fun main(args: Array<String>) {
    val time = measureTimeMillis {
        val output = (1..100).pmap {
            delay(1000)
            it * 2
        }

        println(output)
    }

    println("Total time: $time")
}
//sampleEnd
</xmp>




<script src="https://unpkg.com/kotlin-playground@1" data-selector=".kotlin-code"></script>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Since I’m not explicitly passing any  <code>CoroutineContext</code> the <code>DefaultDispatcher</code> will be used. <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendations: Isomorphic JavaScript Web Development]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/30/book-recommendations-isomorphic-javascript-web-development/"/>
    <updated>2018-04-30T07:15:04-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/30/book-recommendations-isomorphic-javascript-web-development</id>
    <content type="html"><![CDATA[<p>I finally got around to finish the new book my friend and colleague <a href="http://tomasalabes.me/">@talabes</a> wrote and I think it’s great. Here’s why.</p>

<!--more-->


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-04-30/ketchup2.png" width="250" title="’Mr Burns ketchup catsup’" ></p>

<p>☝That’s me every single time I try to start a <em>simple</em> web project. If you are like me, not a full-time front-end developer, you probably know what I’m talking about (if not check <strong><a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">this article</a></strong> and try not to choke on your cereal laughing).</p>

<p>I found <a href="https://read.amazon.com/kp/embed?asin=B01DWFRFVG&amp;preview=newtab&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_atY5Ab9H5Y5ZH">Tomas’ book</a> to be the perfect cure against <a href="https://xkcd.com/1801/">decision paralysis</a> in the world of JavaScript web development. His approach is practical and concise:</p>

<blockquote><p><em>“Here’s the <strong>stack</strong> we are using. This is how you <strong>set it up</strong> and this is a <strong>basic example</strong> of what we’re trying to achieve. If you want to go deeper go and read this.”<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></em></p></blockquote>

<p>From <strong>testing</strong> and <strong>bundling</strong> to <strong>routing</strong> and <strong>security</strong> this book goes through all the topics a developer needs to know, with easy-to-follow examples and useful tips <em>”from-the trenches”</em>. It serves as a <strong>comprehensive guide</strong>, covering all the things we need to consider to get our application up and running.</p>

<p>Finally, I love that the book answers <strong>common questions</strong> that sometimes other introductory material gloss over. Things like: <em>”how do I structure my project?”</em> or <em>”how can I troubleshoot and debug this thing?”</em>.</p>

<p>Curious? Take a quick look:</p>

<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen style="margin: auto; display: block; max-width:100%" src="https://read.amazon.com/kp/card?asin=B01DWFRFVG&preview=inline&linkCode=kpe&ref_=cm_sw_r_kb_dp_atY5Ab9H5Y5ZH" ></iframe>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I’m not actually quoting Tomas, of course<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jacoco & Gradle - How to Verify Coverage With Exclusions]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/26/gradle-verify-coverage-with-exclusions/"/>
    <updated>2018-04-26T08:49:52-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/26/gradle-verify-coverage-with-exclusions</id>
    <content type="html"><![CDATA[<p>A post about how to add exclusions to your Jacoco test coverage verification in Gradle.</p>

<!--more-->


<p>This is how you setup Jacoco to fail when the code doesn’t meet the expected coverage threshold:</p>

<div><script src='https://gist.github.com/ea79614ce9b80c29b03be8326586f238.js'></script>
<noscript><pre><code>apply plugin: &quot;jacoco”

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.79
            }
        }
    }
}


// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification  </code></pre></noscript></div>


<p>See that <code>rule</code>?  I’m not setting any particular <code>element</code> so <a href="https://docs.gradle.org/current/javadoc/org/gradle/testing/jacoco/tasks/rules/JacocoViolationRule.html#getElement--">by default it’ll set <em>BUNDLE</em></a>. <strong>This is just what I want as I’d like to set a threshold for the coverage of the entire module.</strong></p>

<p>So if I need to exclude certain <strong>packages</strong> or <strong>files</strong> from the count this is what I do:</p>

<div><script src='https://gist.github.com/3ee0beaa9ab8b20b48e4273378dcd30e.js'></script>
<noscript><pre><code>jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    &#39;com/example/my/package/*&#39;,
                    &#39;com/example/service/MyApplication.kt&#39;,
                    &#39;com/google/protobuf/*&#39;
            ])
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 0.79
            }
        }
    }
}</code></pre></noscript></div>


<h3>Why <em>exclude</em> doesn’t work</h3>

<p>My first approach was setting the <code>excludes</code> property on the rule like this:</p>

<div><script src='https://gist.github.com/0962942885d4db41a9dad890aba5d225.js'></script>
<noscript><pre><code>jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    &#39;com/example/my/package/*&#39;,
                    &#39;com/example/service/MyApplication.kt&#39;,
                    &#39;com/google/protobuf/*&#39;
            ]
            limit {
                minimum = 0.79
            }
        }
    }
}</code></pre></noscript></div>


<p>The reason this doesn’t work is that <code>excludes</code> works on objects of the type defined with the <code>element</code> property. In this case the type is <em>BUNDLE</em> whereas the thing we want to exclude are <strong>packages</strong> and <strong>files</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Channels in Kotlin - an Example]]></title>
    <link href="http://jivimberg.github.io/blog/2018/04/23/go-channels-in-kotlin-an-example/"/>
    <updated>2018-04-23T08:37:13-07:00</updated>
    <id>http://jivimberg.github.io/blog/2018/04/23/go-channels-in-kotlin-an-example</id>
    <content type="html"><![CDATA[<p>This is the story of a real use case that was solved by using <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#channels">Go style channels in Kotlin</a>.</p>

<!--more-->


<h2>The use case</h2>

<p>At work we have this CI/CD pipeline to get our code into production, and we needed a way of visualizing the Merge Requests that currently in the pipeline.</p>

<p>To make this happen we have 2 things:</p>

<ul>
<li>The GitLab service, accessible through <a href="https://docs.gitlab.com/ee/api">REST</a></li>
<li>The commit SHA of the last Merge Request that went into production</li>
</ul>


<p><img class="center" src="http://jivimberg.github.io/images/posts/2018-04-24/useCase.png" title="‘Use Case’" ></p>

<p>Now the problem is that <a href="https://docs.gitlab.com/ee/api/merge_requests.html">Merge Request endpoint</a> doesn’t allow for this kind of query. You can only search Merge Requests by <em>title</em> or <em>description</em> which is not what we want. So our only option is to get the latest Merge Requests up until we see the one that is in production.</p>

<p>The REST endpoint is paginated, and by default each response will contain 20 items. But what happens if the Merge Request we are looking for is not in those first 20 elements? <strong>We’ll need to keep making requests for new pages until we find the item we’re interested in</strong>. It’s not the most elegant solution but we’ll have to make do with what we have.</p>

<h2>Our first approach: imperative</h2>

<p>Our first try of putting that last paragraph into code looked something like this:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ImperativeApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequests(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    var page = 1
    var mergeRequests = emptyList&lt;MergeRequest&gt;()
    
    // Fetch pages until we have the one that contains the commit we are looking for 
    while (mergeRequests.none { it.commitSha == lastProductionSha }) {
        mergeRequests += gitLabService.fetchMergeRequests(page++)
    }

    // Trim the Merge Requests that are already in production
    val indexOfLastMergeRequestInProduction = mergeRequests.indexOfLast { it.commitSha == lastProductionSha }
    return mergeRequests.subList(0, indexOfLastMergeRequestInProduction)
}</code></pre></noscript></div>


<p>Not pretty, but it does the job.</p>

<p>The next attempt we made was implementing it as an <code>Iterable</code>. And it was even uglier! Believe me, you don’t even want to see that one. Your retina might burn just from looking at the <a href="https://gist.github.com/jivimberg/862c4ee1c72603a224d57b30eedf74fc#file-iterableapproach-kt">code…</a></p>

<h2>Using <em>buildSequence</em></h2>

<p>We kept looking for a way of making the code cleaner, so we decide to try using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/build-sequence.html"><code>buildSequence</code></a>. It seemed like a good idea because a sequence can be thought as an <code>Iterator</code> where the values are evaluated lazily. So potentially <code>Sequences</code> can be infinite.</p>

<p>To make use of this feature we needed to add the <a href="https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core">kotlinx-coroutines-core</a>
 to our project. Anyway, this is how the code looked like:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=SequenceApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsSequence(gitLabService: GitLabService, lastProductionSha: String): List&lt;MergeRequest&gt; {
    val mrSequence = buildSequence {
        var page = 1
        while (true) yieldAll(gitLabService.fetchMergeRequests(page++))
    }

    return mrSequence
            .takeWhile { it.commitSha != lastProductionSha }
            .toList()
}</code></pre></noscript></div>


<p>Let’s unpack it:</p>

<ol>
<li>First we have the sequence declaration. We call the build sequence function which receives a <em>lambda with receiver</em>: <code>SequenceBuilder&lt;T&gt;.() -&gt; Unit</code>. This allows us to call the methods <code>yield</code> and <code>yieldAll</code> once we have calculated the values to be produced on this sequence. We use <code>yieldAll</code> in this case because we receive a Collection of values from the REST call, otherwise the type of the sequence would be: <code>Sequence&lt;List&lt;MergeReques&gt;&gt;</code> whereas we only need <code>Sequence&lt;MergeRequest&gt;</code></li>
<li>We use <code>takeWhile { ... }</code> to only get the Merge Requests that are <strong>not</strong> in production.</li>
<li>We convert the sequence to a List and return</li>
</ol>


<p>You might be thinking <strong>”Ok but, why is this better than the imperative approach?”</strong></p>

<p>For starters this code is easier to read. This alone is reason enough in my book, as the quote goes:</p>

<blockquote><p><em>”Any fool can write code that a computer can understand. <strong>Good programmers write code that humans can understand.</strong>”</em></p>

<p>Martin Fowler</p></blockquote>

<p>As a bonus by using a <code>Sequence</code> we get some extra flexibility. In the imperative approach the condition is right in the middle of the function. Using sequences we could easily have a function that generates the sequence and then write other functions that use it, leveraging all the awesome collection functions (<code>filter</code>, <code>find</code>, <code>take</code>, <code>drop</code>, etc).</p>

<p>It is important to note that when using sequences the evaluation is lazy (just like Java streams). In our case that means that <code>takeWhile</code> will only start once we call the <code>toList</code> function, because <code>toList</code> is a <em>terminal</em> operation.</p>

<p>So are we using coroutines now? <strong>YES!</strong> But… <code>buildSequence</code> is coroutine builder that creates a <em>synchronous coroutine</em>. This means that even thought it uses coroutines everything is executed sequentially.</p>

<h2>Using channels</h2>

<p>Finally we decided to go all in on coroutines by using channels. This is the result:</p>

<div><script src='https://gist.github.com/862c4ee1c72603a224d57b30eedf74fc.js?file=ChannelApproach.kt'></script>
<noscript><pre><code>fun fetchMergeRequestsChannel(gitLabService: GitLabService, lastProductionSha: String): ReceiveChannel&lt;MergeRequest&gt; {
    return produce {
        var page = 1
        while (true) {
            gitLabService.delayedFetchMergeRequests(page++).forEach { send(it) }
        }
    }.takeWhile { it.commitSha != lastProductionSha }
}

fun main(args: Array&lt;String&gt;) {
    val mrs = fetchMergeRequestsChannel(GitLabService(), &quot;04d78f5c7cd51c52d0482d08224ff6a214da12c1&quot;)

    runBlocking {
        delay(10, TimeUnit.SECONDS)
        mrs.consumeEach {
            println(&quot;consuming $it&quot;)
        }
    }
}</code></pre></noscript></div>


<p>Now we have a function that creates a channel, and we are using <code>consumeEach</code>  to receive each of the elements the channel sends. Since <code>consumeEach</code> is a suspending function <strong>we have to call it from a coroutine context</strong>, <code>runBlocking</code> helps us bridge the gap between blocking execution and the coroutines world.</p>

<p>With <code>ReceiveChannel</code> we have the flexibility of <code>Sequences</code>, but we also get one more thing: <strong>concurrency!</strong>. You can see that I’ve added an artificial <code>delay</code> call before beginning to consume the Merge Requests. This is to show that <strong>even before the receiver is ready to consume the channel, the producer has already started to fetch elements</strong>. In this case since we’re using an <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md#buffered-channels"><em>unbuffered channel</em></a> only one send will be called before suspending the coroutine. But that’s all we need since in our case sending 1 element means that we’ve already fetched the whole first page!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Stumbled With Knockout's Computed Observables]]></title>
    <link href="http://jivimberg.github.io/blog/2016/05/01/how-i-stumbled-with-knockouts-computed-observables/"/>
    <updated>2016-05-01T15:01:16-07:00</updated>
    <id>http://jivimberg.github.io/blog/2016/05/01/how-i-stumbled-with-knockouts-computed-observables</id>
    <content type="html"><![CDATA[<p>The first thing you learn about Knockout is about <a href="http://knockoutjs.com/documentation/observables.html">observables</a>. The second thing is <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a>. They are dead simple. They even form part of the <a href="http://knockoutjs.com/examples/helloWorld.html">Hello World example</a>. But then, the magic was not working for me. Here&rsquo;s why:</p>

<!--more-->


<p>In a nutshell <strong>computed observables</strong> are functions that are dependent on one or more other observables, and that will automatically update whenever any of these dependencies change.</p>

<script async src="//jsfiddle.net/rniemeyer/LkqTU/embed/js,html,css,result/dark/"></script>


<p>On my usecase I wanted the computed to updated only if certain condition was met. So I used a variable and a good old if.</p>

<script async src="//jsfiddle.net/jivimberg/uza8ds21/embed/js,html,css,result/dark/"></script>


<p>I also added a toggle function to be able to change the value of the <code>bindingActive</code> variable from the UI. So the <code>fullName</code> should get updated once I toggle the boolean variable. <strong>Guess what? it doesn&rsquo;t!</strong></p>

<p>Go ahead, give it a try. Turn on the toggle using the link and you&rsquo;ll notice that the message does not appear as it did on the Hello World example.</p>

<p>I spent half a day looking for an answer of what I was doing wrong. Until I decided to do what I should&rsquo;ve done in the first place. Instead of regarding some new technology as magic, I went ahead and read the documentation to actually understand how it works.</p>

<p>So here&rsquo;s how the <a href="http://knockoutjs.com/documentation/computed-dependency-tracking.html">dependency tracking algorithm</a> works according to KO documentation:</p>

<blockquote><ol>
<li>Whenever you declare a computed observable, KO immediately invokes its evaluator function to get its initial value.</li>
<li>While the evaluator function is running, KO sets up a subscription to any observables (including other computed observables) that the evaluator reads. The subscription callback is set to cause the evaluator to run again, looping the whole process back to step 1 (disposing of any old subscriptions that no longer apply).</li>
<li>KO notifies any subscribers about the new value of your computed observable.</li>
</ol>
</blockquote>

<p>Notice what&rsquo;s going on? Since <code>bindingActive</code> initial value is <em>false</em> the tracking algorithm does not see the observables on it&rsquo;s first past. Therefore the <strong>computed observable is not suscribed to update when any of the observables change!</strong></p>

<h3>How can we fix this?</h3>

<p>Well a simple solution would be to define the toggle as an observable too. That way the computed observable suscribes to the toggle var observable and it gets recomputed when the variable changes.</p>

<p>Note that afterwards the step 2 of the tracking algorithm is designed to recognized the new observables that it missed the first time. That&rsquo;s quite nice! Only in our case since no observable was seen at all the computed observable was never updated.</p>

<p>Here&rsquo;s how such solution would look like:</p>

<script async src="//jsfiddle.net/jivimberg/ymucehk2/embed/js,html,css,result/dark/"></script>


<p>Another way of solving this issue would be to call the observables for <code>firstName</code> and <code>lastName</code> outside the if. That works too, but I like the other approach better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using PowerMock + TestNG to Mock a Static Class]]></title>
    <link href="http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class/"/>
    <updated>2016-04-03T08:38:47-07:00</updated>
    <id>http://jivimberg.github.io/blog/2016/04/03/using-powermock-plus-testng-to-mock-a-static-class</id>
    <content type="html"><![CDATA[<p>￼
This week I needed to test a class that depended on a method from an static class. I saw we were using <a href="https://github.com/jayway/powermock" title="PowerMock">PowerMock</a> and thought to myself: <em>“Well this sounds pretty common, I bet it’s easy to accomplish”</em>. But of course I ran into half a dozen issues before I was able to make it work. Here’s my two cents to make your experience easier than mine.</p>

<!--more-->


<h2>Setup</h2>

<p>Let’s start with the ingredients. To mock static methods you’ll need a couple of libraries:</p>

<ul>
<li><a href="http://easymock.org/">EasyMock</a> for the mocking<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li><a href="https://github.com/jayway/powermock">PowerMock</a></li>
<li><a href="http://testng.org/">TestNG</a> for the test</li>
</ul>


<p>When choosing your library version you’ll need to make sure <strong>PowerMock</strong> and <strong>TestNG</strong> versions are compatible. You can do so by comparing your versions with the ones specified <a href="https://github.com/jayway/powermock/wiki/TestNG_usage">here</a>.</p>

<p>Also, if you’re not using <strong>Maven</strong> to include PowerMock in your project make sure you also add it’s dependencies. You’ll find a zip file containing everything you need <a href="https://github.com/jayway/powermock/wiki/GettingStarted">here</a>.</p>

<h2>Writing the test</h2>

<p>To have the test working you’ll need to do 3 things:</p>

<ol>
<li>Configure <strong>TestNG</strong> to use the PowerMock object factory</li>
<li>Use <code>@PrepareForTest</code> annotation to prepare the static class</li>
<li><strong>Mock</strong> the static class method</li>
<li><strong>Write the rest</strong> of the test</li>
</ol>


<p>Let’s go one by one:</p>

<h4>1. Configure TestNG to use the PowerMock object factory</h4>

<p>There are a bunch of ways of doing this, namely:</p>

<ul>
<li>Configure it on the <code>suite.xml</code> file</li>
<li>Extending your test class with <code>PowerMockTestCase</code></li>
<li>Or by adding a method like this to your test</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ObjectFactory</span>
</span><span class='line'><span class="kd">public</span> <span class="n">IObjectFactory</span> <span class="nf">getObjectFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">powermock</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">PowerMockObjectFactory</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I choose to go with the latter because I don’t use the <code>suite.xml</code> file and adding an annotated method is less restrictive than extending a class. But feel free to use whatever works for you.</p>

<h4>2. @PrepareForTest</h4>

<p>You’ll need to prepare your static class for mocking. You can do so with the <code>@PrepareForTest</code> annotation like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can pass an array of classes to the annotation if you need to prepare multiple classes.</p>

<h4>3. Mocking</h4>

<p>Now you’re ready to mock the static method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// mocking static method</span>
</span><span class='line'>  <span class="n">PowerMock</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">EasyMock</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">()).</span><span class="na">andReturn</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="o">)).</span><span class="na">anyTimes</span><span class="o">();</span>
</span><span class='line'>  <span class="n">PowerMock</span><span class="o">.</span><span class="na">replay</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. Writing the rest</h4>

<p>Ok let’s put everything together and write the rest of the test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@ObjectFactory</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">IObjectFactory</span> <span class="nf">getObjectFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">powermock</span><span class="o">.</span><span class="na">modules</span><span class="o">.</span><span class="na">testng</span><span class="o">.</span><span class="na">PowerMockObjectFactory</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// mocking static method</span>
</span><span class='line'>      <span class="n">PowerMock</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">EasyMock</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">()).</span><span class="na">andReturn</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="o">)).</span><span class="na">anyTimes</span><span class="o">();</span>
</span><span class='line'>      <span class="n">PowerMock</span><span class="o">.</span><span class="na">replay</span><span class="o">(</span><span class="n">StaticHelper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// test</span>
</span><span class='line'>      <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span> <span class="err">”</span> <span class="n">StaticHelper</span><span class="o">.</span><span class="na">doSomething</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course this is an oversimplified example. The cool thing about mocking static methods is that <strong>the static call you may need to mock may be hidden under several layers of abstraction</strong>. Using this approach you are able to mock the static call and test your classes without changing a single line of production code.</p>

<h2>Some things to watch out for</h2>

<p>There are a few things to keep in mind when initializing the mock:</p>

<ol>
<li>You cannot create mocks during <strong>field initialization</strong>.</li>
<li>You cannot create mocks inside <strong>before static methods</strong>.</li>
</ol>


<p>Finally I also run into the following error when running my test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">VerifyError</span><span class="o">:</span> <span class="n">Expecting</span> <span class="n">a</span> <span class="n">stackmap</span> <span class="n">frame</span> <span class="n">at</span> <span class="n">branch</span> <span class="n">target</span> <span class="mi">71</span> <span class="n">in</span> <span class="n">method</span> <span class="n">com</span><span class="o">.</span><span class="na">abc</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">myPackage</span><span class="o">.</span><span class="na">MyClass$JaxbAccessorM_getDescription_setDescription_java_lang_String</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;)</span><span class="n">Ljava</span><span class="o">/</span><span class="n">lang</span><span class="o">/</span><span class="n">Object</span><span class="o">;</span> <span class="n">at</span> <span class="n">offset</span> <span class="mi">20</span><span class="n">_</span>
</span></code></pre></td></tr></table></div></figure>


<p>Turns out that, as explained <a href="http://stackoverflow.com/questions/15122890/java-lang-verifyerror-expecting-a-stackmap-frame-at-branch-target-jdk-1-7">here</a> Java 7 introduced a stricter verification and changed the class format. The byte code generation library PowerMock uses is generating code that does not comply with the new verification. But worry not, <strong>this validation can be disabled</strong> by passing <code>-noverify</code> as argument to the JVM.</p>

<p>If you&rsquo;re running you&rsquo;re using Maven to run your tests remember to add the argument to your plugin configuration.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This guide uses <strong>EasyMock</strong> but you can also use <strong>Mockito</strong><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be a Leader (HTWFAIP - Part 4)]]></title>
    <link href="http://jivimberg.github.io/blog/2015/06/15/be-a-leader-htwfaip-part-4/"/>
    <updated>2015-06-15T07:37:31-07:00</updated>
    <id>http://jivimberg.github.io/blog/2015/06/15/be-a-leader-htwfaip-part-4</id>
    <content type="html"><![CDATA[<p>Last installment of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a>. 9 Tips to become the leader you&rsquo;d like to follow.</p>

<!-- more -->


<h3>Begin with praise and honest appreciation</h3>

<p>It is always easier to listen to unpleasant things after we have heard some praise of our good points. This is also sometimes refered as the <a href="http://lifehacker.com/297247/give-constructive-criticism">&ldquo;sandwich rule&rdquo;</a>.</p>

<p><img class="center" src="http://jivimberg.github.io/images/posts/2015-06-15/SandwichRule.jpg" width="250" title="'Sandwich Rule'" ></p>

<h3>How to Criticize: Call attention to people’s mistakes indirectly</h3>

<p>Change the word &lsquo;but&rsquo; to &lsquo;and&rsquo;. For example: a man carefully polished a sermon and showed it to his wife, instead of talking about its many faults, she said she thought it would be a great article for some journal. Be subtle about criticism.</p>

<h3>Talk about your own mistakes before criticizing</h3>

<p>In order to build rapport with the person you are criticising, start by talking about your own mistakes. You can use phrases like: &ldquo;When I was your age, I too struggled with&hellip;&rdquo; or &ldquo;When I was at your level of experience, I too thought that&hellip;&rdquo;.</p>

<h3>Ask questions instead of giving direct orders</h3>

<p>Gave suggestions, not orders. Let people do things for themselves and make their own mistakes. Asking questions not only makes an order more palatable; it often stimulates the creativity of the persons whom you ask. <strong>People are more likely to accept an order if they have had a part in the decision that caused the order to be issued.</strong></p>

<h3>Let the other person save face</h3>

<p>A few minutes’ thought, a considerate word or two, or a genuine understanding of the other person’s attitude can go a long way to alleviating the sting of criticism. Antoine de Saint-Exupery once said: <em>“I have no right to say or do anything that diminishes a man in his own eyes. What matters is not what I think of him, but what he thinks of himself. Hurting a man in his dignity is a crime.”</em></p>

<h3>Praise every improvement, no matter how slight</h3>

<p>Take every chance you&rsquo;ve got to sincerly praise someone. Everybody likes to be praised, but when praise is specific, it comes across as sincere – not something the other person may be saying just to make one feel good. <strong>Nobody wants flattery!</strong></p>

<h3>Give the person a fine reputation to live up to</h3>

<p>In short, if you want to improve a person in a certain respect, act as though that particular trait were already one of his or her outstanding characteristics. Give them a fine reputation to live up to, and they will make prodigious efforts rather than see you disillusioned.</p>

<h3>Make a fault seem easy to correct</h3>

<p>Make the thing seem easy to do, let the other person know that you have faith in his ability to do it, that he has an undeveloped flair for it – and he will practise until the dawn comes in the window in order to excel.</p>

<h3>Make the other person happy about doing what you suggest</h3>

<p>When you make your request, put it in a form that will convey to the other person the idea that he personally will benefit. <em>&lsquo;He had a delightful way of putting things; he created the impression that by accepting this great honour I would be doing him a favour.&rsquo;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win People to Your Way of Thinking (HTWFAIP - Part 3)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/12/21/win-people-to-your-way-of-thinking-htwfaip-part-3/"/>
    <updated>2014-12-21T18:53:16-08:00</updated>
    <id>http://jivimberg.github.io/blog/2014/12/21/win-people-to-your-way-of-thinking-htwfaip-part-3</id>
    <content type="html"><![CDATA[<p>Third post of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a>. Today: some advice on how to convince people to your way of thinking. This is a long, but juicy post.</p>

<!-- more -->


<h3>1. You can’t win an argument</h3>

<p>If you argue and rankle and contradict, you may achieve a victory sometimes; but it will be an empty victory because you will never get your opponent’s good will (&ldquo;You have made him feel inferior. You have hurt his pride. He will resent your triumph.&rdquo;). Distrust your first instinctive impression. Our first natural reaction in a disagreeable situation is to be defensive. Be careful. Listen first. Give your opponents a chance to talk. Let them finish. Do not resist, defend or debate. This only raises barriers. Try to build bridges of understanding. Don’t build higher barriers of misunderstanding. Look for areas of agreement. When you have heard your opponents out, dwell first on the points and areas on which you agree. Be honest. Look for areas where you can admit error and say so. Apologize for your mistakes. It will help disarm your opponents and reduce defensiveness. Thank your opponents sincerely for their interest. Anyone who takes the time to disagree with you is interested in the same things you are. Think of them as people who really want to help you, and you may turn your opponents into friends.</p>

<h3>2. Show respect for the other person’s opinions</h3>

<p>Never say, “You’re wrong.”: Never begin by announcing ‘I am going to prove so-and-so to you.’ That’s bad. Do it so subtly, so adroitly, that no one will feel that you are doing it. You will never get into trouble by admitting that you may be wrong. That will stop all argument and inspire your opponent to be just as fair and open and broad-minded as you are. It will make him want to admit that he, too, may be wrong.</p>

<h3>3. When wrong, admit it quickly and emphatically</h3>

<p>Say about yourself all the derogatory things you know the other  person is thinking or wants to say—and say them before that person has a chance to. The chances are a hundred to one that a generous, forgiving attitude will be taken and your mistakes will be minimised.</p>

<h3>4. Begin in a friendly way</h3>

<p>Gentleness and friendliness were always stronger than fury and force.</p>

<h3>5. Get the other person saying “yes, yes”</h3>

<p>Begin by emphasising – and keep on emphasising – the things on which you agree. Keep emphasising, if possible, that you are both striving for the same end and that your only difference is one of method and not of purpose. The skillful speaker gets, at the outset, a number of ‘Yes’ responses.</p>

<h3>6. Let the other person do lots of the talking</h3>

<p>Let the other people talk themselves out. They know more about their business and problems than you do. So ask them questions. Let them tell you a few things. Almost every successful person likes to reminisce about his early struggles.</p>

<h3>7. Let the other person feel ownership of the idea</h3>

<p>No one likes to feel that he or she is being sold something or told to do a thing. We much prefer to feel that we are buying of our own accord or acting on our own ideas. We like to be consulted about our wishes, our wants, our thoughts.</p>

<h3>8. Try honestly to see things from the other  person’s point of view</h3>

<p>Success in dealing with people depends on a sympathetic grasp of the other person’s viewpoint. ‘I would rather walk the sidewalk in front of a person’s office for two hours before an interview,’ said Dean Donham of the Harvard business school, ‘than step into that office without a perfectly clear idea of what I was going to say and what that person – from my knowledge of his or her interests and motives – was likely to answer.’</p>

<h3>9. Be sympathetic towards the other person’s ideas and desires</h3>

<p>The magic words: “I don’t blame you one iota for feeling as you do. If I were you I’d undoubtedly feel the same.” And mean it!</p>

<h3>10. Appeal to the nobler motives</h3>

<p>If you have no other evidence, assume that a customer is honest, truthful, and willing to pay the charges if they are convinced that they are correct.Even those who aren’t naturally honest will often react well if you show that you consider them to be honest and fair.</p>

<h3>11. Dramatize your idea</h3>

<p>Merely stating a truth isn’t enough. The truth has to be made vivid, interesting, dramatic. You have to use showmanship.</p>

<h3>12. Throw down a challenge</h3>

<p>People love the work they are doing, and being great at it.Charles Schwab: “The way to get things done is to stimulate competition. I do not mean in a sordid, money-getting way, but in the desire to excel.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make People Like You (HTWFAIP - Part 2)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/11/15/how-to-make-people-like-you-htwfaip-part-2/"/>
    <updated>2014-11-15T18:57:40-08:00</updated>
    <id>http://jivimberg.github.io/blog/2014/11/15/how-to-make-people-like-you-htwfaip-part-2</id>
    <content type="html"><![CDATA[<p>Second post of the <a href="http://localhost:4000/blog/categories/htwfaip/">series</a> on the book <a href="http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034">&ldquo;How to Win Friends and Influence People&rdquo;</a> by <a href="http://en.wikipedia.org/wiki/Dale_Carnegie">Dale Carnegie</a>. I know, <strong>How to make people like you</strong> sounds soooo lame, but stick with me, this is a good chapter.</p>

<!-- more -->


<h3>1. Become genuinely interested in other people</h3>

<p>You can make more friends in two months by becoming interested in other people than you can in two years by trying to get other people interested in you.</p>

<h3>2. Smile!</h3>

<p>Like a dog, show that you are happy to see people. Smile even when talking on the phone. Happiness doesn’t depend on outward conditions. It depends on inner conditions. ‘A man without a smiling face must not open a shop.’</p>

<h3>3. Remember that a person’s name is to that person the sweetest sound in any language</h3>

<p>Napoleon’s advice on remembering names: If he didn’t get the name distinctly, he said, “So sorry. I didn’t get the name clearly.” Then, if it was an unusual name, he would say, “How is it spelled?” During the conversation, he took the trouble to repeat the name several times, and tried to associate it in his mind with the person’s features, expression and general appearance.</p>

<h3>4. Be a good listener</h3>

<p>Encourage others to talk about themselves: &ldquo;She didn’t want to hear me talk about my travels. All she wanted was an interested listener, so she could expand her ego and tell about where she had been.&rdquo; Exclusive attention to the person who is speaking to you is very important. Nothing else is so flattering as that. Ask questions that the other  person will enjoy answering. A friend often doesn’t want advice, but just a friendly, sympathetic listener. A person’s toothache means more to that person than a famine in China which kills a million people, think of that the next time you start a conversation.</p>

<h3>5. Talk in terms of the other person’s interests</h3>

<p>Whenever Roosevelt expected a visitor, he sat up late the night before, reading up on the subject in which he knew his guest was particularly interested.</p>

<h3>6. Make the other person feel important—and do it sincerely</h3>

<p>Little phrases such as ‘I’m sorry to trouble you,’ ‘Would you be so kind as to – ?’ ‘Won’t you please?’ ‘Would you mind?’ ‘Thank you’ – little courtesies like these oil the cogs of the monotonous grind of everyday life – and incidentally, they are the hallmark of good breeding. The unvarnished truth is that almost all the people you meet feel themselves superior to you in some way, and a sure way to their hearts is to let them realise in some subtle way that you realise their importance, and recognise it sincerely. ‘Talk to people about themselves and they will listen for hours.’</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling People (HTWFAIP - Part 1)]]></title>
    <link href="http://jivimberg.github.io/blog/2014/11/02/handling-people-htwfaip-part-1/"/>
    <updated>2014-11-02T18:50:13-03:00</updated>
    <id>http://jivimberg.github.io/blog/2014/11/02/handling-people-htwfaip-part-1</id>
    <content type="html"><![CDATA[<p>This is the first of a <a href="http://localhost:4000/blog/categories/htwfaip/">series of posts</a> on the book <a href="http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034">&ldquo;How to Win Friends and Influence People&rdquo;</a> by <a href="http://en.wikipedia.org/wiki/Dale_Carnegie">Dale Carnegie</a>. Today: <strong>Handling People</strong>.</p>

<!-- more -->


<h3>1. Don&rsquo;t criticize condemn or complain</h3>

<p>Criticism is futile because it puts a person on the defensive and usually makes him strive to justify himself. Criticism is dangerous, because it wounds a person’s precious pride, hurts his sense of importance, and arouses resentment.</p>

<h3>2. Give sincere and honest appreciation</h3>

<p>Everyone wants to feel important. We usually spend about 95 percent of our time thinking about ourselves. Be hearty in your approbation and lavish in your praise. Think of the other person’s good points, so you won’t have to resort to flattery. Try leaving a friendly trail of little sparks of gratitude on your daily trips.</p>

<h3>3. Arouse in the other person an eager want</h3>

<p> Talk about what they want and show them how to get it. Henry Ford: “If there is any one secret of success, it lies in the ability to get the other person’s point of view and see things from that person’s angle as well as from your own.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on API Design]]></title>
    <link href="http://jivimberg.github.io/blog/2014/10/12/notes-on-api-design/"/>
    <updated>2014-10-12T15:34:29-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/10/12/notes-on-api-design</id>
    <content type="html"><![CDATA[<p>This is from a presentation I gave at work about how to design APIs that don&rsquo;t suck. You can download the whole presentation from <a href="http://jivimberg.github.io/downloads/ApiDesignKeynote.zip">here</a></p>

<!-- more -->


<h2>3 aspects of a good API</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Discoverability.jpg" width="250" title="'Discoverability'" ></p>

<p><strong>Discoverability:</strong> Is how easy is for a user to access to the exposed functionality. We should always remember that our API is only a tool: a means to an end. The user wants to understand as little as possible to confidently achieve his goal.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Consistency.jpg" width="250" title="'Consistency'" >
<br></p>

<p><strong>Consistency:</strong> Helps improving the usability by reusing the same patterns across the whole API consistently. This way we beneffit from reusing the concepts the user has already learned.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Stability.jpg" width="250" title="'Stability'" ></p>

<p><strong>Stability:</strong> There are 2 different types of stability that we need to be aware of:</p>

<ol>
<li><strong>Backward compatibility:</strong> Your changes you introduce in your new version of your API must not break the apps of your users written against a previous version. To achieve this one of the best tools you have is testing. Investing time in writing tests early will result in the ability to change your API confidently, knowing that if the tests are passing then you have achieved backward compatibility</li>
<li><strong>Conceptual Stability:</strong> The user has build a conceptual model of how the API works. If possible we should avoid changing the concepts he has already learned. This one is even trickier to achieve because there is no exact way of testing it.</li>
</ol>


<h2>4 Principles to avoid complex APIs</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/EconomyOfConcepts.jpg" width="250" title="'EconomyOfConcepts'" ></p>

<p><strong>Economy of concepts:</strong> Minimizing the concepts introduced in your API will result in a flatter learning curve. A good way to achieve this is by making your API coexists with the platform. For example: avoid introducing new collections the user has to learn how to use, reuse known design patterns, honour the language naming convention, etc.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Symmetry.jpg" width="250" title="'Symmetry'" ></p>

<p><strong>Simetry:</strong> Once more a simmetric API is easier to learn because it is more predictable. For example: if the user sees a method called <code>open()</code> he probably will know that there is another called <code>close()</code> that he should call at the end, and so on and so forth.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Naming.jpg" width="250" title="'Naming'" ></p>

<p><strong>Naming:</strong> Always use the same name for the same concept. Devs tend to get creative when naming things and that&rsquo;s a bad idea! If we, for example, use the term <em>&lsquo;create&rsquo;</em> in one place and <em>&lsquo;build&rsquo;</em> in another, it becomes very difficult to understand which is the pattern behind the design of the API. When used appropiately a a simple name we can communicate a complex concept with little or no ambiguity. As a rule of thumb if we are having a hard time naming some component then perhaps it&rsquo;s responsibility is not clear enough and we should review our design.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/MinimizeAccessibility.jpg" width="350" title="'Minimize Accessibility'" ></p>

<p><strong>Minimize Accessibility:</strong> Similar to encapsulation in Object Oriented Design, we should hide all the details the user doesn&rsquo;t need to know about. This way we are able to change those things under the hood without loosing backward compatibility. This maximizes information hiding and simplifies the use of the API, avoiding confusion by eliminating unnecessary choices.</p>

<h2>6 Helpful tips</h2>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/UseCaseDriven.jpg" width="250" title="'Use case driven'" ></p>

<p><strong>Use case driven:</strong> It is useful to validate the possible use cases with future users of the API as soon as possible. One good trick is to start writing code against the API even when the implementation is not ready yet.
An advantage of using use cases is that since we intereract with the API through code each use case can be easily translated into a test case. Furthermore using a TDD approach will provide some feeling on the usability of the API.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/WhenInDoubt.jpg" width="250" title="'When in doubt leave it out'" ></p>

<p><strong>When in doubt&hellip;:</strong> One of the most difficult choices an API designer is faced with, is deciding what stays and what goes. In general, if there isn&rsquo;t a great use case supporting a piece of the API, we&rsquo;re better off not having it there in the first place. <em>Remember: you can always add to an API, but you almost never can remove from it.</em> APIs are &ldquo;add only&rdquo;!</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/Documentation.jpg" width="350" title="'Documentation'" ></p>

<p><strong>Documentation:</strong> It&rsquo;s well known that devs don&rsquo;t read the documentation. Luckily if your API is discoverable then your users won&rsquo;t need much documentation. 2 tips on this regard:</p>

<ol>
<li>Document by exception: Focus only on what the user needs to know</li>
<li>Use lot of examples: In fact if you could only write one thing make it a example.</li>
</ol>


<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/Change.jpg" width="250" title="'Plan for a change'" ></p>

<p><strong>Plan for a change:</strong> In any successful API, the only constant is change. Features change, users request new features, we realise we made some obvious mistakes. Our API will change and we better be ready for it. When changing your API make sure to review your initial assumptions.</p>

<p><img class="left" src="http://jivimberg.github.io/images/posts/2014-10-12/DontDoEverything.jpg" width="250" title="'Don't do everythng'" ></p>

<p><strong>Don&rsquo;t do everything:</strong> It is as important to know what you won&rsquo;t do than knowing what you do. You have to always be open to breaking an API into several modules. Sometimes it us better to have two small APIs that one large one.</p>

<p><img class="right" src="http://jivimberg.github.io/images/posts/2014-10-12/ImplVsInterface.jpg" width="350" title="'Implementation Vs Interface'" ></p>

<p><strong>Implementation != Interface</strong> It is important to be clear on what it&rsquo;s an implementation detail and what is essential to the API. Exposing implementation details confuse the user and limits our freedom to change the API later on. For example: Avoid describing specific algorithms, avoid including tuning parameters, avoid specifying hashing functions. Focus on results, not means.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Flags]]></title>
    <link href="http://jivimberg.github.io/blog/2014/09/20/feature-flags/"/>
    <updated>2014-09-20T14:53:01-07:00</updated>
    <id>http://jivimberg.github.io/blog/2014/09/20/feature-flags</id>
    <content type="html"><![CDATA[<p>In this post I&rsquo;ll introduce the concept of Feature Toggles as a release alternative to <a href="http://martinfowler.com/bliki/FeatureBranch.html">FeatureBranches</a>. This technique is also known as: Feature toggles, Feature switches, Feature flippers, etc.</p>

<!-- more -->




<p class='info warning' data-title='Disclamer'>This article is HEAVILY based on Martin Fowler's FeatureToggle (http://martinfowler.com/bliki/FeatureToggle.html). Feel free to refer to the original article for further detail.</p>


<p>The basic idea of Feature Flags is to have a <strong>configuration file</strong> that defines a bunch of toggles for various features you are working on. The running application then uses these toggles in order to decide whether or not to show the new feature.</p>

<p>We can have features in the UI or in the application code. There they could be as crude as a conditional test, or something more sophisticated like a strategy wired through dependency injection.</p>

<p>Toggle checks should only appear at the minimum amount of points to ensure the new feature is properly hidden. Focus on just the entry points that would lead users there and toggle those entry points. If you find that creating, maintaining, or removing the toggles takes significant time, then that&rsquo;s a sign that you have too many toggle tests.</p>

<h2>Types of toggles</h2>

<p>Feature toggles come in 2 flavors:</p>

<ol>
<li><strong>Release toggles:</strong> Used to hide partly build features.</li>
<li><strong>Business toggles:</strong> Used to selectively turn on features in regular use. For example to only expose certain features when the application is running in a particular environment configuration.</li>
</ol>


<p>Release toggles are primarily visible to the development organization and should be retired once the feature has bedded down in the application. Business toggles are visible to the business sponsors and are a permanent feature of the application. This means that <strong>the two kinds of toggles need to be clearly separated</strong>, usually appearing in separate configuration files.</p>

<p>Another way of dividing the toggles is by the time they are set. Here we have:</p>

<ol>
<li>Set at runtime</li>
<li>Set at build time</li>
</ol>


<p>You often need to build some admin tooling to help control of business toggles that can change at runtime.</p>

<h2>Testing</h2>

<p>In general there&rsquo;s no need to test all combinations of features. For release toggles it&rsquo;s usually sufficient to run two combinations:</p>

<ol>
<li>All the toggles on that are expected to be on in the next release</li>
<li>All toggles on</li>
</ol>


<p>For business toggles the combination problem is greater, since you do need to consider the various combinations that appear in practice and how they might interfere. You usually won&rsquo;t need to test every combination, but what subset of combinations you need depends on your knowledge of how the application performs in production.</p>
]]></content>
  </entry>
  
</feed>
